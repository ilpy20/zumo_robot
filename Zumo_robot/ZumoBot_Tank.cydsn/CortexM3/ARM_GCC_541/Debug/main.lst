ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.zmain,"ax",%progbits
  20              		.align	2
  21              		.global	zmain
  22              		.thumb
  23              		.thumb_func
  24              		.type	zmain, %function
  25              	zmain:
  26              	.LFB85:
  27              		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        **** * @mainpage ZumoBot Project
   3:main.c        **** * @brief    You can make your own ZumoBot with various sensors.
   4:main.c        **** * @details  <br><br>
   5:main.c        ****     <p>
   6:main.c        ****     <B>General</B><br>
   7:main.c        ****     You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress
   8:main.c        ****     library has basic methods of various sensors and communications so that you can make what you w
   9:main.c        ****     <br><br>
  10:main.c        ****     </p>
  11:main.c        ****     
  12:main.c        ****     <p>
  13:main.c        ****     <B>Sensors</B><br>
  14:main.c        ****     &nbsp;Included: <br>
  15:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
  16:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
  17:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
  18:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Motors
  19:main.c        ****     &nbsp;Wii nunchuck<br>
  20:main.c        ****     &nbsp;TSOP-2236: IR Receiver<br>
  21:main.c        ****     &nbsp;HC-SR04: Ultrasonic sensor<br>
  22:main.c        ****     &nbsp;APDS-9301: Ambient light sensor<br>
  23:main.c        ****     &nbsp;IR LED <br><br><br>
  24:main.c        ****     </p>
  25:main.c        ****     
  26:main.c        ****     <p>
  27:main.c        ****     <B>Communication</B><br>
  28:main.c        ****     I2C, UART, Serial<br>
  29:main.c        ****     </p>
  30:main.c        **** */
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 2


  31:main.c        **** 
  32:main.c        **** #include <project.h>
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdlib.h>
  35:main.c        **** #include "FreeRTOS.h"
  36:main.c        **** #include "task.h"
  37:main.c        **** #include "Motor.h"
  38:main.c        **** #include "Ultra.h"
  39:main.c        **** #include "Nunchuk.h"
  40:main.c        **** #include "Reflectance.h"
  41:main.c        **** #include "Gyro.h"
  42:main.c        **** #include "Accel_magnet.h"
  43:main.c        **** #include "LSM303D.h"
  44:main.c        **** #include "IR.h"
  45:main.c        **** #include "Beep.h"
  46:main.c        **** #include "mqtt_sender.h"
  47:main.c        **** #include <time.h>
  48:main.c        **** #include <sys/time.h>
  49:main.c        **** #include "serial1.h"
  50:main.c        **** #include <unistd.h>
  51:main.c        **** /**
  52:main.c        ****  * @file    main.c
  53:main.c        ****  * @brief   
  54:main.c        ****  * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp
  55:main.c        **** */
  56:main.c        **** 
  57:main.c        **** #if 0
  58:main.c        **** //template
  59:main.c        **** void zmain(void){
  60:main.c        ****     
  61:main.c        ****     while(true)
  62:main.c        ****     {
  63:main.c        ****         BatteryLed_Write(!SW1_Read());
  64:main.c        ****         vTaskDelay(100);
  65:main.c        ****     }
  66:main.c        **** }
  67:main.c        **** #endif
  68:main.c        **** 
  69:main.c        **** #if 0
  70:main.c        **** // Beep light test
  71:main.c        **** void zmain(void)
  72:main.c        **** {
  73:main.c        ****     while(true)
  74:main.c        ****     {
  75:main.c        ****         if ((SW1_Read() == 0)){
  76:main.c        ****             for(int i = 0; i < 3; i++){
  77:main.c        ****                 BatteryLed_Write(1);
  78:main.c        ****                 Beep(750, 30);
  79:main.c        ****                 vTaskDelay(500);
  80:main.c        ****                 BatteryLed_Write(0);
  81:main.c        ****                 vTaskDelay(500);
  82:main.c        ****             }
  83:main.c        ****             for(int i = 0; i<3; i++){
  84:main.c        ****                 BatteryLed_Write(1);
  85:main.c        ****                 Beep(750, 30);
  86:main.c        ****                 vTaskDelay(1000);
  87:main.c        ****                 BatteryLed_Write(0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 3


  88:main.c        ****                 vTaskDelay(500);
  89:main.c        ****             }
  90:main.c        ****             for(int i = 0; i < 3; i++){
  91:main.c        ****                 BatteryLed_Write(1);
  92:main.c        ****                 Beep(750, 30);
  93:main.c        ****                 vTaskDelay(500);
  94:main.c        ****                 BatteryLed_Write(0);
  95:main.c        ****                 vTaskDelay(500);
  96:main.c        ****             }
  97:main.c        ****         }
  98:main.c        ****     }
  99:main.c        ****     
 100:main.c        ****     
 101:main.c        ****  }   
 102:main.c        **** #endif
 103:main.c        **** 
 104:main.c        **** #if 0
 105:main.c        **** // Name and age
 106:main.c        **** void zmain(void)
 107:main.c        **** {
 108:main.c        ****     TickType_t start;
 109:main.c        ****     TickType_t end;
 110:main.c        ****     char name[32];
 111:main.c        ****     int age;
 112:main.c        ****     
 113:main.c        ****     
 114:main.c        ****     printf("\n\n");
 115:main.c        ****     
 116:main.c        ****     printf("Enter your name: ");
 117:main.c        ****     //fflush(stdout);
 118:main.c        ****     start = xTaskGetTickCount();
 119:main.c        ****     scanf("%s", name);
 120:main.c        ****     printf("Enter your age: ");
 121:main.c        ****     //fflush(stdout);
 122:main.c        ****     scanf("%d", &age);
 123:main.c        ****     end = xTaskGetTickCount();
 124:main.c        ****     int time_long = end - start;
 125:main.c        ****     //printf("You are [%s], age = %d\n", name, age);
 126:main.c        ****     if (age <= 21){
 127:main.c        ****         if(time_long < 3000){
 128:main.c        ****             printf("\nSuper fast dude!");
 129:main.c        ****         }
 130:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 131:main.c        ****             printf("\nSo mediocre.");
 132:main.c        ****         }
 133:main.c        ****         else{
 134:main.c        ****             printf("\nMy granny is faster than you!");
 135:main.c        ****         }
 136:main.c        ****     }
 137:main.c        ****     else if((age >= 22)&&(age<=50)){
 138:main.c        ****         if(time_long < 3000){
 139:main.c        ****             printf("\nBe quick or be dead");
 140:main.c        ****         }
 141:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 142:main.c        ****             printf("\nYou're so average.");
 143:main.c        ****         }
 144:main.c        ****         else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 4


 145:main.c        ****             printf("\nHave you been smoking something illegal?");
 146:main.c        ****         }
 147:main.c        ****     }
 148:main.c        ****     else{
 149:main.c        ****         if(time_long <= 3000){
 150:main.c        ****             printf("\nStill going strong");
 151:main.c        ****         }
 152:main.c        ****         else if((time_long >= 4000)&&(time_long <=5000)){
 153:main.c        ****             printf("\nYou are doing ok for your age.");
 154:main.c        ****         }
 155:main.c        ****         else{
 156:main.c        ****             printf("\nDo they still allow you to drive?");
 157:main.c        ****         }
 158:main.c        ****     }
 159:main.c        ****     while(true)
 160:main.c        ****     {
 161:main.c        ****         BatteryLed_Write(!SW1_Read());
 162:main.c        ****         vTaskDelay(100);
 163:main.c        ****     }
 164:main.c        ****  }   
 165:main.c        **** #endif
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** #if 0
 169:main.c        **** //battery level//
 170:main.c        **** void zmain(void)
 171:main.c        **** {
 172:main.c        **** 	ADC_Battery_Start();   	 
 173:main.c        **** 
 174:main.c        **** 	int16 adcresult =0;
 175:main.c        **** 	float volts = 0.0;
 176:main.c        **** 
 177:main.c        **** 	printf("\nBoot\n");
 178:main.c        **** 
 179:main.c        **** 	//BatteryLed_Write(1); // Switch led on
 180:main.c        **** 	//BatteryLed_Write(0); // Switch led off
 181:main.c        **** 	//uint8 button;
 182:main.c        **** 	//button = SW1_Read(); // read SW1 on pSoC board
 183:main.c        **** 	// SW1_Read() returns zero when button is pressed
 184:main.c        **** 	// SW1_Read() returns one when button is not pressed
 185:main.c        **** 
 186:main.c        **** 	while(true)
 187:main.c        **** 	{
 188:main.c        ****     	char msg[80];
 189:main.c        ****     	ADC_Battery_StartConvert(); // start sampling
 190:main.c        ****     	if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for ADC converted val
 191:main.c        ****         	adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
 192:main.c        ****         	volts=(adcresult*5/4095)*(30/20);
 193:main.c        ****         	// convert value to Volts
 194:main.c        ****         	// you need to implement the conversion
 195:main.c        ****        	 
 196:main.c        ****         	// Print both ADC results and converted value
 197:main.c        ****         	printf("%d %f\r\n",adcresult, volts);
 198:main.c        ****        	 
 199:main.c        ****     	if (volts<4){
 200:main.c        ****         	while(SW1_Read()){
 201:main.c        ****             	BatteryLed_Write(1);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 5


 202:main.c        ****             	vTaskDelay(500);
 203:main.c        ****             	BatteryLed_Write(0);
 204:main.c        ****             	vTaskDelay(500);
 205:main.c        ****         	}
 206:main.c        ****     	}
 207:main.c        ****     	}
 208:main.c        ****     	vTaskDelay(500);
 209:main.c        **** 	}
 210:main.c        ****  }  
 211:main.c        **** 
 212:main.c        ****    
 213:main.c        **** #endif
 214:main.c        **** 
 215:main.c        **** #if 0
 216:main.c        **** // button
 217:main.c        **** void zmain(void)
 218:main.c        **** {
 219:main.c        ****     while(true) {
 220:main.c        ****         printf("Press button within 5 seconds!\n");
 221:main.c        ****         int i = 50;
 222:main.c        ****         while(i > 0) {
 223:main.c        ****             if(SW1_Read() == 0) {
 224:main.c        ****                 break;
 225:main.c        ****             }
 226:main.c        ****             vTaskDelay(100);
 227:main.c        ****             --i;
 228:main.c        ****         }
 229:main.c        ****         if(i > 0) {
 230:main.c        ****             printf("Good work\n");
 231:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait until button is released
 232:main.c        ****         }
 233:main.c        ****         else {
 234:main.c        ****             printf("You didn't press the button\n");
 235:main.c        ****         }
 236:main.c        ****     }
 237:main.c        **** }
 238:main.c        **** #endif
 239:main.c        **** 
 240:main.c        **** #if 0
 241:main.c        **** // button
 242:main.c        **** void zmain(void)
 243:main.c        **** {
 244:main.c        ****     printf("\nBoot\n");
 245:main.c        **** 
 246:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 247:main.c        ****     BatteryLed_Write(0); // Switch led off 
 248:main.c        ****     
 249:main.c        ****     //uint8 button;
 250:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 251:main.c        ****     // SW1_Read() returns zero when button is pressed
 252:main.c        ****     // SW1_Read() returns one when button is not pressed
 253:main.c        ****     
 254:main.c        ****     bool led = false;
 255:main.c        ****     
 256:main.c        ****     while(true)
 257:main.c        ****     {
 258:main.c        ****         // toggle led state when button is pressed
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 6


 259:main.c        ****         if(SW1_Read() == 0) {
 260:main.c        ****             led = !led;
 261:main.c        ****             BatteryLed_Write(led);
 262:main.c        ****             if(led) printf("Led is ON\n");
 263:main.c        ****             else printf("Led is OFF\n");
 264:main.c        ****             Beep(1000, 150);
 265:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait while button is being pressed
 266:main.c        ****         }        
 267:main.c        ****     }
 268:main.c        ****  }   
 269:main.c        **** #endif
 270:main.c        **** 
 271:main.c        **** #if 0
 272:main.c        ****     void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);
 273:main.c        ****     
 274:main.c        **** void zmain(void)
 275:main.c        **** {
 276:main.c        ****     Ultra_Start();
 277:main.c        ****     motor_start(0,0);
 278:main.c        ****     motor_forward(0,0);
 279:main.c        ****     
 280:main.c        ****     vTaskDelay(3000);
 281:main.c        ****     
 282:main.c        ****     while(true){
 283:main.c        ****     int distance = Ultra_GetDistance();
 284:main.c        ****     
 285:main.c        ****     if(distance <= 10 && distance !=0){
 286:main.c        ****         motor_backward(50,500);
 287:main.c        ****         Beep(150, 200);
 288:main.c        ****         motor_turn(150,150, 500);
 289:main.c        ****         motor_forward(0,0);
 290:main.c        ****      }
 291:main.c        ****     motor_turn(200,100,50);
 292:main.c        ****     }   
 293:main.c        **** }
 294:main.c        **** #endif
 295:main.c        **** 
 296:main.c        **** #if 0
 297:main.c        **** //ultrasonic sensor//
 298:main.c        **** void zmain(void)
 299:main.c        **** {
 300:main.c        ****     Ultra_Start();                          // Ultra Sonic Start function
 301:main.c        ****     
 302:main.c        ****     while(true) {
 303:main.c        ****         int d = Ultra_GetDistance();
 304:main.c        ****         // Print the detected distance (centimeters)
 305:main.c        ****         printf("distance = %d\r\n", d);
 306:main.c        ****         vTaskDelay(200);
 307:main.c        ****     }
 308:main.c        **** }   
 309:main.c        **** #endif
 310:main.c        **** 
 311:main.c        **** #if 0
 312:main.c        **** //IR receiverm - how to wait for IR remote commands
 313:main.c        **** void zmain(void)
 314:main.c        **** {
 315:main.c        ****     uint8_t button_;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 7


 316:main.c        ****     printf("\nStart\n");
 317:main.c        ****     
 318:main.c        ****     while(true){
 319:main.c        ****         button_ = SW1_Read();
 320:main.c        ****         if(button_==0){
 321:main.c        ****             IR_Start();
 322:main.c        ****             printf("\n\nIR test\n");
 323:main.c        ****             struct sensors_ ref;
 324:main.c        ****             struct sensors_ dig;
 325:main.c        ****             bool led = false,loop = true, startline= true;
 326:main.c        ****             int count =0;
 327:main.c        ****             motor_start();              // enable motor controller 
 328:main.c        ****             IR_flush(); // clear IR receive buffer
 329:main.c        ****             printf("Buffer cleared\n");
 330:main.c        ****             
 331:main.c        ****             reflectance_start();
 332:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 333:main.c        ****             vTaskDelay(200);
 334:main.c        ****                 while(startline){
 335:main.c        ****                     // read raw sensor values
 336:main.c        ****                     reflectance_read(&ref);
 337:main.c        ****                     reflectance_digital(&dig); 
 338:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 339:main.c        ****                         motor_turn(50,50,50);       // motor forward
 340:main.c        ****                         Beep(60,80);
 341:main.c        ****                     }
 342:main.c        ****                     else{
 343:main.c        ****                         motor_forward(0,0);       // Stop motors
 344:main.c        ****                         startline = false;
 345:main.c        ****                     }
 346:main.c        ****                 }
 347:main.c        ****             IR_wait();  // wait for IR command
 348:main.c        ****             led = !led;
 349:main.c        ****             BatteryLed_Write(led);   
 350:main.c        ****             
 351:main.c        ****             // Toggle led when IR signal is received
 352:main.c        ****             while(loop)
 353:main.c        ****             {   
 354:main.c        ****                 if(led){
 355:main.c        ****                     // read raw sensor values
 356:main.c        ****                     reflectance_read(&ref);
 357:main.c        ****                     reflectance_digital(&dig); 
 358:main.c        ****                     
 359:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 360:main.c        ****                         motor_turn(50,50,50);       // motor forward
 361:main.c        ****                         vTaskDelay(50);
 362:main.c        ****                         count++;
 363:main.c        ****                         printf("count %d \n",count);
 364:main.c        ****                         if(count >= 7){
 365:main.c        ****                             motor_forward(0,0);       // Stop motors
 366:main.c        ****                             loop = false;
 367:main.c        ****                         }
 368:main.c        ****                     }
 369:main.c        ****                     else{
 370:main.c        ****                          motor_turn(50,50,50);       // motor forward
 371:main.c        ****                         Beep(100,100);
 372:main.c        ****                     }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 8


 373:main.c        ****                 }
 374:main.c        ****                 else {
 375:main.c        ****                     printf("Led is OFF\n");
 376:main.c        ****                     loop = false;
 377:main.c        ****                 }
 378:main.c        ****                
 379:main.c        ****             }    
 380:main.c        ****         }
 381:main.c        ****     }
 382:main.c        ****  }   
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        **** 
 386:main.c        **** #if 0
 387:main.c        **** //IR receiverm - how to wait for IR remote commands
 388:main.c        **** void zmain(void)
 389:main.c        **** {
 390:main.c        ****     uint8_t button_;
 391:main.c        ****     printf("\nStart\n");
 392:main.c        ****     
 393:main.c        ****     while(true){
 394:main.c        ****         button_ = SW1_Read();
 395:main.c        ****         if(button_==0){
 396:main.c        ****             IR_Start();
 397:main.c        ****             printf("\n\nIR test\n");
 398:main.c        ****             struct sensors_ ref;
 399:main.c        ****             struct sensors_ dig;
 400:main.c        ****             bool led = false,loop = true, startline= true/*, crossline= true*/;
 401:main.c        ****             int count =0;
 402:main.c        ****             motor_start();              // enable motor controller 
 403:main.c        ****             IR_flush(); // clear IR receive buffer
 404:main.c        ****             printf("Buffer cleared\n");
 405:main.c        ****             
 406:main.c        ****             reflectance_start();
 407:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 408:main.c        ****             vTaskDelay(200);
 409:main.c        ****                 while(startline){
 410:main.c        ****                     // read raw sensor values
 411:main.c        ****                     reflectance_read(&ref);
 412:main.c        ****                     reflectance_digital(&dig); 
 413:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 414:main.c        ****                         motor_turn(50,50,0);       // motor forward
 415:main.c        ****                         //Beep(60,80);
 416:main.c        ****                     }
 417:main.c        ****                     else{
 418:main.c        ****                         motor_forward(0,0);       // Stop motors
 419:main.c        ****                         startline = false;
 420:main.c        ****                     }
 421:main.c        ****                 }
 422:main.c        ****             IR_wait();  // wait for IR command
 423:main.c        ****             led = !led;
 424:main.c        ****             BatteryLed_Write(led);   
 425:main.c        ****             
 426:main.c        ****             // Toggle led when IR signal is received
 427:main.c        ****             while(loop)
 428:main.c        ****             {   
 429:main.c        ****                 if(led){
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 9


 430:main.c        ****                     //do {
 431:main.c        ****                         // read raw sensor values
 432:main.c        ****                     //reflectance_read(&ref);
 433:main.c        ****                     reflectance_digital(&dig); 
 434:main.c        ****                     
 435:main.c        ****                    
 436:main.c        ****                         /*if(dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r3 == 1 && dig.r2 == 
 437:main.c        ****                             motor_forward(0,0);
 438:main.c        ****                             count++;
 439:main.c        ****                             if(count==1){
 440:main.c        ****                                 motor_turn(50,50,50);       // motor forward
 441:main.c        ****                             }
 442:main.c        ****                             if (count==2){
 443:main.c        ****                                 motor_turn_left(10,100,500);
 444:main.c        ****                             }
 445:main.c        ****                             if (count<=4){
 446:main.c        ****                                 motor_turn_right(100,10,500);
 447:main.c        ****                             }
 448:main.c        ****                             if (count==5){
 449:main.c        ****                                 motor_forward(0,0);       // Stop motors
 450:main.c        ****                                 led = false;
 451:main.c        ****                                 BatteryLed_Write(led);
 452:main.c        ****                             }
 453:main.c        ****                         } */
 454:main.c        ****                         if(dig.r2 == 1 && dig.r1 == 1){
 455:main.c        ****                             //count++;
 456:main.c        ****                             motor_turn(100,10,0);       // motor turn left
 457:main.c        ****                             //Beep(20,20);
 458:main.c        ****                             vTaskDelay(0);
 459:main.c        ****                             
 460:main.c        ****                             printf("count %d \n",count);
 461:main.c        ****                         }
 462:main.c        ****                         if(dig.l2 == 1 && dig.l1 == 1){
 463:main.c        ****                             //count++;
 464:main.c        ****                             motor_turn(10,100,0);       // motor turn right
 465:main.c        ****                            // Beep(20,20);
 466:main.c        ****                             vTaskDelay(0);
 467:main.c        ****                             
 468:main.c        ****                             printf("count %d \n",count);
 469:main.c        ****                         }
 470:main.c        ****                        // printf("count %d \n",count);
 471:main.c        ****                         if (dig.l1 == 1 && dig.r1 == 1){
 472:main.c        ****                             
 473:main.c        ****                             motor_turn(50,50,0);       // motor forward
 474:main.c        ****                             vTaskDelay(0);
 475:main.c        ****                             //Beep(50,50);
 476:main.c        ****                             //count++;
 477:main.c        ****                             printf("count %d \n",count);
 478:main.c        ****                         }
 479:main.c        ****                    
 480:main.c        ****                 }
 481:main.c        ****                 else {
 482:main.c        ****                     printf("Led is OFF\n");
 483:main.c        ****                     loop = false;
 484:main.c        ****                 }
 485:main.c        ****                
 486:main.c        ****             }    
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 10


 487:main.c        ****         }
 488:main.c        ****     }
 489:main.c        ****  }  
 490:main.c        **** #endif
 491:main.c        **** 
 492:main.c        **** #if 0
 493:main.c        **** //IR receiverm - how to wait for IR remote commands
 494:main.c        **** void zmain(void)
 495:main.c        **** {
 496:main.c        ****     //IR receiverm - how to wait for IR remote commands
 497:main.c        **** void zmain(void);
 498:main.c        **** 
 499:main.c        ****     uint8_t button_;
 500:main.c        ****     printf("\nStart\n");
 501:main.c        **** 
 502:main.c        ****     while(true){
 503:main.c        ****         button_ = SW1_Read();
 504:main.c        ****         if(button_==0){
 505:main.c        ****             IR_Start();
 506:main.c        ****             printf("\n\nIR test\n");
 507:main.c        ****             struct sensors_ ref;
 508:main.c        ****             struct sensors_ dig;
 509:main.c        ****             bool led = false,loop = true, startline= true;
 510:main.c        ****             int count =0;
 511:main.c        ****             motor_start();              // enable motor controller 
 512:main.c        ****             IR_flush(); // clear IR receive buffer
 513:main.c        ****             printf("Buffer cleared\n");
 514:main.c        **** 
 515:main.c        ****             reflectance_start();
 516:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 517:main.c        ****             vTaskDelay(200);
 518:main.c        ****                 while(startline){
 519:main.c        ****                     // read raw sensor values
 520:main.c        ****                     reflectance_read(&ref);
 521:main.c        ****                     reflectance_digital(&dig); 
 522:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 523:main.c        ****                         motor_turn(50,50,50);       // motor forward
 524:main.c        ****                         Beep(60,80);
 525:main.c        ****                     }
 526:main.c        **** 
 527:main.c        ****                     else{
 528:main.c        ****                         motor_forward(0,0);       // Stop motors
 529:main.c        ****                         startline = false;
 530:main.c        ****                     }
 531:main.c        ****                 }
 532:main.c        ****             IR_wait();  // wait for IR command
 533:main.c        ****             led = !led;
 534:main.c        ****             BatteryLed_Write(led);   
 535:main.c        **** 
 536:main.c        ****             // Toggle led when IR signal is received
 537:main.c        ****             while(loop)
 538:main.c        ****             {   
 539:main.c        ****                 if(led){
 540:main.c        ****                     // read raw sensor values
 541:main.c        ****                     reflectance_read(&ref);
 542:main.c        ****                     reflectance_digital(&dig); 
 543:main.c        **** 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 11


 544:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1){
 545:main.c        ****                         count++;
 546:main.c        ****                         printf("\nStart\n");
 547:main.c        ****                         printf("count %d \n",count);
 548:main.c        **** 
 549:main.c        **** 
 550:main.c        ****                         while (dig.r3 == 1 && dig.l3 == 1){
 551:main.c        ****                          motor_turn(50,49,0);
 552:main.c        ****                         reflectance_digital(&dig);
 553:main.c        ****                         }
 554:main.c        ****                         if(count >= 2){
 555:main.c        ****                             motor_forward(210,0);       // Stop motors
 556:main.c        ****                         }
 557:main.c        ****                     }
 558:main.c        **** 
 559:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 1){
 560:main.c        ****                         motor_turn(210,210,0);   //goes forward lul
 561:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 562:main.c        ****                     }
 563:main.c        ****                     else if (dig.l1 == 0 && dig.r1 == 1){
 564:main.c        ****                         motor_turn(210,0,0);  //turns right lul
 565:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 566:main.c        ****                     }
 567:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 0){
 568:main.c        ****                         motor_turn(0,210,0);   ///should turn left, right lul??   
 569:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 570:main.c        ****                     }
 571:main.c        ****                     else if (dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.l2 == 
 572:main.c        ****                         motor_turn(0,0,100000);   ///should stop, right lul??   
 573:main.c        **** 
 574:main.c        **** 
 575:main.c        ****                         }
 576:main.c        ****                     }
 577:main.c        ****                 }
 578:main.c        **** 
 579:main.c        **** 
 580:main.c        ****             }    
 581:main.c        ****         }
 582:main.c        **** 
 583:main.c        **** }   
 584:main.c        **** #endif
 585:main.c        **** 
 586:main.c        **** 
 587:main.c        **** #if 0
 588:main.c        **** //reflectance
 589:main.c        **** void zmain(void)
 590:main.c        **** {
 591:main.c        ****     struct sensors_ ref;
 592:main.c        ****     struct sensors_ dig;
 593:main.c        **** 
 594:main.c        ****     reflectance_start();
 595:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 596:main.c        ****     
 597:main.c        **** 
 598:main.c        ****     while(true)
 599:main.c        ****     {
 600:main.c        ****         // read raw sensor values
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 12


 601:main.c        ****         reflectance_read(&ref);
 602:main.c        ****         // print out each period of reflectance sensors
 603:main.c        ****         printf("%5d %5d %5d %5d %5d %5d\r\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3);     
 604:main.c        ****         
 605:main.c        ****         // read digital values that are based on threshold. 0 = white, 1 = black
 606:main.c        ****         // when blackness value is over threshold the sensors reads 1, otherwise 0
 607:main.c        ****         reflectance_digital(&dig); 
 608:main.c        ****         //print out 0 or 1 according to results of reflectance period
 609:main.c        ****         printf("%5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3);    
 610:main.c        ****         
 611:main.c        ****         vTaskDelay(200);
 612:main.c        ****     }
 613:main.c        **** }   
 614:main.c        **** #endif
 615:main.c        **** 
 616:main.c        **** 
 617:main.c        **** #if 0
 618:main.c        **** //motor
 619:main.c        **** void zmain(void)
 620:main.c        **** {
 621:main.c        ****     struct sensors_ ref;
 622:main.c        ****     struct sensors_ dig;
 623:main.c        **** 
 624:main.c        ****     reflectance_start();
 625:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 626:main.c        ****     
 627:main.c        ****     reflectance_digital(&dig);
 628:main.c        ****     
 629:main.c        ****     motor_start();              // enable motor controller
 630:main.c        ****     motor_forward(0,0);         // set speed to zero to stop motors
 631:main.c        **** 
 632:main.c        ****     vTaskDelay(3000);
 633:main.c        ****     
 634:main.c        ****     if(dig.l3, dig.l2, dig.l1){
 635:main.c        ****         
 636:main.c        ****     }
 637:main.c        ****     motor_forward(100,2000);     // moving forward
 638:main.c        ****     motor_turn(200,50,2000);     // turn
 639:main.c        ****     motor_turn(50,200,2000);     // turn
 640:main.c        ****     motor_backward(100,2000);    // moving backward
 641:main.c        ****      
 642:main.c        ****     motor_forward(0,0);         // stop motors
 643:main.c        **** 
 644:main.c        ****     motor_stop();               // disable motor controller
 645:main.c        ****     
 646:main.c        ****     while(true)
 647:main.c        ****     {
 648:main.c        ****         vTaskDelay(100);
 649:main.c        ****     }
 650:main.c        **** }
 651:main.c        **** #endif
 652:main.c        **** 
 653:main.c        **** #if 0
 654:main.c        **** /* Example of how to use te Accelerometer!!!*/
 655:main.c        **** void zmain(void)
 656:main.c        **** {
 657:main.c        ****     struct accData_ data;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 13


 658:main.c        ****     
 659:main.c        ****     printf("Accelerometer test...\n");
 660:main.c        **** 
 661:main.c        ****     if(!LSM303D_Start()){
 662:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 663:main.c        ****         vTaskSuspend(NULL);
 664:main.c        ****     }
 665:main.c        ****     else {
 666:main.c        ****         printf("Device Ok...\n");
 667:main.c        ****     }
 668:main.c        ****     motor_start();              // enable motor controller
 669:main.c        ****     motor_forward(0,0);
 670:main.c        ****     srand(time(NULL));   // Initialization, should only be called once.
 671:main.c        ****     int r=0, counter=0;
 672:main.c        ****     while(true)
 673:main.c        ****     {
 674:main.c        ****         LSM303D_Read_Acc(&data);
 675:main.c        ****        
 676:main.c        ****         motor_forward(200,20);
 677:main.c        ****         //vTaskDelay(200);
 678:main.c        ****         if (counter == 0) r = rand() % 2;
 679:main.c        ****         if (counter > 19){
 680:main.c        ****             counter = 0;
 681:main.c        ****             r = rand() % 2;
 682:main.c        ****         }// Returns a pseudo-random integer between 0 and RAND_MAX.
 683:main.c        ****             if(r == 0){
 684:main.c        ****                 motor_turn(200,50,5);
 685:main.c        ****                 vTaskDelay(0);
 686:main.c        ****                 //motor_forward(0,0);
 687:main.c        ****             }
 688:main.c        ****             else if(r == 1){
 689:main.c        ****                 motor_turn(50,200,5);
 690:main.c        ****                 vTaskDelay(0);
 691:main.c        ****                 //motor_forward(0,0);
 692:main.c        ****             }
 693:main.c        ****             else {
 694:main.c        ****                 motor_forward(200,20);
 695:main.c        ****                 vTaskDelay(0);
 696:main.c        ****             }
 697:main.c        ****         LSM303D_Read_Acc(&data);
 698:main.c        ****         if((data.accX<-4000)){
 699:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 700:main.c        ****             if(r == 0){
 701:main.c        ****                 motor_backward(80,50);
 702:main.c        ****                 motor_turn(200,50,500);
 703:main.c        ****                 vTaskDelay(0);
 704:main.c        ****                 //motor_forward(0,0);
 705:main.c        ****             }
 706:main.c        ****             else{
 707:main.c        ****                 motor_backward(80,50);
 708:main.c        ****                 motor_turn(50,200,500);
 709:main.c        ****                 vTaskDelay(0);
 710:main.c        ****                 //motor_forward(0,0);
 711:main.c        ****             }
 712:main.c        ****             motor_forward(100,100);
 713:main.c        ****         }
 714:main.c        ****         counter++;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 14


 715:main.c        ****         printf("%8d %8d %8d\n",data.accX, data.accY, data.accZ);
 716:main.c        ****         vTaskDelay(0);
 717:main.c        ****     }
 718:main.c        ****  }   
 719:main.c        **** #endif    
 720:main.c        **** 
 721:main.c        **** #if 0
 722:main.c        **** // MQTT test
 723:main.c        **** void zmain(void)
 724:main.c        **** {
 725:main.c        ****     int ctr = 0;
 726:main.c        **** 
 727:main.c        ****     printf("\nBoot\n");
 728:main.c        ****     send_mqtt("Zumo01/debug", "Boot");
 729:main.c        **** 
 730:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 731:main.c        ****     BatteryLed_Write(0); // Switch led off 
 732:main.c        **** 
 733:main.c        ****     while(true)
 734:main.c        ****     {
 735:main.c        ****         printf("Ctr: %d, Button: %d\n", ctr, SW1_Read());
 736:main.c        ****         print_mqtt("Zumo01/debug", "Ctr: %d, Button: %d", ctr, SW1_Read());
 737:main.c        **** 
 738:main.c        ****         vTaskDelay(1000);
 739:main.c        ****         ctr++;
 740:main.c        ****     }
 741:main.c        ****  }   
 742:main.c        **** #endif
 743:main.c        **** 
 744:main.c        **** #if 0
 745:main.c        **** 
 746:main.c        ****     
 747:main.c        **** void zmain(void)
 748:main.c        **** {
 749:main.c        ****     Ultra_Start();
 750:main.c        ****     motor_start(0,0);
 751:main.c        ****     motor_forward(0,0);
 752:main.c        ****     
 753:main.c        ****     vTaskDelay(3000);
 754:main.c        ****     
 755:main.c        ****     while(true){
 756:main.c        ****         int distance = Ultra_GetDistance();
 757:main.c        ****     
 758:main.c        ****         if(distance <= 10 && distance !=0){
 759:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 760:main.c        ****             if(r == 0){
 761:main.c        ****                 motor_turn(50,200,500);
 762:main.c        ****                 vTaskDelay(0);
 763:main.c        ****                 print_mqtt("Zumo006/turn", "left");
 764:main.c        ****                 //motor_forward(0,0);
 765:main.c        ****             }
 766:main.c        ****             else{
 767:main.c        ****                 motor_turn(200,50,500);
 768:main.c        ****                 vTaskDelay(0);
 769:main.c        ****                 print_mqtt("Zumo006/turn", "right");
 770:main.c        ****                 //motor_forward(0,0);
 771:main.c        ****             }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 15


 772:main.c        ****             motor_forward(100,100);
 773:main.c        ****         }
 774:main.c        ****         
 775:main.c        ****     }   
 776:main.c        **** }
 777:main.c        **** #endif
 778:main.c        **** 
 779:main.c        **** #if 0
 780:main.c        **** //IR receiverm - how to wait for IR remote commands
 781:main.c        **** void zmain(void)
 782:main.c        **** {
 783:main.c        ****     RTC_Start(); // start real time clock
 784:main.c        ****     
 785:main.c        ****     RTC_TIME_DATE now;
 786:main.c        **** 
 787:main.c        ****     time_t myTime;
 788:main.c        ****     struct tm * timeinfo;
 789:main.c        ****     time( &myTime );
 790:main.c        ****     timeinfo = localtime( &myTime );
 791:main.c        ****     
 792:main.c        ****     // set current time
 793:main.c        ****     now.Hour = timeinfo->tm_hour;
 794:main.c        ****     now.Min = timeinfo->tm_min;
 795:main.c        ****     now.Sec = timeinfo->tm_sec6;
 796:main.c        ****     now.DayOfMonth = timeinfo->tm_mday;
 797:main.c        ****     now.Month = timeinfo->tm_mon+1;
 798:main.c        ****     now.Year = timeinfo->tm_year+1900;
 799:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 800:main.c        ****     
 801:main.c        ****     uint8_t button_;
 802:main.c        ****     printf("\nStart\n");
 803:main.c        ****     
 804:main.c        ****     while(true){
 805:main.c        ****         button_ = SW1_Read();
 806:main.c        ****         if(button_==0){
 807:main.c        ****             IR_Start();
 808:main.c        ****             printf("\n\nIR test\n");
 809:main.c        ****             struct sensors_ ref;
 810:main.c        ****             struct sensors_ dig;
 811:main.c        ****             bool led = false,loop = true, startline= true;
 812:main.c        ****             int count =0;
 813:main.c        ****             motor_start();              // enable motor controller 
 814:main.c        ****             IR_flush(); // clear IR receive buffer
 815:main.c        ****             printf("Buffer cleared\n");
 816:main.c        ****             
 817:main.c        ****             reflectance_start();
 818:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 819:main.c        ****             vTaskDelay(200);
 820:main.c        ****                 while(startline){
 821:main.c        ****                     // read raw sensor values
 822:main.c        ****                     reflectance_read(&ref);
 823:main.c        ****                     reflectance_digital(&dig); 
 824:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 825:main.c        ****                         motor_turn(50,50,50);       // motor forward
 826:main.c        ****                         Beep(60,80);
 827:main.c        ****                     }
 828:main.c        ****                     else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 16


 829:main.c        ****                         motor_forward(0,0);       // Stop motors
 830:main.c        ****                         startline = false;
 831:main.c        ****                     }
 832:main.c        ****                 }
 833:main.c        ****             IR_wait();  // wait for IR command
 834:main.c        ****             led = !led;
 835:main.c        ****             BatteryLed_Write(led);   
 836:main.c        ****             
 837:main.c        ****             // Toggle led when IR signal is received
 838:main.c        ****             while(loop)
 839:main.c        ****             {   
 840:main.c        ****                 if(led){
 841:main.c        ****                     // read raw sensor values
 842:main.c        ****                     reflectance_read(&ref);
 843:main.c        ****                     reflectance_digital(&dig); 
 844:main.c        ****                     
 845:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 846:main.c        ****                         motor_turn(50,50,50);       // motor forward
 847:main.c        ****                         motor_forward(0,0);       // Stop motors
 848:main.c        ****                         vTaskDelay(50);
 849:main.c        ****                         count++;
 850:main.c        ****                         printf("count %d \n",count);
 851:main.c        ****                         printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 852:main.c        ****                         print_mqtt("Zumo006/lap", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 853:main.c        ****                         /*if(count >= 7){
 854:main.c        ****                             motor_forward(0,0);       // Stop motors
 855:main.c        ****                             loop = false;
 856:main.c        ****                         }*/
 857:main.c        ****                     }
 858:main.c        ****                     else{
 859:main.c        ****                          motor_turn(50,50,50);       // motor forward
 860:main.c        ****                         Beep(100,100);
 861:main.c        ****                     }
 862:main.c        ****                 }
 863:main.c        ****                 else {
 864:main.c        ****                     printf("Led is OFF\n");
 865:main.c        ****                     loop = false;
 866:main.c        ****                 }
 867:main.c        ****                
 868:main.c        ****             }    
 869:main.c        ****         }
 870:main.c        ****     }
 871:main.c        ****  }
 872:main.c        **** #endif
 873:main.c        **** 
 874:main.c        **** #if 0
 875:main.c        **** void zmain(void)
 876:main.c        **** {    
 877:main.c        ****     struct accData_ data;
 878:main.c        ****     struct sensors_ ref;
 879:main.c        ****     struct sensors_ dig;
 880:main.c        ****     
 881:main.c        ****     printf("MQTT and sensor test...\n");
 882:main.c        **** 
 883:main.c        ****     if(!LSM303D_Start()){
 884:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 885:main.c        ****         vTaskSuspend(NULL);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 17


 886:main.c        ****     }
 887:main.c        ****     else {
 888:main.c        ****         printf("Accelerometer Ok...\n");
 889:main.c        ****     }
 890:main.c        ****     
 891:main.c        ****     int ctr = 0;
 892:main.c        ****     reflectance_start();
 893:main.c        ****     while(true)
 894:main.c        ****     {
 895:main.c        ****         LSM303D_Read_Acc(&data);
 896:main.c        ****         // send data when we detect a hit and at 10 second intervals
 897:main.c        ****         if(data.accX > 1500 || ++ctr > 1000) {
 898:main.c        ****             printf("Acc: %8d %8d %8d\n",data.accX, data.accY, data.accZ);
 899:main.c        ****             print_mqtt("Zumo01/acc", "%d,%d,%d", data.accX, data.accY, data.accZ);
 900:main.c        ****             reflectance_read(&ref);
 901:main.c        ****             printf("Ref: %8d %8d %8d %8d %8d %8d\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3
 902:main.c        ****             print_mqtt("Zumo01/ref", "%d,%d,%d,%d,%d,%d", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, r
 903:main.c        ****             reflectance_digital(&dig);
 904:main.c        ****             printf("Dig: %8d %8d %8d %8d %8d %8d\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3
 905:main.c        ****             print_mqtt("Zumo01/dig", "%d,%d,%d,%d,%d,%d", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, d
 906:main.c        ****             ctr = 0;
 907:main.c        ****         }
 908:main.c        ****         vTaskDelay(10);
 909:main.c        ****     }
 910:main.c        ****  }   
 911:main.c        **** 
 912:main.c        **** #endif
 913:main.c        **** 
 914:main.c        **** #if 0
 915:main.c        **** void zmain(void)
 916:main.c        **** {    
 917:main.c        ****     RTC_Start(); // start real time clock
 918:main.c        ****     
 919:main.c        ****     RTC_TIME_DATE now;
 920:main.c        **** 
 921:main.c        ****     // set current time
 922:main.c        ****     now.Hour = 12;
 923:main.c        ****     now.Min = 34;
 924:main.c        ****     now.Sec = 56;
 925:main.c        ****     now.DayOfMonth = 25;
 926:main.c        ****     now.Month = 9;
 927:main.c        ****     now.Year = 2018;
 928:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 929:main.c        **** 
 930:main.c        ****     while(true)
 931:main.c        ****     {
 932:main.c        ****         if(SW1_Read() == 0) {
 933:main.c        ****             // read the current time
 934:main.c        ****             RTC_DisableInt(); // Disable Interrupt of RTC Component
 935:main.c        ****             now = *RTC_ReadTime(); // copy the current time to a local variable
 936:main.c        ****             RTC_EnableInt(); // Enable Interrupt of RTC Component
 937:main.c        **** 
 938:main.c        ****             // print the current time
 939:main.c        ****             printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 940:main.c        ****             print_mqtt("Zumo006/time", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 941:main.c        ****             
 942:main.c        ****             // wait until button is released
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 18


 943:main.c        ****             while(SW1_Read() == 0) vTaskDelay(50);
 944:main.c        ****         }
 945:main.c        ****         vTaskDelay(50);
 946:main.c        ****     }
 947:main.c        ****  }   
 948:main.c        **** #endif
 949:main.c        **** 
 950:main.c        **** #if 1
 951:main.c        **** //main project
 952:main.c        **** void zmain(void)
 953:main.c        **** {
  28              		.loc 1 953 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 8AB0     		sub	sp, sp, #40
  37              		.cfi_def_cfa_offset 48
 954:main.c        ****     struct accData_ data;
 955:main.c        ****     
 956:main.c        ****     uint8_t button_;
 957:main.c        ****     printf("\nStart\n");
  38              		.loc 1 957 0
  39 0004 6148     		ldr	r0, .L18
  40 0006 FFF7FEFF 		bl	puts
  41              	.LVL0:
  42              	.L2:
 958:main.c        ****     
 959:main.c        ****     while(true){
 960:main.c        ****         button_ = SW1_Read();
  43              		.loc 1 960 0
  44 000a FFF7FEFF 		bl	SW1_Read
  45              	.LVL1:
 961:main.c        ****         if(button_==0){
  46              		.loc 1 961 0
  47 000e 0028     		cmp	r0, #0
  48 0010 FBD1     		bne	.L2
  49              	.LBB2:
 962:main.c        ****             IR_Start();
  50              		.loc 1 962 0
  51 0012 FFF7FEFF 		bl	IR_Start
  52              	.LVL2:
 963:main.c        ****             printf("\n\nIR test\n");
  53              		.loc 1 963 0
  54 0016 5E48     		ldr	r0, .L18+4
  55 0018 FFF7FEFF 		bl	puts
  56              	.LVL3:
 964:main.c        ****             struct sensors_ ref;
 965:main.c        ****             struct sensors_ dig;
 966:main.c        ****             bool led = false,loop1 = true, startline= true, loop2 = true;
 967:main.c        ****             int count =0;
 968:main.c        ****             motor_start();              // enable motor controller
  57              		.loc 1 968 0
  58 001c FFF7FEFF 		bl	motor_start
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 19


  59              	.LVL4:
 969:main.c        ****             print_mqtt("Zumo006/ready","line");
  60              		.loc 1 969 0
  61 0020 5C49     		ldr	r1, .L18+8
  62 0022 5D48     		ldr	r0, .L18+12
  63 0024 FFF7FEFF 		bl	print_mqtt
  64              	.LVL5:
 970:main.c        ****             IR_flush(); // clear IR receive buffer
  65              		.loc 1 970 0
  66 0028 FFF7FEFF 		bl	IR_flush
  67              	.LVL6:
 971:main.c        ****             printf("Buffer cleared\n");
  68              		.loc 1 971 0
  69 002c 5B48     		ldr	r0, .L18+16
  70 002e FFF7FEFF 		bl	puts
  71              	.LVL7:
 972:main.c        ****             
 973:main.c        ****             reflectance_start();
  72              		.loc 1 973 0
  73 0032 FFF7FEFF 		bl	reflectance_start
  74              	.LVL8:
 974:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
  75              		.loc 1 974 0
  76 0036 42F22830 		movw	r0, #9000
  77 003a 0190     		str	r0, [sp, #4]
  78 003c 0090     		str	r0, [sp]
  79 003e 42F6F823 		movw	r3, #11000
  80 0042 1A46     		mov	r2, r3
  81 0044 0146     		mov	r1, r0
  82 0046 FFF7FEFF 		bl	reflectance_set_threshold
  83              	.LVL9:
 975:main.c        ****             vTaskDelay(200);
  84              		.loc 1 975 0
  85 004a C820     		movs	r0, #200
  86 004c FFF7FEFF 		bl	vTaskDelay
  87              	.LVL10:
 966:main.c        ****             int count =0;
  88              		.loc 1 966 0
  89 0050 0124     		movs	r4, #1
 976:main.c        ****                 while(startline){
  90              		.loc 1 976 0
  91 0052 26E0     		b	.L3
  92              	.LVL11:
  93              	.L6:
 977:main.c        ****                     // read raw sensor values
 978:main.c        ****                     reflectance_read(&ref);
  94              		.loc 1 978 0
  95 0054 02A8     		add	r0, sp, #8
  96 0056 FFF7FEFF 		bl	reflectance_read
  97              	.LVL12:
 979:main.c        ****                     reflectance_digital(&dig); 
  98              		.loc 1 979 0
  99 005a 05A8     		add	r0, sp, #20
 100 005c FFF7FEFF 		bl	reflectance_digital
 101              	.LVL13:
 980:main.c        ****                     
 981:main.c        ****                     if(dig.l3 == 0 && dig.r3 == 0 && dig.l1 == 0 && dig.r1 == 0 && dig.l2==0 && dig
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 20


 102              		.loc 1 981 0
 103 0060 BDF81430 		ldrh	r3, [sp, #20]
 104 0064 A3B9     		cbnz	r3, .L4
 105              		.loc 1 981 0 is_stmt 0 discriminator 1
 106 0066 BDF81E30 		ldrh	r3, [sp, #30]
 107 006a 8BB9     		cbnz	r3, .L4
 108              		.loc 1 981 0 discriminator 2
 109 006c BDF81830 		ldrh	r3, [sp, #24]
 110 0070 73B9     		cbnz	r3, .L4
 111              		.loc 1 981 0 discriminator 3
 112 0072 BDF81A30 		ldrh	r3, [sp, #26]
 113 0076 5BB9     		cbnz	r3, .L4
 114              		.loc 1 981 0 discriminator 4
 115 0078 BDF81630 		ldrh	r3, [sp, #22]
 116 007c 43B9     		cbnz	r3, .L4
 117              		.loc 1 981 0 discriminator 5
 118 007e BDF81C30 		ldrh	r3, [sp, #28]
 119 0082 2BB9     		cbnz	r3, .L4
 982:main.c        ****                         motor_forward(0,0);       // Stop motors
 120              		.loc 1 982 0 is_stmt 1
 121 0084 0021     		movs	r1, #0
 122 0086 0846     		mov	r0, r1
 123 0088 FFF7FEFF 		bl	motor_forward
 124              	.LVL14:
 983:main.c        ****                         startline = false;
 125              		.loc 1 983 0
 126 008c 0024     		movs	r4, #0
 127 008e 08E0     		b	.L3
 128              	.LVL15:
 129              	.L4:
 984:main.c        ****                     }
 985:main.c        ****                     else{
 986:main.c        ****                         motor_turn(50,50,50);       // motor forward
 130              		.loc 1 986 0
 131 0090 3222     		movs	r2, #50
 132 0092 1146     		mov	r1, r2
 133 0094 1046     		mov	r0, r2
 134 0096 FFF7FEFF 		bl	motor_turn
 135              	.LVL16:
 987:main.c        ****                         Beep(60,80);
 136              		.loc 1 987 0
 137 009a 5021     		movs	r1, #80
 138 009c 3C20     		movs	r0, #60
 139 009e FFF7FEFF 		bl	Beep
 140              	.LVL17:
 141              	.L3:
 976:main.c        ****                     // read raw sensor values
 142              		.loc 1 976 0
 143 00a2 002C     		cmp	r4, #0
 144 00a4 D6D1     		bne	.L6
 988:main.c        ****                     }
 989:main.c        ****                 }
 990:main.c        ****             print_mqtt("Zumo006/ready","line");
 145              		.loc 1 990 0
 146 00a6 3B49     		ldr	r1, .L18+8
 147 00a8 3B48     		ldr	r0, .L18+12
 148 00aa FFF7FEFF 		bl	print_mqtt
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 21


 149              	.LVL18:
 991:main.c        ****             IR_wait();  // wait for IR command
 150              		.loc 1 991 0
 151 00ae FFF7FEFF 		bl	IR_wait
 152              	.LVL19:
 992:main.c        ****             //CySysTickEnable();
 993:main.c        ****             //CySysTickStart();
 994:main.c        ****             //int start = CySysTickGetValue();
 995:main.c        ****             //print_mqtt("Zumo006/start","%d", start);
 996:main.c        ****             led = !led;
 997:main.c        ****             BatteryLed_Write(led);   
 153              		.loc 1 997 0
 154 00b2 0120     		movs	r0, #1
 155 00b4 FFF7FEFF 		bl	BatteryLed_Write
 156              	.LVL20:
 157 00b8 5EE0     		b	.L7
 158              	.LVL21:
 159              	.L12:
 160              	.LBB3:
 998:main.c        ****             
 999:main.c        ****             // Toggle led when IR signal is received
1000:main.c        ****             while(loop1)
1001:main.c        ****             {   
1002:main.c        ****                 if(led){
1003:main.c        ****                     while(loop2){
1004:main.c        ****                     // read raw sensor values
1005:main.c        ****                     reflectance_read(&ref);
1006:main.c        ****                     reflectance_digital(&dig); 
1007:main.c        **** 
1008:main.c        ****                     LSM303D_Read_Acc(&data);
1009:main.c        ****                     while(dig.l2 != 1 || dig.r2 != 1){
1010:main.c        ****                         //motor_turn(50,50,0);
1011:main.c        ****                         if(data.accX<-4000){
 161              		.loc 1 1011 0
 162 00ba BDF92030 		ldrsh	r3, [sp, #32]
 163 00be 13F57A6F 		cmn	r3, #4000
 164 00c2 25DA     		bge	.L8
 165              	.LBB4:
1012:main.c        ****                             //print_mqtt("Zumo006/hit","%d", CySysTickGetValue());
1013:main.c        ****                             int r = rand() % 2;      // Returns a pseudo-random integer between 0 a
 166              		.loc 1 1013 0
 167 00c4 FFF7FEFF 		bl	rand
 168              	.LVL22:
 169 00c8 354C     		ldr	r4, .L18+20
 170 00ca 0440     		ands	r4, r0, r4
 171 00cc 03D5     		bpl	.L9
 172 00ce 013C     		subs	r4, r4, #1
 173 00d0 64F00104 		orn	r4, r4, #1
 174 00d4 0134     		adds	r4, r4, #1
 175              	.L9:
 176              	.LVL23:
1014:main.c        ****                             int r1 = rand() % 500;
 177              		.loc 1 1014 0
 178 00d6 FFF7FEFF 		bl	rand
 179              	.LVL24:
 180 00da 324A     		ldr	r2, .L18+24
 181 00dc 82FB0032 		smull	r3, r2, r2, r0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 22


 182 00e0 C317     		asrs	r3, r0, #31
 183 00e2 C3EB6212 		rsb	r2, r3, r2, asr #5
 184 00e6 4FF4FA73 		mov	r3, #500
 185 00ea 03FB1202 		mls	r2, r3, r2, r0
 186              	.LVL25:
1015:main.c        ****                             if(r == 0){
 187              		.loc 1 1015 0
 188 00ee 3CB9     		cbnz	r4, .L10
1016:main.c        ****                                 //motor_backward(80,50);
1017:main.c        ****                                 motor_turn(200,50,r1);
 189              		.loc 1 1017 0
 190 00f0 3221     		movs	r1, #50
 191 00f2 C820     		movs	r0, #200
 192 00f4 FFF7FEFF 		bl	motor_turn
 193              	.LVL26:
1018:main.c        ****                                 vTaskDelay(0);
 194              		.loc 1 1018 0
 195 00f8 0020     		movs	r0, #0
 196 00fa FFF7FEFF 		bl	vTaskDelay
 197              	.LVL27:
 198 00fe 0CE0     		b	.L16
 199              	.LVL28:
 200              	.L10:
1019:main.c        ****                             }
1020:main.c        ****                             else{
1021:main.c        ****                                 motor_turn(50,200,r1);
 201              		.loc 1 1021 0
 202 0100 C821     		movs	r1, #200
 203 0102 3220     		movs	r0, #50
 204 0104 FFF7FEFF 		bl	motor_turn
 205              	.LVL29:
1022:main.c        ****                                 vTaskDelay(0);
 206              		.loc 1 1022 0
 207 0108 0020     		movs	r0, #0
 208 010a FFF7FEFF 		bl	vTaskDelay
 209              	.LVL30:
 210 010e 04E0     		b	.L16
 211              	.LVL31:
 212              	.L8:
 213              	.LBE4:
1023:main.c        ****                             }
1024:main.c        ****                         }
1025:main.c        ****                         else{
1026:main.c        ****                             motor_turn(50,50,0);
 214              		.loc 1 1026 0
 215 0110 0022     		movs	r2, #0
 216 0112 3221     		movs	r1, #50
 217 0114 0846     		mov	r0, r1
 218 0116 FFF7FEFF 		bl	motor_turn
 219              	.LVL32:
 220              	.L16:
1009:main.c        ****                         //motor_turn(50,50,0);
 221              		.loc 1 1009 0
 222 011a BDF81630 		ldrh	r3, [sp, #22]
 223 011e 012B     		cmp	r3, #1
 224 0120 CBD1     		bne	.L12
1009:main.c        ****                         //motor_turn(50,50,0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 23


 225              		.loc 1 1009 0 is_stmt 0 discriminator 1
 226 0122 BDF81C30 		ldrh	r3, [sp, #28]
 227 0126 012B     		cmp	r3, #1
 228 0128 C7D1     		bne	.L12
1027:main.c        ****                         }
1028:main.c        ****                         
1029:main.c        ****                     }
1030:main.c        ****                     int r2 = rand() % 1000;
 229              		.loc 1 1030 0 is_stmt 1
 230 012a FFF7FEFF 		bl	rand
 231              	.LVL33:
 232 012e 1D4C     		ldr	r4, .L18+24
 233 0130 84FB0034 		smull	r3, r4, r4, r0
 234 0134 C317     		asrs	r3, r0, #31
 235 0136 C3EBA414 		rsb	r4, r3, r4, asr #6
 236 013a 4FF47A73 		mov	r3, #1000
 237 013e 03FB1404 		mls	r4, r3, r4, r0
 238              	.LVL34:
1031:main.c        ****                     int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_
 239              		.loc 1 1031 0
 240 0142 FFF7FEFF 		bl	rand
 241              	.LVL35:
 242 0146 164B     		ldr	r3, .L18+20
 243 0148 1840     		ands	r0, r0, r3
 244 014a 03D5     		bpl	.L13
 245 014c 0138     		subs	r0, r0, #1
 246 014e 60F00100 		orn	r0, r0, #1
 247 0152 0130     		adds	r0, r0, #1
 248              	.L13:
 249              	.LVL36:
1032:main.c        ****                     if(r==0) {
 250              		.loc 1 1032 0
 251 0154 40B9     		cbnz	r0, .L14
1033:main.c        ****                         motor_turn(50,200,r2);
 252              		.loc 1 1033 0
 253 0156 2246     		mov	r2, r4
 254 0158 C821     		movs	r1, #200
 255 015a 3220     		movs	r0, #50
 256              	.LVL37:
 257 015c FFF7FEFF 		bl	motor_turn
 258              	.LVL38:
1034:main.c        ****                         vTaskDelay(0);
 259              		.loc 1 1034 0
 260 0160 0020     		movs	r0, #0
 261 0162 FFF7FEFF 		bl	vTaskDelay
 262              	.LVL39:
 263 0166 07E0     		b	.L7
 264              	.LVL40:
 265              	.L14:
1035:main.c        ****                     }
1036:main.c        ****                     else {
1037:main.c        ****                         motor_turn(50,200,r2);
 266              		.loc 1 1037 0
 267 0168 2246     		mov	r2, r4
 268 016a C821     		movs	r1, #200
 269 016c 3220     		movs	r0, #50
 270              	.LVL41:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 24


 271 016e FFF7FEFF 		bl	motor_turn
 272              	.LVL42:
1038:main.c        ****                         vTaskDelay(0);
 273              		.loc 1 1038 0
 274 0172 0020     		movs	r0, #0
 275 0174 FFF7FEFF 		bl	vTaskDelay
 276              	.LVL43:
 277              	.L7:
1005:main.c        ****                     reflectance_digital(&dig); 
 278              		.loc 1 1005 0
 279 0178 02A8     		add	r0, sp, #8
 280 017a FFF7FEFF 		bl	reflectance_read
 281              	.LVL44:
1006:main.c        **** 
 282              		.loc 1 1006 0
 283 017e 05A8     		add	r0, sp, #20
 284 0180 FFF7FEFF 		bl	reflectance_digital
 285              	.LVL45:
1008:main.c        ****                     while(dig.l2 != 1 || dig.r2 != 1){
 286              		.loc 1 1008 0
 287 0184 08A8     		add	r0, sp, #32
 288 0186 FFF7FEFF 		bl	LSM303D_Read_Acc
 289              	.LVL46:
1009:main.c        ****                         //motor_turn(50,50,0);
 290              		.loc 1 1009 0
 291 018a C6E7     		b	.L16
 292              	.L19:
 293              		.align	2
 294              	.L18:
 295 018c 00000000 		.word	.LC0
 296 0190 08000000 		.word	.LC1
 297 0194 14000000 		.word	.LC2
 298 0198 1C000000 		.word	.LC3
 299 019c 2C000000 		.word	.LC4
 300 01a0 01000080 		.word	-2147483647
 301 01a4 D34D6210 		.word	274877907
 302              	.LBE3:
 303              	.LBE2:
 304              		.cfi_endproc
 305              	.LFE85:
 306              		.size	zmain, .-zmain
 307              		.section	.rodata.str1.4,"aMS",%progbits,1
 308              		.align	2
 309              	.LC0:
 310 0000 0A537461 		.ascii	"\012Start\000"
 310      727400
 311 0007 00       		.space	1
 312              	.LC1:
 313 0008 0A0A4952 		.ascii	"\012\012IR test\000"
 313      20746573 
 313      7400
 314 0012 0000     		.space	2
 315              	.LC2:
 316 0014 6C696E65 		.ascii	"line\000"
 316      00
 317 0019 000000   		.space	3
 318              	.LC3:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 25


 319 001c 5A756D6F 		.ascii	"Zumo006/ready\000"
 319      3030362F 
 319      72656164 
 319      7900
 320 002a 0000     		.space	2
 321              	.LC4:
 322 002c 42756666 		.ascii	"Buffer cleared\000"
 322      65722063 
 322      6C656172 
 322      656400
 323              		.text
 324              	.Letext0:
 325              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 326              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 327              		.file 4 ".\\ZumoLibrary/Reflectance.h"
 328              		.file 5 ".\\ZumoLibrary/LSM303D.h"
 329              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 330              		.file 7 ".\\ZumoLibrary/Motor.h"
 331              		.file 8 "..\\FreeRTOS\\Source\\include/task.h"
 332              		.file 9 ".\\ZumoLibrary/IR.h"
 333              		.file 10 ".\\ZumoLibrary/mqtt_sender.h"
 334              		.file 11 ".\\ZumoLibrary/Beep.h"
 335              		.file 12 "Generated_Source\\PSoC5/BatteryLed.h"
 336              		.file 13 "Generated_Source\\PSoC5/SW1.h"
 337              		.file 14 "Generated_Source\\PSoC5/core_cm3.h"
 338              		.file 15 "<built-in>"
 339              		.section	.debug_info,"",%progbits
 340              	.Ldebug_info0:
 341 0000 0E060000 		.4byte	0x60e
 342 0004 0400     		.2byte	0x4
 343 0006 00000000 		.4byte	.Ldebug_abbrev0
 344 000a 04       		.byte	0x4
 345 000b 01       		.uleb128 0x1
 346 000c 9C020000 		.4byte	.LASF51
 347 0010 0C       		.byte	0xc
 348 0011 30020000 		.4byte	.LASF52
 349 0015 41000000 		.4byte	.LASF53
 350 0019 00000000 		.4byte	.Ldebug_ranges0+0
 351 001d 00000000 		.4byte	0
 352 0021 00000000 		.4byte	.Ldebug_line0
 353 0025 02       		.uleb128 0x2
 354 0026 01       		.byte	0x1
 355 0027 06       		.byte	0x6
 356 0028 72010000 		.4byte	.LASF0
 357 002c 03       		.uleb128 0x3
 358 002d 12010000 		.4byte	.LASF2
 359 0031 02       		.byte	0x2
 360 0032 1D       		.byte	0x1d
 361 0033 37000000 		.4byte	0x37
 362 0037 02       		.uleb128 0x2
 363 0038 01       		.byte	0x1
 364 0039 08       		.byte	0x8
 365 003a 4A010000 		.4byte	.LASF1
 366 003e 03       		.uleb128 0x3
 367 003f 85020000 		.4byte	.LASF3
 368 0043 02       		.byte	0x2
 369 0044 29       		.byte	0x29
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 26


 370 0045 49000000 		.4byte	0x49
 371 0049 02       		.uleb128 0x2
 372 004a 02       		.byte	0x2
 373 004b 05       		.byte	0x5
 374 004c 14000000 		.4byte	.LASF4
 375 0050 03       		.uleb128 0x3
 376 0051 36000000 		.4byte	.LASF5
 377 0055 02       		.byte	0x2
 378 0056 2B       		.byte	0x2b
 379 0057 5B000000 		.4byte	0x5b
 380 005b 02       		.uleb128 0x2
 381 005c 02       		.byte	0x2
 382 005d 07       		.byte	0x7
 383 005e DB010000 		.4byte	.LASF6
 384 0062 03       		.uleb128 0x3
 385 0063 6A020000 		.4byte	.LASF7
 386 0067 02       		.byte	0x2
 387 0068 3F       		.byte	0x3f
 388 0069 6D000000 		.4byte	0x6d
 389 006d 02       		.uleb128 0x2
 390 006e 04       		.byte	0x4
 391 006f 05       		.byte	0x5
 392 0070 00010000 		.4byte	.LASF8
 393 0074 02       		.uleb128 0x2
 394 0075 04       		.byte	0x4
 395 0076 07       		.byte	0x7
 396 0077 37020000 		.4byte	.LASF9
 397 007b 02       		.uleb128 0x2
 398 007c 08       		.byte	0x8
 399 007d 05       		.byte	0x5
 400 007e DE000000 		.4byte	.LASF10
 401 0082 02       		.uleb128 0x2
 402 0083 08       		.byte	0x8
 403 0084 07       		.byte	0x7
 404 0085 7E010000 		.4byte	.LASF11
 405 0089 04       		.uleb128 0x4
 406 008a 04       		.byte	0x4
 407 008b 05       		.byte	0x5
 408 008c 696E7400 		.ascii	"int\000"
 409 0090 02       		.uleb128 0x2
 410 0091 04       		.byte	0x4
 411 0092 07       		.byte	0x7
 412 0093 A9010000 		.4byte	.LASF12
 413 0097 03       		.uleb128 0x3
 414 0098 98000000 		.4byte	.LASF13
 415 009c 03       		.byte	0x3
 416 009d 18       		.byte	0x18
 417 009e 2C000000 		.4byte	0x2c
 418 00a2 03       		.uleb128 0x3
 419 00a3 09020000 		.4byte	.LASF14
 420 00a7 03       		.byte	0x3
 421 00a8 20       		.byte	0x20
 422 00a9 3E000000 		.4byte	0x3e
 423 00ad 03       		.uleb128 0x3
 424 00ae B6010000 		.4byte	.LASF15
 425 00b2 03       		.byte	0x3
 426 00b3 24       		.byte	0x24
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 27


 427 00b4 50000000 		.4byte	0x50
 428 00b8 03       		.uleb128 0x3
 429 00b9 01020000 		.4byte	.LASF16
 430 00bd 03       		.byte	0x3
 431 00be 2C       		.byte	0x2c
 432 00bf 62000000 		.4byte	0x62
 433 00c3 02       		.uleb128 0x2
 434 00c4 04       		.byte	0x4
 435 00c5 04       		.byte	0x4
 436 00c6 D8000000 		.4byte	.LASF17
 437 00ca 02       		.uleb128 0x2
 438 00cb 08       		.byte	0x8
 439 00cc 04       		.byte	0x4
 440 00cd 49020000 		.4byte	.LASF18
 441 00d1 02       		.uleb128 0x2
 442 00d2 01       		.byte	0x1
 443 00d3 08       		.byte	0x8
 444 00d4 FC010000 		.4byte	.LASF19
 445 00d8 02       		.uleb128 0x2
 446 00d9 08       		.byte	0x8
 447 00da 04       		.byte	0x4
 448 00db 25010000 		.4byte	.LASF20
 449 00df 02       		.uleb128 0x2
 450 00e0 04       		.byte	0x4
 451 00e1 07       		.byte	0x7
 452 00e2 1E000000 		.4byte	.LASF21
 453 00e6 05       		.uleb128 0x5
 454 00e7 8F000000 		.4byte	.LASF22
 455 00eb 0C       		.byte	0xc
 456 00ec 04       		.byte	0x4
 457 00ed 0E       		.byte	0xe
 458 00ee 35010000 		.4byte	0x135
 459 00f2 06       		.uleb128 0x6
 460 00f3 6C3300   		.ascii	"l3\000"
 461 00f6 04       		.byte	0x4
 462 00f7 0F       		.byte	0xf
 463 00f8 AD000000 		.4byte	0xad
 464 00fc 00       		.byte	0
 465 00fd 06       		.uleb128 0x6
 466 00fe 6C3200   		.ascii	"l2\000"
 467 0101 04       		.byte	0x4
 468 0102 10       		.byte	0x10
 469 0103 AD000000 		.4byte	0xad
 470 0107 02       		.byte	0x2
 471 0108 06       		.uleb128 0x6
 472 0109 6C3100   		.ascii	"l1\000"
 473 010c 04       		.byte	0x4
 474 010d 11       		.byte	0x11
 475 010e AD000000 		.4byte	0xad
 476 0112 04       		.byte	0x4
 477 0113 06       		.uleb128 0x6
 478 0114 723100   		.ascii	"r1\000"
 479 0117 04       		.byte	0x4
 480 0118 12       		.byte	0x12
 481 0119 AD000000 		.4byte	0xad
 482 011d 06       		.byte	0x6
 483 011e 06       		.uleb128 0x6
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 28


 484 011f 723200   		.ascii	"r2\000"
 485 0122 04       		.byte	0x4
 486 0123 13       		.byte	0x13
 487 0124 AD000000 		.4byte	0xad
 488 0128 08       		.byte	0x8
 489 0129 06       		.uleb128 0x6
 490 012a 723300   		.ascii	"r3\000"
 491 012d 04       		.byte	0x4
 492 012e 14       		.byte	0x14
 493 012f AD000000 		.4byte	0xad
 494 0133 0A       		.byte	0xa
 495 0134 00       		.byte	0
 496 0135 05       		.uleb128 0x5
 497 0136 09010000 		.4byte	.LASF23
 498 013a 06       		.byte	0x6
 499 013b 05       		.byte	0x5
 500 013c 47       		.byte	0x47
 501 013d 66010000 		.4byte	0x166
 502 0141 07       		.uleb128 0x7
 503 0142 27000000 		.4byte	.LASF24
 504 0146 05       		.byte	0x5
 505 0147 49       		.byte	0x49
 506 0148 A2000000 		.4byte	0xa2
 507 014c 00       		.byte	0
 508 014d 07       		.uleb128 0x7
 509 014e 2C000000 		.4byte	.LASF25
 510 0152 05       		.byte	0x5
 511 0153 4A       		.byte	0x4a
 512 0154 A2000000 		.4byte	0xa2
 513 0158 02       		.byte	0x2
 514 0159 07       		.uleb128 0x7
 515 015a 31000000 		.4byte	.LASF26
 516 015e 05       		.byte	0x5
 517 015f 4B       		.byte	0x4b
 518 0160 A2000000 		.4byte	0xa2
 519 0164 04       		.byte	0x4
 520 0165 00       		.byte	0
 521 0166 08       		.uleb128 0x8
 522 0167 64020000 		.4byte	.LASF54
 523 016b 01       		.byte	0x1
 524 016c B803     		.2byte	0x3b8
 525 016e 00000000 		.4byte	.LFB85
 526 0172 A8010000 		.4byte	.LFE85-.LFB85
 527 0176 01       		.uleb128 0x1
 528 0177 9C       		.byte	0x9c
 529 0178 2E050000 		.4byte	0x52e
 530 017c 09       		.uleb128 0x9
 531 017d 22020000 		.4byte	.LASF27
 532 0181 01       		.byte	0x1
 533 0182 BA03     		.2byte	0x3ba
 534 0184 35010000 		.4byte	0x135
 535 0188 02       		.uleb128 0x2
 536 0189 91       		.byte	0x91
 537 018a 70       		.sleb128 -16
 538 018b 0A       		.uleb128 0xa
 539 018c 5C020000 		.4byte	.LASF28
 540 0190 01       		.byte	0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 29


 541 0191 BC03     		.2byte	0x3bc
 542 0193 97000000 		.4byte	0x97
 543 0197 00000000 		.4byte	.LLST0
 544 019b 0B       		.uleb128 0xb
 545 019c 12000000 		.4byte	.LBB2
 546 01a0 96010000 		.4byte	.LBE2-.LBB2
 547 01a4 0D050000 		.4byte	0x50d
 548 01a8 0C       		.uleb128 0xc
 549 01a9 72656600 		.ascii	"ref\000"
 550 01ad 01       		.byte	0x1
 551 01ae C403     		.2byte	0x3c4
 552 01b0 E6000000 		.4byte	0xe6
 553 01b4 02       		.uleb128 0x2
 554 01b5 91       		.byte	0x91
 555 01b6 58       		.sleb128 -40
 556 01b7 0C       		.uleb128 0xc
 557 01b8 64696700 		.ascii	"dig\000"
 558 01bc 01       		.byte	0x1
 559 01bd C503     		.2byte	0x3c5
 560 01bf E6000000 		.4byte	0xe6
 561 01c3 02       		.uleb128 0x2
 562 01c4 91       		.byte	0x91
 563 01c5 64       		.sleb128 -28
 564 01c6 0D       		.uleb128 0xd
 565 01c7 6C656400 		.ascii	"led\000"
 566 01cb 01       		.byte	0x1
 567 01cc C603     		.2byte	0x3c6
 568 01ce 2E050000 		.4byte	0x52e
 569 01d2 13000000 		.4byte	.LLST1
 570 01d6 0E       		.uleb128 0xe
 571 01d7 A0000000 		.4byte	.LASF29
 572 01db 01       		.byte	0x1
 573 01dc C603     		.2byte	0x3c6
 574 01de 2E050000 		.4byte	0x52e
 575 01e2 01       		.byte	0x1
 576 01e3 0A       		.uleb128 0xa
 577 01e4 A6000000 		.4byte	.LASF30
 578 01e8 01       		.byte	0x1
 579 01e9 C603     		.2byte	0x3c6
 580 01eb 2E050000 		.4byte	0x52e
 581 01ef 33000000 		.4byte	.LLST2
 582 01f3 0E       		.uleb128 0xe
 583 01f4 BF010000 		.4byte	.LASF31
 584 01f8 01       		.byte	0x1
 585 01f9 C603     		.2byte	0x3c6
 586 01fb 2E050000 		.4byte	0x52e
 587 01ff 01       		.byte	0x1
 588 0200 0E       		.uleb128 0xe
 589 0201 BB000000 		.4byte	.LASF32
 590 0205 01       		.byte	0x1
 591 0206 C703     		.2byte	0x3c7
 592 0208 89000000 		.4byte	0x89
 593 020c 00       		.byte	0
 594 020d 0B       		.uleb128 0xb
 595 020e BA000000 		.4byte	.LBB3
 596 0212 EE000000 		.4byte	.LBE3-.LBB3
 597 0216 9A030000 		.4byte	0x39a
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 30


 598 021a 0D       		.uleb128 0xd
 599 021b 723200   		.ascii	"r2\000"
 600 021e 01       		.byte	0x1
 601 021f 0604     		.2byte	0x406
 602 0221 89000000 		.4byte	0x89
 603 0225 69000000 		.4byte	.LLST3
 604 0229 0D       		.uleb128 0xd
 605 022a 7200     		.ascii	"r\000"
 606 022c 01       		.byte	0x1
 607 022d 0704     		.2byte	0x407
 608 022f 89000000 		.4byte	0x89
 609 0233 7C000000 		.4byte	.LLST4
 610 0237 0B       		.uleb128 0xb
 611 0238 C4000000 		.4byte	.LBB4
 612 023c 4C000000 		.4byte	.LBE4-.LBB4
 613 0240 CA020000 		.4byte	0x2ca
 614 0244 0D       		.uleb128 0xd
 615 0245 7200     		.ascii	"r\000"
 616 0247 01       		.byte	0x1
 617 0248 F503     		.2byte	0x3f5
 618 024a 89000000 		.4byte	0x89
 619 024e 9A000000 		.4byte	.LLST5
 620 0252 0D       		.uleb128 0xd
 621 0253 723100   		.ascii	"r1\000"
 622 0256 01       		.byte	0x1
 623 0257 F603     		.2byte	0x3f6
 624 0259 89000000 		.4byte	0x89
 625 025d AD000000 		.4byte	.LLST6
 626 0261 0F       		.uleb128 0xf
 627 0262 C8000000 		.4byte	.LVL22
 628 0266 46050000 		.4byte	0x546
 629 026a 0F       		.uleb128 0xf
 630 026b DA000000 		.4byte	.LVL24
 631 026f 46050000 		.4byte	0x546
 632 0273 10       		.uleb128 0x10
 633 0274 F8000000 		.4byte	.LVL26
 634 0278 51050000 		.4byte	0x551
 635 027c 8D020000 		.4byte	0x28d
 636 0280 11       		.uleb128 0x11
 637 0281 01       		.uleb128 0x1
 638 0282 50       		.byte	0x50
 639 0283 02       		.uleb128 0x2
 640 0284 09       		.byte	0x9
 641 0285 C8       		.byte	0xc8
 642 0286 11       		.uleb128 0x11
 643 0287 01       		.uleb128 0x1
 644 0288 51       		.byte	0x51
 645 0289 02       		.uleb128 0x2
 646 028a 08       		.byte	0x8
 647 028b 32       		.byte	0x32
 648 028c 00       		.byte	0
 649 028d 10       		.uleb128 0x10
 650 028e FE000000 		.4byte	.LVL27
 651 0292 5C050000 		.4byte	0x55c
 652 0296 A0020000 		.4byte	0x2a0
 653 029a 11       		.uleb128 0x11
 654 029b 01       		.uleb128 0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 31


 655 029c 50       		.byte	0x50
 656 029d 01       		.uleb128 0x1
 657 029e 30       		.byte	0x30
 658 029f 00       		.byte	0
 659 02a0 10       		.uleb128 0x10
 660 02a1 08010000 		.4byte	.LVL29
 661 02a5 51050000 		.4byte	0x551
 662 02a9 BA020000 		.4byte	0x2ba
 663 02ad 11       		.uleb128 0x11
 664 02ae 01       		.uleb128 0x1
 665 02af 50       		.byte	0x50
 666 02b0 02       		.uleb128 0x2
 667 02b1 08       		.byte	0x8
 668 02b2 32       		.byte	0x32
 669 02b3 11       		.uleb128 0x11
 670 02b4 01       		.uleb128 0x1
 671 02b5 51       		.byte	0x51
 672 02b6 02       		.uleb128 0x2
 673 02b7 09       		.byte	0x9
 674 02b8 C8       		.byte	0xc8
 675 02b9 00       		.byte	0
 676 02ba 12       		.uleb128 0x12
 677 02bb 0E010000 		.4byte	.LVL30
 678 02bf 5C050000 		.4byte	0x55c
 679 02c3 11       		.uleb128 0x11
 680 02c4 01       		.uleb128 0x1
 681 02c5 50       		.byte	0x50
 682 02c6 01       		.uleb128 0x1
 683 02c7 30       		.byte	0x30
 684 02c8 00       		.byte	0
 685 02c9 00       		.byte	0
 686 02ca 10       		.uleb128 0x10
 687 02cb 1A010000 		.4byte	.LVL32
 688 02cf 51050000 		.4byte	0x551
 689 02d3 E9020000 		.4byte	0x2e9
 690 02d7 11       		.uleb128 0x11
 691 02d8 01       		.uleb128 0x1
 692 02d9 50       		.byte	0x50
 693 02da 02       		.uleb128 0x2
 694 02db 08       		.byte	0x8
 695 02dc 32       		.byte	0x32
 696 02dd 11       		.uleb128 0x11
 697 02de 01       		.uleb128 0x1
 698 02df 51       		.byte	0x51
 699 02e0 02       		.uleb128 0x2
 700 02e1 08       		.byte	0x8
 701 02e2 32       		.byte	0x32
 702 02e3 11       		.uleb128 0x11
 703 02e4 01       		.uleb128 0x1
 704 02e5 52       		.byte	0x52
 705 02e6 01       		.uleb128 0x1
 706 02e7 30       		.byte	0x30
 707 02e8 00       		.byte	0
 708 02e9 0F       		.uleb128 0xf
 709 02ea 2E010000 		.4byte	.LVL33
 710 02ee 46050000 		.4byte	0x546
 711 02f2 0F       		.uleb128 0xf
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 32


 712 02f3 46010000 		.4byte	.LVL35
 713 02f7 46050000 		.4byte	0x546
 714 02fb 10       		.uleb128 0x10
 715 02fc 60010000 		.4byte	.LVL38
 716 0300 51050000 		.4byte	0x551
 717 0304 1B030000 		.4byte	0x31b
 718 0308 11       		.uleb128 0x11
 719 0309 01       		.uleb128 0x1
 720 030a 50       		.byte	0x50
 721 030b 02       		.uleb128 0x2
 722 030c 08       		.byte	0x8
 723 030d 32       		.byte	0x32
 724 030e 11       		.uleb128 0x11
 725 030f 01       		.uleb128 0x1
 726 0310 51       		.byte	0x51
 727 0311 02       		.uleb128 0x2
 728 0312 09       		.byte	0x9
 729 0313 C8       		.byte	0xc8
 730 0314 11       		.uleb128 0x11
 731 0315 01       		.uleb128 0x1
 732 0316 52       		.byte	0x52
 733 0317 02       		.uleb128 0x2
 734 0318 74       		.byte	0x74
 735 0319 00       		.sleb128 0
 736 031a 00       		.byte	0
 737 031b 10       		.uleb128 0x10
 738 031c 66010000 		.4byte	.LVL39
 739 0320 5C050000 		.4byte	0x55c
 740 0324 2E030000 		.4byte	0x32e
 741 0328 11       		.uleb128 0x11
 742 0329 01       		.uleb128 0x1
 743 032a 50       		.byte	0x50
 744 032b 01       		.uleb128 0x1
 745 032c 30       		.byte	0x30
 746 032d 00       		.byte	0
 747 032e 10       		.uleb128 0x10
 748 032f 72010000 		.4byte	.LVL42
 749 0333 51050000 		.4byte	0x551
 750 0337 4E030000 		.4byte	0x34e
 751 033b 11       		.uleb128 0x11
 752 033c 01       		.uleb128 0x1
 753 033d 50       		.byte	0x50
 754 033e 02       		.uleb128 0x2
 755 033f 08       		.byte	0x8
 756 0340 32       		.byte	0x32
 757 0341 11       		.uleb128 0x11
 758 0342 01       		.uleb128 0x1
 759 0343 51       		.byte	0x51
 760 0344 02       		.uleb128 0x2
 761 0345 09       		.byte	0x9
 762 0346 C8       		.byte	0xc8
 763 0347 11       		.uleb128 0x11
 764 0348 01       		.uleb128 0x1
 765 0349 52       		.byte	0x52
 766 034a 02       		.uleb128 0x2
 767 034b 74       		.byte	0x74
 768 034c 00       		.sleb128 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 33


 769 034d 00       		.byte	0
 770 034e 10       		.uleb128 0x10
 771 034f 78010000 		.4byte	.LVL43
 772 0353 5C050000 		.4byte	0x55c
 773 0357 61030000 		.4byte	0x361
 774 035b 11       		.uleb128 0x11
 775 035c 01       		.uleb128 0x1
 776 035d 50       		.byte	0x50
 777 035e 01       		.uleb128 0x1
 778 035f 30       		.byte	0x30
 779 0360 00       		.byte	0
 780 0361 10       		.uleb128 0x10
 781 0362 7E010000 		.4byte	.LVL44
 782 0366 68050000 		.4byte	0x568
 783 036a 75030000 		.4byte	0x375
 784 036e 11       		.uleb128 0x11
 785 036f 01       		.uleb128 0x1
 786 0370 50       		.byte	0x50
 787 0371 02       		.uleb128 0x2
 788 0372 91       		.byte	0x91
 789 0373 58       		.sleb128 -40
 790 0374 00       		.byte	0
 791 0375 10       		.uleb128 0x10
 792 0376 84010000 		.4byte	.LVL45
 793 037a 73050000 		.4byte	0x573
 794 037e 89030000 		.4byte	0x389
 795 0382 11       		.uleb128 0x11
 796 0383 01       		.uleb128 0x1
 797 0384 50       		.byte	0x50
 798 0385 02       		.uleb128 0x2
 799 0386 91       		.byte	0x91
 800 0387 64       		.sleb128 -28
 801 0388 00       		.byte	0
 802 0389 12       		.uleb128 0x12
 803 038a 8A010000 		.4byte	.LVL46
 804 038e 7E050000 		.4byte	0x57e
 805 0392 11       		.uleb128 0x11
 806 0393 01       		.uleb128 0x1
 807 0394 50       		.byte	0x50
 808 0395 02       		.uleb128 0x2
 809 0396 91       		.byte	0x91
 810 0397 70       		.sleb128 -16
 811 0398 00       		.byte	0
 812 0399 00       		.byte	0
 813 039a 0F       		.uleb128 0xf
 814 039b 16000000 		.4byte	.LVL2
 815 039f 89050000 		.4byte	0x589
 816 03a3 10       		.uleb128 0x10
 817 03a4 1C000000 		.4byte	.LVL3
 818 03a8 94050000 		.4byte	0x594
 819 03ac BA030000 		.4byte	0x3ba
 820 03b0 11       		.uleb128 0x11
 821 03b1 01       		.uleb128 0x1
 822 03b2 50       		.byte	0x50
 823 03b3 05       		.uleb128 0x5
 824 03b4 03       		.byte	0x3
 825 03b5 08000000 		.4byte	.LC1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 34


 826 03b9 00       		.byte	0
 827 03ba 0F       		.uleb128 0xf
 828 03bb 20000000 		.4byte	.LVL4
 829 03bf A3050000 		.4byte	0x5a3
 830 03c3 10       		.uleb128 0x10
 831 03c4 28000000 		.4byte	.LVL5
 832 03c8 AE050000 		.4byte	0x5ae
 833 03cc E3030000 		.4byte	0x3e3
 834 03d0 11       		.uleb128 0x11
 835 03d1 01       		.uleb128 0x1
 836 03d2 50       		.byte	0x50
 837 03d3 05       		.uleb128 0x5
 838 03d4 03       		.byte	0x3
 839 03d5 1C000000 		.4byte	.LC3
 840 03d9 11       		.uleb128 0x11
 841 03da 01       		.uleb128 0x1
 842 03db 51       		.byte	0x51
 843 03dc 05       		.uleb128 0x5
 844 03dd 03       		.byte	0x3
 845 03de 14000000 		.4byte	.LC2
 846 03e2 00       		.byte	0
 847 03e3 0F       		.uleb128 0xf
 848 03e4 2C000000 		.4byte	.LVL6
 849 03e8 B9050000 		.4byte	0x5b9
 850 03ec 10       		.uleb128 0x10
 851 03ed 32000000 		.4byte	.LVL7
 852 03f1 94050000 		.4byte	0x594
 853 03f5 03040000 		.4byte	0x403
 854 03f9 11       		.uleb128 0x11
 855 03fa 01       		.uleb128 0x1
 856 03fb 50       		.byte	0x50
 857 03fc 05       		.uleb128 0x5
 858 03fd 03       		.byte	0x3
 859 03fe 2C000000 		.4byte	.LC4
 860 0402 00       		.byte	0
 861 0403 0F       		.uleb128 0xf
 862 0404 36000000 		.4byte	.LVL8
 863 0408 C4050000 		.4byte	0x5c4
 864 040c 10       		.uleb128 0x10
 865 040d 4A000000 		.4byte	.LVL9
 866 0411 CF050000 		.4byte	0x5cf
 867 0415 46040000 		.4byte	0x446
 868 0419 11       		.uleb128 0x11
 869 041a 01       		.uleb128 0x1
 870 041b 50       		.byte	0x50
 871 041c 03       		.uleb128 0x3
 872 041d 0A       		.byte	0xa
 873 041e 2823     		.2byte	0x2328
 874 0420 11       		.uleb128 0x11
 875 0421 01       		.uleb128 0x1
 876 0422 51       		.byte	0x51
 877 0423 03       		.uleb128 0x3
 878 0424 0A       		.byte	0xa
 879 0425 2823     		.2byte	0x2328
 880 0427 11       		.uleb128 0x11
 881 0428 01       		.uleb128 0x1
 882 0429 52       		.byte	0x52
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 35


 883 042a 03       		.uleb128 0x3
 884 042b 0A       		.byte	0xa
 885 042c F82A     		.2byte	0x2af8
 886 042e 11       		.uleb128 0x11
 887 042f 01       		.uleb128 0x1
 888 0430 53       		.byte	0x53
 889 0431 03       		.uleb128 0x3
 890 0432 0A       		.byte	0xa
 891 0433 F82A     		.2byte	0x2af8
 892 0435 11       		.uleb128 0x11
 893 0436 02       		.uleb128 0x2
 894 0437 7D       		.byte	0x7d
 895 0438 00       		.sleb128 0
 896 0439 03       		.uleb128 0x3
 897 043a 0A       		.byte	0xa
 898 043b 2823     		.2byte	0x2328
 899 043d 11       		.uleb128 0x11
 900 043e 02       		.uleb128 0x2
 901 043f 7D       		.byte	0x7d
 902 0440 04       		.sleb128 4
 903 0441 03       		.uleb128 0x3
 904 0442 0A       		.byte	0xa
 905 0443 2823     		.2byte	0x2328
 906 0445 00       		.byte	0
 907 0446 10       		.uleb128 0x10
 908 0447 50000000 		.4byte	.LVL10
 909 044b 5C050000 		.4byte	0x55c
 910 044f 5A040000 		.4byte	0x45a
 911 0453 11       		.uleb128 0x11
 912 0454 01       		.uleb128 0x1
 913 0455 50       		.byte	0x50
 914 0456 02       		.uleb128 0x2
 915 0457 08       		.byte	0x8
 916 0458 C8       		.byte	0xc8
 917 0459 00       		.byte	0
 918 045a 10       		.uleb128 0x10
 919 045b 5A000000 		.4byte	.LVL12
 920 045f 68050000 		.4byte	0x568
 921 0463 6E040000 		.4byte	0x46e
 922 0467 11       		.uleb128 0x11
 923 0468 01       		.uleb128 0x1
 924 0469 50       		.byte	0x50
 925 046a 02       		.uleb128 0x2
 926 046b 91       		.byte	0x91
 927 046c 58       		.sleb128 -40
 928 046d 00       		.byte	0
 929 046e 10       		.uleb128 0x10
 930 046f 60000000 		.4byte	.LVL13
 931 0473 73050000 		.4byte	0x573
 932 0477 82040000 		.4byte	0x482
 933 047b 11       		.uleb128 0x11
 934 047c 01       		.uleb128 0x1
 935 047d 50       		.byte	0x50
 936 047e 02       		.uleb128 0x2
 937 047f 91       		.byte	0x91
 938 0480 64       		.sleb128 -28
 939 0481 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 36


 940 0482 10       		.uleb128 0x10
 941 0483 8C000000 		.4byte	.LVL14
 942 0487 DA050000 		.4byte	0x5da
 943 048b 9A040000 		.4byte	0x49a
 944 048f 11       		.uleb128 0x11
 945 0490 01       		.uleb128 0x1
 946 0491 50       		.byte	0x50
 947 0492 01       		.uleb128 0x1
 948 0493 30       		.byte	0x30
 949 0494 11       		.uleb128 0x11
 950 0495 01       		.uleb128 0x1
 951 0496 51       		.byte	0x51
 952 0497 01       		.uleb128 0x1
 953 0498 30       		.byte	0x30
 954 0499 00       		.byte	0
 955 049a 10       		.uleb128 0x10
 956 049b 9A000000 		.4byte	.LVL16
 957 049f 51050000 		.4byte	0x551
 958 04a3 BA040000 		.4byte	0x4ba
 959 04a7 11       		.uleb128 0x11
 960 04a8 01       		.uleb128 0x1
 961 04a9 50       		.byte	0x50
 962 04aa 02       		.uleb128 0x2
 963 04ab 08       		.byte	0x8
 964 04ac 32       		.byte	0x32
 965 04ad 11       		.uleb128 0x11
 966 04ae 01       		.uleb128 0x1
 967 04af 51       		.byte	0x51
 968 04b0 02       		.uleb128 0x2
 969 04b1 08       		.byte	0x8
 970 04b2 32       		.byte	0x32
 971 04b3 11       		.uleb128 0x11
 972 04b4 01       		.uleb128 0x1
 973 04b5 52       		.byte	0x52
 974 04b6 02       		.uleb128 0x2
 975 04b7 08       		.byte	0x8
 976 04b8 32       		.byte	0x32
 977 04b9 00       		.byte	0
 978 04ba 10       		.uleb128 0x10
 979 04bb A2000000 		.4byte	.LVL17
 980 04bf E5050000 		.4byte	0x5e5
 981 04c3 D4040000 		.4byte	0x4d4
 982 04c7 11       		.uleb128 0x11
 983 04c8 01       		.uleb128 0x1
 984 04c9 50       		.byte	0x50
 985 04ca 02       		.uleb128 0x2
 986 04cb 08       		.byte	0x8
 987 04cc 3C       		.byte	0x3c
 988 04cd 11       		.uleb128 0x11
 989 04ce 01       		.uleb128 0x1
 990 04cf 51       		.byte	0x51
 991 04d0 02       		.uleb128 0x2
 992 04d1 08       		.byte	0x8
 993 04d2 50       		.byte	0x50
 994 04d3 00       		.byte	0
 995 04d4 10       		.uleb128 0x10
 996 04d5 AE000000 		.4byte	.LVL18
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 37


 997 04d9 AE050000 		.4byte	0x5ae
 998 04dd F4040000 		.4byte	0x4f4
 999 04e1 11       		.uleb128 0x11
 1000 04e2 01       		.uleb128 0x1
 1001 04e3 50       		.byte	0x50
 1002 04e4 05       		.uleb128 0x5
 1003 04e5 03       		.byte	0x3
 1004 04e6 1C000000 		.4byte	.LC3
 1005 04ea 11       		.uleb128 0x11
 1006 04eb 01       		.uleb128 0x1
 1007 04ec 51       		.byte	0x51
 1008 04ed 05       		.uleb128 0x5
 1009 04ee 03       		.byte	0x3
 1010 04ef 14000000 		.4byte	.LC2
 1011 04f3 00       		.byte	0
 1012 04f4 0F       		.uleb128 0xf
 1013 04f5 B2000000 		.4byte	.LVL19
 1014 04f9 F0050000 		.4byte	0x5f0
 1015 04fd 12       		.uleb128 0x12
 1016 04fe B8000000 		.4byte	.LVL20
 1017 0502 FB050000 		.4byte	0x5fb
 1018 0506 11       		.uleb128 0x11
 1019 0507 01       		.uleb128 0x1
 1020 0508 50       		.byte	0x50
 1021 0509 01       		.uleb128 0x1
 1022 050a 31       		.byte	0x31
 1023 050b 00       		.byte	0
 1024 050c 00       		.byte	0
 1025 050d 10       		.uleb128 0x10
 1026 050e 0A000000 		.4byte	.LVL0
 1027 0512 94050000 		.4byte	0x594
 1028 0516 24050000 		.4byte	0x524
 1029 051a 11       		.uleb128 0x11
 1030 051b 01       		.uleb128 0x1
 1031 051c 50       		.byte	0x50
 1032 051d 05       		.uleb128 0x5
 1033 051e 03       		.byte	0x3
 1034 051f 00000000 		.4byte	.LC0
 1035 0523 00       		.byte	0
 1036 0524 0F       		.uleb128 0xf
 1037 0525 0E000000 		.4byte	.LVL1
 1038 0529 06060000 		.4byte	0x606
 1039 052d 00       		.byte	0
 1040 052e 02       		.uleb128 0x2
 1041 052f 01       		.byte	0x1
 1042 0530 02       		.byte	0x2
 1043 0531 11020000 		.4byte	.LASF33
 1044 0535 13       		.uleb128 0x13
 1045 0536 8F020000 		.4byte	.LASF55
 1046 053a 0E       		.byte	0xe
 1047 053b 1207     		.2byte	0x712
 1048 053d 41050000 		.4byte	0x541
 1049 0541 14       		.uleb128 0x14
 1050 0542 B8000000 		.4byte	0xb8
 1051 0546 15       		.uleb128 0x15
 1052 0547 C1000000 		.4byte	.LASF34
 1053 054b C1000000 		.4byte	.LASF34
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 38


 1054 054f 06       		.byte	0x6
 1055 0550 88       		.byte	0x88
 1056 0551 15       		.uleb128 0x15
 1057 0552 B0000000 		.4byte	.LASF35
 1058 0556 B0000000 		.4byte	.LASF35
 1059 055a 07       		.byte	0x7
 1060 055b 12       		.byte	0x12
 1061 055c 16       		.uleb128 0x16
 1062 055d 95010000 		.4byte	.LASF36
 1063 0561 95010000 		.4byte	.LASF36
 1064 0565 08       		.byte	0x8
 1065 0566 ED02     		.2byte	0x2ed
 1066 0568 15       		.uleb128 0x15
 1067 0569 74020000 		.4byte	.LASF37
 1068 056d 74020000 		.4byte	.LASF37
 1069 0571 04       		.byte	0x4
 1070 0572 18       		.byte	0x18
 1071 0573 15       		.uleb128 0x15
 1072 0574 EC000000 		.4byte	.LASF38
 1073 0578 EC000000 		.4byte	.LASF38
 1074 057c 04       		.byte	0x4
 1075 057d 19       		.byte	0x19
 1076 057e 15       		.uleb128 0x15
 1077 057f 31010000 		.4byte	.LASF39
 1078 0583 31010000 		.4byte	.LASF39
 1079 0587 05       		.byte	0x5
 1080 0588 51       		.byte	0x51
 1081 0589 15       		.uleb128 0x15
 1082 058a 1C010000 		.4byte	.LASF40
 1083 058e 1C010000 		.4byte	.LASF40
 1084 0592 09       		.byte	0x9
 1085 0593 11       		.byte	0x11
 1086 0594 17       		.uleb128 0x17
 1087 0595 C5010000 		.4byte	.LASF56
 1088 0599 00000000 		.4byte	.LASF57
 1089 059d 0F       		.byte	0xf
 1090 059e 00       		.byte	0
 1091 059f C5010000 		.4byte	.LASF56
 1092 05a3 15       		.uleb128 0x15
 1093 05a4 50020000 		.4byte	.LASF41
 1094 05a8 50020000 		.4byte	.LASF41
 1095 05ac 07       		.byte	0x7
 1096 05ad 0B       		.byte	0xb
 1097 05ae 15       		.uleb128 0x15
 1098 05af 17020000 		.4byte	.LASF42
 1099 05b3 17020000 		.4byte	.LASF42
 1100 05b7 0A       		.byte	0xa
 1101 05b8 07       		.byte	0x7
 1102 05b9 15       		.uleb128 0x15
 1103 05ba A0010000 		.4byte	.LASF43
 1104 05be A0010000 		.4byte	.LASF43
 1105 05c2 09       		.byte	0x9
 1106 05c3 18       		.byte	0x18
 1107 05c4 15       		.uleb128 0x15
 1108 05c5 C6000000 		.4byte	.LASF44
 1109 05c9 C6000000 		.4byte	.LASF44
 1110 05cd 04       		.byte	0x4
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 39


 1111 05ce 17       		.byte	0x17
 1112 05cf 15       		.uleb128 0x15
 1113 05d0 58010000 		.4byte	.LASF45
 1114 05d4 58010000 		.4byte	.LASF45
 1115 05d8 04       		.byte	0x4
 1116 05d9 1A       		.byte	0x1a
 1117 05da 15       		.uleb128 0x15
 1118 05db EE010000 		.4byte	.LASF46
 1119 05df EE010000 		.4byte	.LASF46
 1120 05e3 07       		.byte	0x7
 1121 05e4 0F       		.byte	0xf
 1122 05e5 15       		.uleb128 0x15
 1123 05e6 0F000000 		.4byte	.LASF47
 1124 05ea 0F000000 		.4byte	.LASF47
 1125 05ee 0B       		.byte	0xb
 1126 05ef 05       		.byte	0x5
 1127 05f0 15       		.uleb128 0x15
 1128 05f1 42010000 		.4byte	.LASF48
 1129 05f5 42010000 		.4byte	.LASF48
 1130 05f9 09       		.byte	0x9
 1131 05fa 1B       		.byte	0x1b
 1132 05fb 15       		.uleb128 0x15
 1133 05fc CA010000 		.4byte	.LASF49
 1134 0600 CA010000 		.4byte	.LASF49
 1135 0604 0C       		.byte	0xc
 1136 0605 26       		.byte	0x26
 1137 0606 15       		.uleb128 0x15
 1138 0607 27020000 		.4byte	.LASF50
 1139 060b 27020000 		.4byte	.LASF50
 1140 060f 0D       		.byte	0xd
 1141 0610 29       		.byte	0x29
 1142 0611 00       		.byte	0
 1143              		.section	.debug_abbrev,"",%progbits
 1144              	.Ldebug_abbrev0:
 1145 0000 01       		.uleb128 0x1
 1146 0001 11       		.uleb128 0x11
 1147 0002 01       		.byte	0x1
 1148 0003 25       		.uleb128 0x25
 1149 0004 0E       		.uleb128 0xe
 1150 0005 13       		.uleb128 0x13
 1151 0006 0B       		.uleb128 0xb
 1152 0007 03       		.uleb128 0x3
 1153 0008 0E       		.uleb128 0xe
 1154 0009 1B       		.uleb128 0x1b
 1155 000a 0E       		.uleb128 0xe
 1156 000b 55       		.uleb128 0x55
 1157 000c 17       		.uleb128 0x17
 1158 000d 11       		.uleb128 0x11
 1159 000e 01       		.uleb128 0x1
 1160 000f 10       		.uleb128 0x10
 1161 0010 17       		.uleb128 0x17
 1162 0011 00       		.byte	0
 1163 0012 00       		.byte	0
 1164 0013 02       		.uleb128 0x2
 1165 0014 24       		.uleb128 0x24
 1166 0015 00       		.byte	0
 1167 0016 0B       		.uleb128 0xb
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 40


 1168 0017 0B       		.uleb128 0xb
 1169 0018 3E       		.uleb128 0x3e
 1170 0019 0B       		.uleb128 0xb
 1171 001a 03       		.uleb128 0x3
 1172 001b 0E       		.uleb128 0xe
 1173 001c 00       		.byte	0
 1174 001d 00       		.byte	0
 1175 001e 03       		.uleb128 0x3
 1176 001f 16       		.uleb128 0x16
 1177 0020 00       		.byte	0
 1178 0021 03       		.uleb128 0x3
 1179 0022 0E       		.uleb128 0xe
 1180 0023 3A       		.uleb128 0x3a
 1181 0024 0B       		.uleb128 0xb
 1182 0025 3B       		.uleb128 0x3b
 1183 0026 0B       		.uleb128 0xb
 1184 0027 49       		.uleb128 0x49
 1185 0028 13       		.uleb128 0x13
 1186 0029 00       		.byte	0
 1187 002a 00       		.byte	0
 1188 002b 04       		.uleb128 0x4
 1189 002c 24       		.uleb128 0x24
 1190 002d 00       		.byte	0
 1191 002e 0B       		.uleb128 0xb
 1192 002f 0B       		.uleb128 0xb
 1193 0030 3E       		.uleb128 0x3e
 1194 0031 0B       		.uleb128 0xb
 1195 0032 03       		.uleb128 0x3
 1196 0033 08       		.uleb128 0x8
 1197 0034 00       		.byte	0
 1198 0035 00       		.byte	0
 1199 0036 05       		.uleb128 0x5
 1200 0037 13       		.uleb128 0x13
 1201 0038 01       		.byte	0x1
 1202 0039 03       		.uleb128 0x3
 1203 003a 0E       		.uleb128 0xe
 1204 003b 0B       		.uleb128 0xb
 1205 003c 0B       		.uleb128 0xb
 1206 003d 3A       		.uleb128 0x3a
 1207 003e 0B       		.uleb128 0xb
 1208 003f 3B       		.uleb128 0x3b
 1209 0040 0B       		.uleb128 0xb
 1210 0041 01       		.uleb128 0x1
 1211 0042 13       		.uleb128 0x13
 1212 0043 00       		.byte	0
 1213 0044 00       		.byte	0
 1214 0045 06       		.uleb128 0x6
 1215 0046 0D       		.uleb128 0xd
 1216 0047 00       		.byte	0
 1217 0048 03       		.uleb128 0x3
 1218 0049 08       		.uleb128 0x8
 1219 004a 3A       		.uleb128 0x3a
 1220 004b 0B       		.uleb128 0xb
 1221 004c 3B       		.uleb128 0x3b
 1222 004d 0B       		.uleb128 0xb
 1223 004e 49       		.uleb128 0x49
 1224 004f 13       		.uleb128 0x13
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 41


 1225 0050 38       		.uleb128 0x38
 1226 0051 0B       		.uleb128 0xb
 1227 0052 00       		.byte	0
 1228 0053 00       		.byte	0
 1229 0054 07       		.uleb128 0x7
 1230 0055 0D       		.uleb128 0xd
 1231 0056 00       		.byte	0
 1232 0057 03       		.uleb128 0x3
 1233 0058 0E       		.uleb128 0xe
 1234 0059 3A       		.uleb128 0x3a
 1235 005a 0B       		.uleb128 0xb
 1236 005b 3B       		.uleb128 0x3b
 1237 005c 0B       		.uleb128 0xb
 1238 005d 49       		.uleb128 0x49
 1239 005e 13       		.uleb128 0x13
 1240 005f 38       		.uleb128 0x38
 1241 0060 0B       		.uleb128 0xb
 1242 0061 00       		.byte	0
 1243 0062 00       		.byte	0
 1244 0063 08       		.uleb128 0x8
 1245 0064 2E       		.uleb128 0x2e
 1246 0065 01       		.byte	0x1
 1247 0066 3F       		.uleb128 0x3f
 1248 0067 19       		.uleb128 0x19
 1249 0068 03       		.uleb128 0x3
 1250 0069 0E       		.uleb128 0xe
 1251 006a 3A       		.uleb128 0x3a
 1252 006b 0B       		.uleb128 0xb
 1253 006c 3B       		.uleb128 0x3b
 1254 006d 05       		.uleb128 0x5
 1255 006e 27       		.uleb128 0x27
 1256 006f 19       		.uleb128 0x19
 1257 0070 8701     		.uleb128 0x87
 1258 0072 19       		.uleb128 0x19
 1259 0073 11       		.uleb128 0x11
 1260 0074 01       		.uleb128 0x1
 1261 0075 12       		.uleb128 0x12
 1262 0076 06       		.uleb128 0x6
 1263 0077 40       		.uleb128 0x40
 1264 0078 18       		.uleb128 0x18
 1265 0079 9742     		.uleb128 0x2117
 1266 007b 19       		.uleb128 0x19
 1267 007c 01       		.uleb128 0x1
 1268 007d 13       		.uleb128 0x13
 1269 007e 00       		.byte	0
 1270 007f 00       		.byte	0
 1271 0080 09       		.uleb128 0x9
 1272 0081 34       		.uleb128 0x34
 1273 0082 00       		.byte	0
 1274 0083 03       		.uleb128 0x3
 1275 0084 0E       		.uleb128 0xe
 1276 0085 3A       		.uleb128 0x3a
 1277 0086 0B       		.uleb128 0xb
 1278 0087 3B       		.uleb128 0x3b
 1279 0088 05       		.uleb128 0x5
 1280 0089 49       		.uleb128 0x49
 1281 008a 13       		.uleb128 0x13
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 42


 1282 008b 02       		.uleb128 0x2
 1283 008c 18       		.uleb128 0x18
 1284 008d 00       		.byte	0
 1285 008e 00       		.byte	0
 1286 008f 0A       		.uleb128 0xa
 1287 0090 34       		.uleb128 0x34
 1288 0091 00       		.byte	0
 1289 0092 03       		.uleb128 0x3
 1290 0093 0E       		.uleb128 0xe
 1291 0094 3A       		.uleb128 0x3a
 1292 0095 0B       		.uleb128 0xb
 1293 0096 3B       		.uleb128 0x3b
 1294 0097 05       		.uleb128 0x5
 1295 0098 49       		.uleb128 0x49
 1296 0099 13       		.uleb128 0x13
 1297 009a 02       		.uleb128 0x2
 1298 009b 17       		.uleb128 0x17
 1299 009c 00       		.byte	0
 1300 009d 00       		.byte	0
 1301 009e 0B       		.uleb128 0xb
 1302 009f 0B       		.uleb128 0xb
 1303 00a0 01       		.byte	0x1
 1304 00a1 11       		.uleb128 0x11
 1305 00a2 01       		.uleb128 0x1
 1306 00a3 12       		.uleb128 0x12
 1307 00a4 06       		.uleb128 0x6
 1308 00a5 01       		.uleb128 0x1
 1309 00a6 13       		.uleb128 0x13
 1310 00a7 00       		.byte	0
 1311 00a8 00       		.byte	0
 1312 00a9 0C       		.uleb128 0xc
 1313 00aa 34       		.uleb128 0x34
 1314 00ab 00       		.byte	0
 1315 00ac 03       		.uleb128 0x3
 1316 00ad 08       		.uleb128 0x8
 1317 00ae 3A       		.uleb128 0x3a
 1318 00af 0B       		.uleb128 0xb
 1319 00b0 3B       		.uleb128 0x3b
 1320 00b1 05       		.uleb128 0x5
 1321 00b2 49       		.uleb128 0x49
 1322 00b3 13       		.uleb128 0x13
 1323 00b4 02       		.uleb128 0x2
 1324 00b5 18       		.uleb128 0x18
 1325 00b6 00       		.byte	0
 1326 00b7 00       		.byte	0
 1327 00b8 0D       		.uleb128 0xd
 1328 00b9 34       		.uleb128 0x34
 1329 00ba 00       		.byte	0
 1330 00bb 03       		.uleb128 0x3
 1331 00bc 08       		.uleb128 0x8
 1332 00bd 3A       		.uleb128 0x3a
 1333 00be 0B       		.uleb128 0xb
 1334 00bf 3B       		.uleb128 0x3b
 1335 00c0 05       		.uleb128 0x5
 1336 00c1 49       		.uleb128 0x49
 1337 00c2 13       		.uleb128 0x13
 1338 00c3 02       		.uleb128 0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 43


 1339 00c4 17       		.uleb128 0x17
 1340 00c5 00       		.byte	0
 1341 00c6 00       		.byte	0
 1342 00c7 0E       		.uleb128 0xe
 1343 00c8 34       		.uleb128 0x34
 1344 00c9 00       		.byte	0
 1345 00ca 03       		.uleb128 0x3
 1346 00cb 0E       		.uleb128 0xe
 1347 00cc 3A       		.uleb128 0x3a
 1348 00cd 0B       		.uleb128 0xb
 1349 00ce 3B       		.uleb128 0x3b
 1350 00cf 05       		.uleb128 0x5
 1351 00d0 49       		.uleb128 0x49
 1352 00d1 13       		.uleb128 0x13
 1353 00d2 1C       		.uleb128 0x1c
 1354 00d3 0B       		.uleb128 0xb
 1355 00d4 00       		.byte	0
 1356 00d5 00       		.byte	0
 1357 00d6 0F       		.uleb128 0xf
 1358 00d7 898201   		.uleb128 0x4109
 1359 00da 00       		.byte	0
 1360 00db 11       		.uleb128 0x11
 1361 00dc 01       		.uleb128 0x1
 1362 00dd 31       		.uleb128 0x31
 1363 00de 13       		.uleb128 0x13
 1364 00df 00       		.byte	0
 1365 00e0 00       		.byte	0
 1366 00e1 10       		.uleb128 0x10
 1367 00e2 898201   		.uleb128 0x4109
 1368 00e5 01       		.byte	0x1
 1369 00e6 11       		.uleb128 0x11
 1370 00e7 01       		.uleb128 0x1
 1371 00e8 31       		.uleb128 0x31
 1372 00e9 13       		.uleb128 0x13
 1373 00ea 01       		.uleb128 0x1
 1374 00eb 13       		.uleb128 0x13
 1375 00ec 00       		.byte	0
 1376 00ed 00       		.byte	0
 1377 00ee 11       		.uleb128 0x11
 1378 00ef 8A8201   		.uleb128 0x410a
 1379 00f2 00       		.byte	0
 1380 00f3 02       		.uleb128 0x2
 1381 00f4 18       		.uleb128 0x18
 1382 00f5 9142     		.uleb128 0x2111
 1383 00f7 18       		.uleb128 0x18
 1384 00f8 00       		.byte	0
 1385 00f9 00       		.byte	0
 1386 00fa 12       		.uleb128 0x12
 1387 00fb 898201   		.uleb128 0x4109
 1388 00fe 01       		.byte	0x1
 1389 00ff 11       		.uleb128 0x11
 1390 0100 01       		.uleb128 0x1
 1391 0101 31       		.uleb128 0x31
 1392 0102 13       		.uleb128 0x13
 1393 0103 00       		.byte	0
 1394 0104 00       		.byte	0
 1395 0105 13       		.uleb128 0x13
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 44


 1396 0106 34       		.uleb128 0x34
 1397 0107 00       		.byte	0
 1398 0108 03       		.uleb128 0x3
 1399 0109 0E       		.uleb128 0xe
 1400 010a 3A       		.uleb128 0x3a
 1401 010b 0B       		.uleb128 0xb
 1402 010c 3B       		.uleb128 0x3b
 1403 010d 05       		.uleb128 0x5
 1404 010e 49       		.uleb128 0x49
 1405 010f 13       		.uleb128 0x13
 1406 0110 3F       		.uleb128 0x3f
 1407 0111 19       		.uleb128 0x19
 1408 0112 3C       		.uleb128 0x3c
 1409 0113 19       		.uleb128 0x19
 1410 0114 00       		.byte	0
 1411 0115 00       		.byte	0
 1412 0116 14       		.uleb128 0x14
 1413 0117 35       		.uleb128 0x35
 1414 0118 00       		.byte	0
 1415 0119 49       		.uleb128 0x49
 1416 011a 13       		.uleb128 0x13
 1417 011b 00       		.byte	0
 1418 011c 00       		.byte	0
 1419 011d 15       		.uleb128 0x15
 1420 011e 2E       		.uleb128 0x2e
 1421 011f 00       		.byte	0
 1422 0120 3F       		.uleb128 0x3f
 1423 0121 19       		.uleb128 0x19
 1424 0122 3C       		.uleb128 0x3c
 1425 0123 19       		.uleb128 0x19
 1426 0124 6E       		.uleb128 0x6e
 1427 0125 0E       		.uleb128 0xe
 1428 0126 03       		.uleb128 0x3
 1429 0127 0E       		.uleb128 0xe
 1430 0128 3A       		.uleb128 0x3a
 1431 0129 0B       		.uleb128 0xb
 1432 012a 3B       		.uleb128 0x3b
 1433 012b 0B       		.uleb128 0xb
 1434 012c 00       		.byte	0
 1435 012d 00       		.byte	0
 1436 012e 16       		.uleb128 0x16
 1437 012f 2E       		.uleb128 0x2e
 1438 0130 00       		.byte	0
 1439 0131 3F       		.uleb128 0x3f
 1440 0132 19       		.uleb128 0x19
 1441 0133 3C       		.uleb128 0x3c
 1442 0134 19       		.uleb128 0x19
 1443 0135 6E       		.uleb128 0x6e
 1444 0136 0E       		.uleb128 0xe
 1445 0137 03       		.uleb128 0x3
 1446 0138 0E       		.uleb128 0xe
 1447 0139 3A       		.uleb128 0x3a
 1448 013a 0B       		.uleb128 0xb
 1449 013b 3B       		.uleb128 0x3b
 1450 013c 05       		.uleb128 0x5
 1451 013d 00       		.byte	0
 1452 013e 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 45


 1453 013f 17       		.uleb128 0x17
 1454 0140 2E       		.uleb128 0x2e
 1455 0141 00       		.byte	0
 1456 0142 3F       		.uleb128 0x3f
 1457 0143 19       		.uleb128 0x19
 1458 0144 3C       		.uleb128 0x3c
 1459 0145 19       		.uleb128 0x19
 1460 0146 6E       		.uleb128 0x6e
 1461 0147 0E       		.uleb128 0xe
 1462 0148 03       		.uleb128 0x3
 1463 0149 0E       		.uleb128 0xe
 1464 014a 3A       		.uleb128 0x3a
 1465 014b 0B       		.uleb128 0xb
 1466 014c 3B       		.uleb128 0x3b
 1467 014d 0B       		.uleb128 0xb
 1468 014e 6E       		.uleb128 0x6e
 1469 014f 0E       		.uleb128 0xe
 1470 0150 00       		.byte	0
 1471 0151 00       		.byte	0
 1472 0152 00       		.byte	0
 1473              		.section	.debug_loc,"",%progbits
 1474              	.Ldebug_loc0:
 1475              	.LLST0:
 1476 0000 0E000000 		.4byte	.LVL1
 1477 0004 15000000 		.4byte	.LVL2-1
 1478 0008 0100     		.2byte	0x1
 1479 000a 50       		.byte	0x50
 1480 000b 00000000 		.4byte	0
 1481 000f 00000000 		.4byte	0
 1482              	.LLST1:
 1483 0013 1C000000 		.4byte	.LVL3
 1484 0017 B2000000 		.4byte	.LVL19
 1485 001b 0200     		.2byte	0x2
 1486 001d 30       		.byte	0x30
 1487 001e 9F       		.byte	0x9f
 1488 001f B2000000 		.4byte	.LVL19
 1489 0023 A8010000 		.4byte	.LFE85
 1490 0027 0200     		.2byte	0x2
 1491 0029 31       		.byte	0x31
 1492 002a 9F       		.byte	0x9f
 1493 002b 00000000 		.4byte	0
 1494 002f 00000000 		.4byte	0
 1495              	.LLST2:
 1496 0033 1C000000 		.4byte	.LVL3
 1497 0037 54000000 		.4byte	.LVL11
 1498 003b 0200     		.2byte	0x2
 1499 003d 31       		.byte	0x31
 1500 003e 9F       		.byte	0x9f
 1501 003f 54000000 		.4byte	.LVL11
 1502 0043 8C000000 		.4byte	.LVL14
 1503 0047 0100     		.2byte	0x1
 1504 0049 54       		.byte	0x54
 1505 004a 8C000000 		.4byte	.LVL14
 1506 004e 90000000 		.4byte	.LVL15
 1507 0052 0200     		.2byte	0x2
 1508 0054 30       		.byte	0x30
 1509 0055 9F       		.byte	0x9f
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 46


 1510 0056 90000000 		.4byte	.LVL15
 1511 005a BA000000 		.4byte	.LVL21
 1512 005e 0100     		.2byte	0x1
 1513 0060 54       		.byte	0x54
 1514 0061 00000000 		.4byte	0
 1515 0065 00000000 		.4byte	0
 1516              	.LLST3:
 1517 0069 42010000 		.4byte	.LVL34
 1518 006d 78010000 		.4byte	.LVL43
 1519 0071 0100     		.2byte	0x1
 1520 0073 54       		.byte	0x54
 1521 0074 00000000 		.4byte	0
 1522 0078 00000000 		.4byte	0
 1523              	.LLST4:
 1524 007c 54010000 		.4byte	.LVL36
 1525 0080 5C010000 		.4byte	.LVL37
 1526 0084 0100     		.2byte	0x1
 1527 0086 50       		.byte	0x50
 1528 0087 68010000 		.4byte	.LVL40
 1529 008b 6E010000 		.4byte	.LVL41
 1530 008f 0100     		.2byte	0x1
 1531 0091 50       		.byte	0x50
 1532 0092 00000000 		.4byte	0
 1533 0096 00000000 		.4byte	0
 1534              	.LLST5:
 1535 009a D6000000 		.4byte	.LVL23
 1536 009e 10010000 		.4byte	.LVL31
 1537 00a2 0100     		.2byte	0x1
 1538 00a4 54       		.byte	0x54
 1539 00a5 00000000 		.4byte	0
 1540 00a9 00000000 		.4byte	0
 1541              	.LLST6:
 1542 00ad EE000000 		.4byte	.LVL25
 1543 00b1 F7000000 		.4byte	.LVL26-1
 1544 00b5 0100     		.2byte	0x1
 1545 00b7 52       		.byte	0x52
 1546 00b8 00010000 		.4byte	.LVL28
 1547 00bc 07010000 		.4byte	.LVL29-1
 1548 00c0 0100     		.2byte	0x1
 1549 00c2 52       		.byte	0x52
 1550 00c3 00000000 		.4byte	0
 1551 00c7 00000000 		.4byte	0
 1552              		.section	.debug_aranges,"",%progbits
 1553 0000 1C000000 		.4byte	0x1c
 1554 0004 0200     		.2byte	0x2
 1555 0006 00000000 		.4byte	.Ldebug_info0
 1556 000a 04       		.byte	0x4
 1557 000b 00       		.byte	0
 1558 000c 0000     		.2byte	0
 1559 000e 0000     		.2byte	0
 1560 0010 00000000 		.4byte	.LFB85
 1561 0014 A8010000 		.4byte	.LFE85-.LFB85
 1562 0018 00000000 		.4byte	0
 1563 001c 00000000 		.4byte	0
 1564              		.section	.debug_ranges,"",%progbits
 1565              	.Ldebug_ranges0:
 1566 0000 00000000 		.4byte	.LFB85
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 47


 1567 0004 A8010000 		.4byte	.LFE85
 1568 0008 00000000 		.4byte	0
 1569 000c 00000000 		.4byte	0
 1570              		.section	.debug_line,"",%progbits
 1571              	.Ldebug_line0:
 1572 0000 CF020000 		.section	.debug_str,"MS",%progbits,1
 1572      02005902 
 1572      00000201 
 1572      FB0E0D00 
 1572      01010101 
 1573              	.LASF57:
 1574 0000 5F5F6275 		.ascii	"__builtin_puts\000"
 1574      696C7469 
 1574      6E5F7075 
 1574      747300
 1575              	.LASF47:
 1576 000f 42656570 		.ascii	"Beep\000"
 1576      00
 1577              	.LASF4:
 1578 0014 73686F72 		.ascii	"short int\000"
 1578      7420696E 
 1578      7400
 1579              	.LASF21:
 1580 001e 73697A65 		.ascii	"sizetype\000"
 1580      74797065 
 1580      00
 1581              	.LASF24:
 1582 0027 61636358 		.ascii	"accX\000"
 1582      00
 1583              	.LASF25:
 1584 002c 61636359 		.ascii	"accY\000"
 1584      00
 1585              	.LASF26:
 1586 0031 6163635A 		.ascii	"accZ\000"
 1586      00
 1587              	.LASF5:
 1588 0036 5F5F7569 		.ascii	"__uint16_t\000"
 1588      6E743136 
 1588      5F7400
 1589              	.LASF53:
 1590 0041 433A5C55 		.ascii	"C:\\Users\\ilyap\\Documents\\PSoC Creator\\Zumo_tan"
 1590      73657273 
 1590      5C696C79 
 1590      61705C44 
 1590      6F63756D 
 1591 006f 6B5C5A75 		.ascii	"k\\Zumo_robot\\ZumoBot_Tank.cydsn\000"
 1591      6D6F5F72 
 1591      6F626F74 
 1591      5C5A756D 
 1591      6F426F74 
 1592              	.LASF22:
 1593 008f 73656E73 		.ascii	"sensors_\000"
 1593      6F72735F 
 1593      00
 1594              	.LASF13:
 1595 0098 75696E74 		.ascii	"uint8_t\000"
 1595      385F7400 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 48


 1596              	.LASF29:
 1597 00a0 6C6F6F70 		.ascii	"loop1\000"
 1597      3100
 1598              	.LASF30:
 1599 00a6 73746172 		.ascii	"startline\000"
 1599      746C696E 
 1599      6500
 1600              	.LASF35:
 1601 00b0 6D6F746F 		.ascii	"motor_turn\000"
 1601      725F7475 
 1601      726E00
 1602              	.LASF32:
 1603 00bb 636F756E 		.ascii	"count\000"
 1603      7400
 1604              	.LASF34:
 1605 00c1 72616E64 		.ascii	"rand\000"
 1605      00
 1606              	.LASF44:
 1607 00c6 7265666C 		.ascii	"reflectance_start\000"
 1607      65637461 
 1607      6E63655F 
 1607      73746172 
 1607      7400
 1608              	.LASF17:
 1609 00d8 666C6F61 		.ascii	"float\000"
 1609      7400
 1610              	.LASF10:
 1611 00de 6C6F6E67 		.ascii	"long long int\000"
 1611      206C6F6E 
 1611      6720696E 
 1611      7400
 1612              	.LASF38:
 1613 00ec 7265666C 		.ascii	"reflectance_digital\000"
 1613      65637461 
 1613      6E63655F 
 1613      64696769 
 1613      74616C00 
 1614              	.LASF8:
 1615 0100 6C6F6E67 		.ascii	"long int\000"
 1615      20696E74 
 1615      00
 1616              	.LASF23:
 1617 0109 61636344 		.ascii	"accData_\000"
 1617      6174615F 
 1617      00
 1618              	.LASF2:
 1619 0112 5F5F7569 		.ascii	"__uint8_t\000"
 1619      6E74385F 
 1619      7400
 1620              	.LASF40:
 1621 011c 49525F53 		.ascii	"IR_Start\000"
 1621      74617274 
 1621      00
 1622              	.LASF20:
 1623 0125 6C6F6E67 		.ascii	"long double\000"
 1623      20646F75 
 1623      626C6500 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 49


 1624              	.LASF39:
 1625 0131 4C534D33 		.ascii	"LSM303D_Read_Acc\000"
 1625      3033445F 
 1625      52656164 
 1625      5F416363 
 1625      00
 1626              	.LASF48:
 1627 0142 49525F77 		.ascii	"IR_wait\000"
 1627      61697400 
 1628              	.LASF1:
 1629 014a 756E7369 		.ascii	"unsigned char\000"
 1629      676E6564 
 1629      20636861 
 1629      7200
 1630              	.LASF45:
 1631 0158 7265666C 		.ascii	"reflectance_set_threshold\000"
 1631      65637461 
 1631      6E63655F 
 1631      7365745F 
 1631      74687265 
 1632              	.LASF0:
 1633 0172 7369676E 		.ascii	"signed char\000"
 1633      65642063 
 1633      68617200 
 1634              	.LASF11:
 1635 017e 6C6F6E67 		.ascii	"long long unsigned int\000"
 1635      206C6F6E 
 1635      6720756E 
 1635      7369676E 
 1635      65642069 
 1636              	.LASF36:
 1637 0195 76546173 		.ascii	"vTaskDelay\000"
 1637      6B44656C 
 1637      617900
 1638              	.LASF43:
 1639 01a0 49525F66 		.ascii	"IR_flush\000"
 1639      6C757368 
 1639      00
 1640              	.LASF12:
 1641 01a9 756E7369 		.ascii	"unsigned int\000"
 1641      676E6564 
 1641      20696E74 
 1641      00
 1642              	.LASF15:
 1643 01b6 75696E74 		.ascii	"uint16_t\000"
 1643      31365F74 
 1643      00
 1644              	.LASF31:
 1645 01bf 6C6F6F70 		.ascii	"loop2\000"
 1645      3200
 1646              	.LASF56:
 1647 01c5 70757473 		.ascii	"puts\000"
 1647      00
 1648              	.LASF49:
 1649 01ca 42617474 		.ascii	"BatteryLed_Write\000"
 1649      6572794C 
 1649      65645F57 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 50


 1649      72697465 
 1649      00
 1650              	.LASF6:
 1651 01db 73686F72 		.ascii	"short unsigned int\000"
 1651      7420756E 
 1651      7369676E 
 1651      65642069 
 1651      6E7400
 1652              	.LASF46:
 1653 01ee 6D6F746F 		.ascii	"motor_forward\000"
 1653      725F666F 
 1653      72776172 
 1653      6400
 1654              	.LASF19:
 1655 01fc 63686172 		.ascii	"char\000"
 1655      00
 1656              	.LASF16:
 1657 0201 696E7433 		.ascii	"int32_t\000"
 1657      325F7400 
 1658              	.LASF14:
 1659 0209 696E7431 		.ascii	"int16_t\000"
 1659      365F7400 
 1660              	.LASF33:
 1661 0211 5F426F6F 		.ascii	"_Bool\000"
 1661      6C00
 1662              	.LASF42:
 1663 0217 7072696E 		.ascii	"print_mqtt\000"
 1663      745F6D71 
 1663      747400
 1664              	.LASF27:
 1665 0222 64617461 		.ascii	"data\000"
 1665      00
 1666              	.LASF50:
 1667 0227 5357315F 		.ascii	"SW1_Read\000"
 1667      52656164 
 1667      00
 1668              	.LASF52:
 1669 0230 6D61696E 		.ascii	"main.c\000"
 1669      2E6300
 1670              	.LASF9:
 1671 0237 6C6F6E67 		.ascii	"long unsigned int\000"
 1671      20756E73 
 1671      69676E65 
 1671      6420696E 
 1671      7400
 1672              	.LASF18:
 1673 0249 646F7562 		.ascii	"double\000"
 1673      6C6500
 1674              	.LASF41:
 1675 0250 6D6F746F 		.ascii	"motor_start\000"
 1675      725F7374 
 1675      61727400 
 1676              	.LASF28:
 1677 025c 62757474 		.ascii	"button_\000"
 1677      6F6E5F00 
 1678              	.LASF54:
 1679 0264 7A6D6169 		.ascii	"zmain\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccJ67IyC.s 			page 51


 1679      6E00
 1680              	.LASF7:
 1681 026a 5F5F696E 		.ascii	"__int32_t\000"
 1681      7433325F 
 1681      7400
 1682              	.LASF37:
 1683 0274 7265666C 		.ascii	"reflectance_read\000"
 1683      65637461 
 1683      6E63655F 
 1683      72656164 
 1683      00
 1684              	.LASF3:
 1685 0285 5F5F696E 		.ascii	"__int16_t\000"
 1685      7431365F 
 1685      7400
 1686              	.LASF55:
 1687 028f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1687      52784275 
 1687      66666572 
 1687      00
 1688              	.LASF51:
 1689 029c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1689      43313120 
 1689      352E342E 
 1689      31203230 
 1689      31363036 
 1690 02cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1690      20726576 
 1690      6973696F 
 1690      6E203233 
 1690      37373135 
 1691 0302 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1691      66756E63 
 1691      74696F6E 
 1691      2D736563 
 1691      74696F6E 
 1692              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
