ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.go_forward,"ax",%progbits
  20              		.align	2
  21              		.global	go_forward
  22              		.thumb
  23              		.thumb_func
  24              		.type	go_forward, %function
  25              	go_forward:
  26              	.LFB85:
  27              		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        **** * @mainpage ZumoBot Project
   3:main.c        **** * @brief    You can make your own ZumoBot with various sensors.
   4:main.c        **** * @details  <br><br>
   5:main.c        ****     <p>
   6:main.c        ****     <B>General</B><br>
   7:main.c        ****     You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress
   8:main.c        ****     library has basic methods of various sensors and communications so that you can make what you w
   9:main.c        ****     <br><br>
  10:main.c        ****     </p>
  11:main.c        ****     
  12:main.c        ****     <p>
  13:main.c        ****     <B>Sensors</B><br>
  14:main.c        ****     &nbsp;Included: <br>
  15:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
  16:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
  17:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
  18:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Motors
  19:main.c        ****     &nbsp;Wii nunchuck<br>
  20:main.c        ****     &nbsp;TSOP-2236: IR Receiver<br>
  21:main.c        ****     &nbsp;HC-SR04: Ultrasonic sensor<br>
  22:main.c        ****     &nbsp;APDS-9301: Ambient light sensor<br>
  23:main.c        ****     &nbsp;IR LED <br><br><br>
  24:main.c        ****     </p>
  25:main.c        ****     
  26:main.c        ****     <p>
  27:main.c        ****     <B>Communication</B><br>
  28:main.c        ****     I2C, UART, Serial<br>
  29:main.c        ****     </p>
  30:main.c        **** */
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 2


  31:main.c        **** 
  32:main.c        **** #include <project.h>
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdlib.h>
  35:main.c        **** #include "FreeRTOS.h"
  36:main.c        **** #include "task.h"
  37:main.c        **** #include "Motor.h"
  38:main.c        **** #include "Ultra.h"
  39:main.c        **** #include "Nunchuk.h"
  40:main.c        **** #include "Reflectance.h"
  41:main.c        **** #include "Gyro.h"
  42:main.c        **** #include "Accel_magnet.h"
  43:main.c        **** #include "LSM303D.h"
  44:main.c        **** #include "IR.h"
  45:main.c        **** #include "Beep.h"
  46:main.c        **** #include "mqtt_sender.h"
  47:main.c        **** #include <time.h>
  48:main.c        **** #include <sys/time.h>
  49:main.c        **** #include "serial1.h"
  50:main.c        **** #include <unistd.h>
  51:main.c        **** /**
  52:main.c        ****  * @file    main.c
  53:main.c        ****  * @brief   
  54:main.c        ****  * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp
  55:main.c        **** */
  56:main.c        **** 
  57:main.c        **** #if 0
  58:main.c        **** //template
  59:main.c        **** void zmain(void){
  60:main.c        ****     
  61:main.c        ****     while(true)
  62:main.c        ****     {
  63:main.c        ****         BatteryLed_Write(!SW1_Read());
  64:main.c        ****         vTaskDelay(100);
  65:main.c        ****     }
  66:main.c        **** }
  67:main.c        **** #endif
  68:main.c        **** 
  69:main.c        **** #if 0
  70:main.c        **** // Beep light test
  71:main.c        **** void zmain(void)
  72:main.c        **** {
  73:main.c        ****     while(true)
  74:main.c        ****     {
  75:main.c        ****         if ((SW1_Read() == 0)){
  76:main.c        ****             for(int i = 0; i < 3; i++){
  77:main.c        ****                 BatteryLed_Write(1);
  78:main.c        ****                 Beep(750, 30);
  79:main.c        ****                 vTaskDelay(500);
  80:main.c        ****                 BatteryLed_Write(0);
  81:main.c        ****                 vTaskDelay(500);
  82:main.c        ****             }
  83:main.c        ****             for(int i = 0; i<3; i++){
  84:main.c        ****                 BatteryLed_Write(1);
  85:main.c        ****                 Beep(750, 30);
  86:main.c        ****                 vTaskDelay(1000);
  87:main.c        ****                 BatteryLed_Write(0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 3


  88:main.c        ****                 vTaskDelay(500);
  89:main.c        ****             }
  90:main.c        ****             for(int i = 0; i < 3; i++){
  91:main.c        ****                 BatteryLed_Write(1);
  92:main.c        ****                 Beep(750, 30);
  93:main.c        ****                 vTaskDelay(500);
  94:main.c        ****                 BatteryLed_Write(0);
  95:main.c        ****                 vTaskDelay(500);
  96:main.c        ****             }
  97:main.c        ****         }
  98:main.c        ****     }
  99:main.c        ****     
 100:main.c        ****     
 101:main.c        ****  }   
 102:main.c        **** #endif
 103:main.c        **** 
 104:main.c        **** #if 0
 105:main.c        **** // Name and age
 106:main.c        **** void zmain(void)
 107:main.c        **** {
 108:main.c        ****     TickType_t start;
 109:main.c        ****     TickType_t end;
 110:main.c        ****     char name[32];
 111:main.c        ****     int age;
 112:main.c        ****     
 113:main.c        ****     
 114:main.c        ****     printf("\n\n");
 115:main.c        ****     
 116:main.c        ****     printf("Enter your name: ");
 117:main.c        ****     //fflush(stdout);
 118:main.c        ****     start = xTaskGetTickCount();
 119:main.c        ****     scanf("%s", name);
 120:main.c        ****     printf("Enter your age: ");
 121:main.c        ****     //fflush(stdout);
 122:main.c        ****     scanf("%d", &age);
 123:main.c        ****     end = xTaskGetTickCount();
 124:main.c        ****     int time_long = end - start;
 125:main.c        ****     //printf("You are [%s], age = %d\n", name, age);
 126:main.c        ****     if (age <= 21){
 127:main.c        ****         if(time_long < 3000){
 128:main.c        ****             printf("\nSuper fast dude!");
 129:main.c        ****         }
 130:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 131:main.c        ****             printf("\nSo mediocre.");
 132:main.c        ****         }
 133:main.c        ****         else{
 134:main.c        ****             printf("\nMy granny is faster than you!");
 135:main.c        ****         }
 136:main.c        ****     }
 137:main.c        ****     else if((age >= 22)&&(age<=50)){
 138:main.c        ****         if(time_long < 3000){
 139:main.c        ****             printf("\nBe quick or be dead");
 140:main.c        ****         }
 141:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 142:main.c        ****             printf("\nYou're so average.");
 143:main.c        ****         }
 144:main.c        ****         else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 4


 145:main.c        ****             printf("\nHave you been smoking something illegal?");
 146:main.c        ****         }
 147:main.c        ****     }
 148:main.c        ****     else{
 149:main.c        ****         if(time_long <= 3000){
 150:main.c        ****             printf("\nStill going strong");
 151:main.c        ****         }
 152:main.c        ****         else if((time_long >= 4000)&&(time_long <=5000)){
 153:main.c        ****             printf("\nYou are doing ok for your age.");
 154:main.c        ****         }
 155:main.c        ****         else{
 156:main.c        ****             printf("\nDo they still allow you to drive?");
 157:main.c        ****         }
 158:main.c        ****     }
 159:main.c        ****     while(true)
 160:main.c        ****     {
 161:main.c        ****         BatteryLed_Write(!SW1_Read());
 162:main.c        ****         vTaskDelay(100);
 163:main.c        ****     }
 164:main.c        ****  }   
 165:main.c        **** #endif
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** #if 0
 169:main.c        **** //battery level//
 170:main.c        **** void zmain(void)
 171:main.c        **** {
 172:main.c        **** 	ADC_Battery_Start();   	 
 173:main.c        **** 
 174:main.c        **** 	int16 adcresult =0;
 175:main.c        **** 	float volts = 0.0;
 176:main.c        **** 
 177:main.c        **** 	printf("\nBoot\n");
 178:main.c        **** 
 179:main.c        **** 	//BatteryLed_Write(1); // Switch led on
 180:main.c        **** 	//BatteryLed_Write(0); // Switch led off
 181:main.c        **** 	//uint8 button;
 182:main.c        **** 	//button = SW1_Read(); // read SW1 on pSoC board
 183:main.c        **** 	// SW1_Read() returns zero when button is pressed
 184:main.c        **** 	// SW1_Read() returns one when button is not pressed
 185:main.c        **** 
 186:main.c        **** 	while(true)
 187:main.c        **** 	{
 188:main.c        ****     	char msg[80];
 189:main.c        ****     	ADC_Battery_StartConvert(); // start sampling
 190:main.c        ****     	if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for ADC converted val
 191:main.c        ****         	adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
 192:main.c        ****         	volts=(adcresult*5/4095)*(30/20);
 193:main.c        ****         	// convert value to Volts
 194:main.c        ****         	// you need to implement the conversion
 195:main.c        ****        	 
 196:main.c        ****         	// Print both ADC results and converted value
 197:main.c        ****         	printf("%d %f\r\n",adcresult, volts);
 198:main.c        ****        	 
 199:main.c        ****     	if (volts<4){
 200:main.c        ****         	while(SW1_Read()){
 201:main.c        ****             	BatteryLed_Write(1);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 5


 202:main.c        ****             	vTaskDelay(500);
 203:main.c        ****             	BatteryLed_Write(0);
 204:main.c        ****             	vTaskDelay(500);
 205:main.c        ****         	}
 206:main.c        ****     	}
 207:main.c        ****     	}
 208:main.c        ****     	vTaskDelay(500);
 209:main.c        **** 	}
 210:main.c        ****  }  
 211:main.c        **** 
 212:main.c        ****    
 213:main.c        **** #endif
 214:main.c        **** 
 215:main.c        **** #if 0
 216:main.c        **** // button
 217:main.c        **** void zmain(void)
 218:main.c        **** {
 219:main.c        ****     while(true) {
 220:main.c        ****         printf("Press button within 5 seconds!\n");
 221:main.c        ****         int i = 50;
 222:main.c        ****         while(i > 0) {
 223:main.c        ****             if(SW1_Read() == 0) {
 224:main.c        ****                 break;
 225:main.c        ****             }
 226:main.c        ****             vTaskDelay(100);
 227:main.c        ****             --i;
 228:main.c        ****         }
 229:main.c        ****         if(i > 0) {
 230:main.c        ****             printf("Good work\n");
 231:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait until button is released
 232:main.c        ****         }
 233:main.c        ****         else {
 234:main.c        ****             printf("You didn't press the button\n");
 235:main.c        ****         }
 236:main.c        ****     }
 237:main.c        **** }
 238:main.c        **** #endif
 239:main.c        **** 
 240:main.c        **** #if 0
 241:main.c        **** // button
 242:main.c        **** void zmain(void)
 243:main.c        **** {
 244:main.c        ****     printf("\nBoot\n");
 245:main.c        **** 
 246:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 247:main.c        ****     BatteryLed_Write(0); // Switch led off 
 248:main.c        ****     
 249:main.c        ****     //uint8 button;
 250:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 251:main.c        ****     // SW1_Read() returns zero when button is pressed
 252:main.c        ****     // SW1_Read() returns one when button is not pressed
 253:main.c        ****     
 254:main.c        ****     bool led = false;
 255:main.c        ****     
 256:main.c        ****     while(true)
 257:main.c        ****     {
 258:main.c        ****         // toggle led state when button is pressed
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 6


 259:main.c        ****         if(SW1_Read() == 0) {
 260:main.c        ****             led = !led;
 261:main.c        ****             BatteryLed_Write(led);
 262:main.c        ****             if(led) printf("Led is ON\n");
 263:main.c        ****             else printf("Led is OFF\n");
 264:main.c        ****             Beep(1000, 150);
 265:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait while button is being pressed
 266:main.c        ****         }        
 267:main.c        ****     }
 268:main.c        ****  }   
 269:main.c        **** #endif
 270:main.c        **** 
 271:main.c        **** #if 0
 272:main.c        ****     void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);
 273:main.c        ****     
 274:main.c        **** void zmain(void)
 275:main.c        **** {
 276:main.c        ****     Ultra_Start();
 277:main.c        ****     motor_start(0,0);
 278:main.c        ****     motor_forward(0,0);
 279:main.c        ****     
 280:main.c        ****     vTaskDelay(3000);
 281:main.c        ****     
 282:main.c        ****     while(true){
 283:main.c        ****     int distance = Ultra_GetDistance();
 284:main.c        ****     
 285:main.c        ****     if(distance <= 10 && distance !=0){
 286:main.c        ****         motor_backward(50,500);
 287:main.c        ****         Beep(150, 200);
 288:main.c        ****         motor_turn(150,150, 500);
 289:main.c        ****         motor_forward(0,0);
 290:main.c        ****      }
 291:main.c        ****     motor_turn(200,100,50);
 292:main.c        ****     }   
 293:main.c        **** }
 294:main.c        **** #endif
 295:main.c        **** 
 296:main.c        **** #if 0
 297:main.c        **** //ultrasonic sensor//
 298:main.c        **** void zmain(void)
 299:main.c        **** {
 300:main.c        ****     Ultra_Start();                          // Ultra Sonic Start function
 301:main.c        ****     
 302:main.c        ****     while(true) {
 303:main.c        ****         int d = Ultra_GetDistance();
 304:main.c        ****         // Print the detected distance (centimeters)
 305:main.c        ****         printf("distance = %d\r\n", d);
 306:main.c        ****         vTaskDelay(200);
 307:main.c        ****     }
 308:main.c        **** }   
 309:main.c        **** #endif
 310:main.c        **** 
 311:main.c        **** #if 0
 312:main.c        **** //IR receiverm - how to wait for IR remote commands
 313:main.c        **** void zmain(void)
 314:main.c        **** {
 315:main.c        ****     uint8_t button_;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 7


 316:main.c        ****     printf("\nStart\n");
 317:main.c        ****     
 318:main.c        ****     while(true){
 319:main.c        ****         button_ = SW1_Read();
 320:main.c        ****         if(button_==0){
 321:main.c        ****             IR_Start();
 322:main.c        ****             printf("\n\nIR test\n");
 323:main.c        ****             struct sensors_ ref;
 324:main.c        ****             struct sensors_ dig;
 325:main.c        ****             bool led = false,loop = true, startline= true;
 326:main.c        ****             int count =0;
 327:main.c        ****             motor_start();              // enable motor controller 
 328:main.c        ****             IR_flush(); // clear IR receive buffer
 329:main.c        ****             printf("Buffer cleared\n");
 330:main.c        ****             
 331:main.c        ****             reflectance_start();
 332:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 333:main.c        ****             vTaskDelay(200);
 334:main.c        ****                 while(startline){
 335:main.c        ****                     // read raw sensor values
 336:main.c        ****                     reflectance_read(&ref);
 337:main.c        ****                     reflectance_digital(&dig); 
 338:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 339:main.c        ****                         motor_turn(50,50,50);       // motor forward
 340:main.c        ****                         Beep(60,80);
 341:main.c        ****                     }
 342:main.c        ****                     else{
 343:main.c        ****                         motor_forward(0,0);       // Stop motors
 344:main.c        ****                         startline = false;
 345:main.c        ****                     }
 346:main.c        ****                 }
 347:main.c        ****             IR_wait();  // wait for IR command
 348:main.c        ****             led = !led;
 349:main.c        ****             BatteryLed_Write(led);   
 350:main.c        ****             
 351:main.c        ****             // Toggle led when IR signal is received
 352:main.c        ****             while(loop)
 353:main.c        ****             {   
 354:main.c        ****                 if(led){
 355:main.c        ****                     // read raw sensor values
 356:main.c        ****                     reflectance_read(&ref);
 357:main.c        ****                     reflectance_digital(&dig); 
 358:main.c        ****                     
 359:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 360:main.c        ****                         motor_turn(50,50,50);       // motor forward
 361:main.c        ****                         vTaskDelay(50);
 362:main.c        ****                         count++;
 363:main.c        ****                         printf("count %d \n",count);
 364:main.c        ****                         if(count >= 7){
 365:main.c        ****                             motor_forward(0,0);       // Stop motors
 366:main.c        ****                             loop = false;
 367:main.c        ****                         }
 368:main.c        ****                     }
 369:main.c        ****                     else{
 370:main.c        ****                          motor_turn(50,50,50);       // motor forward
 371:main.c        ****                         Beep(100,100);
 372:main.c        ****                     }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 8


 373:main.c        ****                 }
 374:main.c        ****                 else {
 375:main.c        ****                     printf("Led is OFF\n");
 376:main.c        ****                     loop = false;
 377:main.c        ****                 }
 378:main.c        ****                
 379:main.c        ****             }    
 380:main.c        ****         }
 381:main.c        ****     }
 382:main.c        ****  }   
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        **** 
 386:main.c        **** #if 0
 387:main.c        **** //IR receiverm - how to wait for IR remote commands
 388:main.c        **** void zmain(void)
 389:main.c        **** {
 390:main.c        ****     uint8_t button_;
 391:main.c        ****     printf("\nStart\n");
 392:main.c        ****     
 393:main.c        ****     while(true){
 394:main.c        ****         button_ = SW1_Read();
 395:main.c        ****         if(button_==0){
 396:main.c        ****             IR_Start();
 397:main.c        ****             printf("\n\nIR test\n");
 398:main.c        ****             struct sensors_ ref;
 399:main.c        ****             struct sensors_ dig;
 400:main.c        ****             bool led = false,loop = true, startline= true/*, crossline= true*/;
 401:main.c        ****             int count =0;
 402:main.c        ****             motor_start();              // enable motor controller 
 403:main.c        ****             IR_flush(); // clear IR receive buffer
 404:main.c        ****             printf("Buffer cleared\n");
 405:main.c        ****             
 406:main.c        ****             reflectance_start();
 407:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 408:main.c        ****             vTaskDelay(200);
 409:main.c        ****                 while(startline){
 410:main.c        ****                     // read raw sensor values
 411:main.c        ****                     reflectance_read(&ref);
 412:main.c        ****                     reflectance_digital(&dig); 
 413:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 414:main.c        ****                         motor_turn(50,50,0);       // motor forward
 415:main.c        ****                         //Beep(60,80);
 416:main.c        ****                     }
 417:main.c        ****                     else{
 418:main.c        ****                         motor_forward(0,0);       // Stop motors
 419:main.c        ****                         startline = false;
 420:main.c        ****                     }
 421:main.c        ****                 }
 422:main.c        ****             IR_wait();  // wait for IR command
 423:main.c        ****             led = !led;
 424:main.c        ****             BatteryLed_Write(led);   
 425:main.c        ****             
 426:main.c        ****             // Toggle led when IR signal is received
 427:main.c        ****             while(loop)
 428:main.c        ****             {   
 429:main.c        ****                 if(led){
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 9


 430:main.c        ****                     //do {
 431:main.c        ****                         // read raw sensor values
 432:main.c        ****                     //reflectance_read(&ref);
 433:main.c        ****                     reflectance_digital(&dig); 
 434:main.c        ****                     
 435:main.c        ****                    
 436:main.c        ****                         /*if(dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r3 == 1 && dig.r2 == 
 437:main.c        ****                             motor_forward(0,0);
 438:main.c        ****                             count++;
 439:main.c        ****                             if(count==1){
 440:main.c        ****                                 motor_turn(50,50,50);       // motor forward
 441:main.c        ****                             }
 442:main.c        ****                             if (count==2){
 443:main.c        ****                                 motor_turn_left(10,100,500);
 444:main.c        ****                             }
 445:main.c        ****                             if (count<=4){
 446:main.c        ****                                 motor_turn_right(100,10,500);
 447:main.c        ****                             }
 448:main.c        ****                             if (count==5){
 449:main.c        ****                                 motor_forward(0,0);       // Stop motors
 450:main.c        ****                                 led = false;
 451:main.c        ****                                 BatteryLed_Write(led);
 452:main.c        ****                             }
 453:main.c        ****                         } */
 454:main.c        ****                         if(dig.r2 == 1 && dig.r1 == 1){
 455:main.c        ****                             //count++;
 456:main.c        ****                             motor_turn(100,10,0);       // motor turn left
 457:main.c        ****                             //Beep(20,20);
 458:main.c        ****                             vTaskDelay(0);
 459:main.c        ****                             
 460:main.c        ****                             printf("count %d \n",count);
 461:main.c        ****                         }
 462:main.c        ****                         if(dig.l2 == 1 && dig.l1 == 1){
 463:main.c        ****                             //count++;
 464:main.c        ****                             motor_turn(10,100,0);       // motor turn right
 465:main.c        ****                            // Beep(20,20);
 466:main.c        ****                             vTaskDelay(0);
 467:main.c        ****                             
 468:main.c        ****                             printf("count %d \n",count);
 469:main.c        ****                         }
 470:main.c        ****                        // printf("count %d \n",count);
 471:main.c        ****                         if (dig.l1 == 1 && dig.r1 == 1){
 472:main.c        ****                             
 473:main.c        ****                             motor_turn(50,50,0);       // motor forward
 474:main.c        ****                             vTaskDelay(0);
 475:main.c        ****                             //Beep(50,50);
 476:main.c        ****                             //count++;
 477:main.c        ****                             printf("count %d \n",count);
 478:main.c        ****                         }
 479:main.c        ****                    
 480:main.c        ****                 }
 481:main.c        ****                 else {
 482:main.c        ****                     printf("Led is OFF\n");
 483:main.c        ****                     loop = false;
 484:main.c        ****                 }
 485:main.c        ****                
 486:main.c        ****             }    
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 10


 487:main.c        ****         }
 488:main.c        ****     }
 489:main.c        ****  }  
 490:main.c        **** #endif
 491:main.c        **** 
 492:main.c        **** #if 0
 493:main.c        **** //IR receiverm - how to wait for IR remote commands
 494:main.c        **** void zmain(void)
 495:main.c        **** {
 496:main.c        ****     //IR receiverm - how to wait for IR remote commands
 497:main.c        **** void zmain(void);
 498:main.c        **** 
 499:main.c        ****     uint8_t button_;
 500:main.c        ****     printf("\nStart\n");
 501:main.c        **** 
 502:main.c        ****     while(true){
 503:main.c        ****         button_ = SW1_Read();
 504:main.c        ****         if(button_==0){
 505:main.c        ****             IR_Start();
 506:main.c        ****             printf("\n\nIR test\n");
 507:main.c        ****             struct sensors_ ref;
 508:main.c        ****             struct sensors_ dig;
 509:main.c        ****             bool led = false,loop = true, startline= true;
 510:main.c        ****             int count =0;
 511:main.c        ****             motor_start();              // enable motor controller 
 512:main.c        ****             IR_flush(); // clear IR receive buffer
 513:main.c        ****             printf("Buffer cleared\n");
 514:main.c        **** 
 515:main.c        ****             reflectance_start();
 516:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 517:main.c        ****             vTaskDelay(200);
 518:main.c        ****                 while(startline){
 519:main.c        ****                     // read raw sensor values
 520:main.c        ****                     reflectance_read(&ref);
 521:main.c        ****                     reflectance_digital(&dig); 
 522:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 523:main.c        ****                         motor_turn(50,50,50);       // motor forward
 524:main.c        ****                         Beep(60,80);
 525:main.c        ****                     }
 526:main.c        **** 
 527:main.c        ****                     else{
 528:main.c        ****                         motor_forward(0,0);       // Stop motors
 529:main.c        ****                         startline = false;
 530:main.c        ****                     }
 531:main.c        ****                 }
 532:main.c        ****             IR_wait();  // wait for IR command
 533:main.c        ****             led = !led;
 534:main.c        ****             BatteryLed_Write(led);   
 535:main.c        **** 
 536:main.c        ****             // Toggle led when IR signal is received
 537:main.c        ****             while(loop)
 538:main.c        ****             {   
 539:main.c        ****                 if(led){
 540:main.c        ****                     // read raw sensor values
 541:main.c        ****                     reflectance_read(&ref);
 542:main.c        ****                     reflectance_digital(&dig); 
 543:main.c        **** 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 11


 544:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1){
 545:main.c        ****                         count++;
 546:main.c        ****                         printf("\nStart\n");
 547:main.c        ****                         printf("count %d \n",count);
 548:main.c        **** 
 549:main.c        **** 
 550:main.c        ****                         while (dig.r3 == 1 && dig.l3 == 1){
 551:main.c        ****                          motor_turn(50,49,0);
 552:main.c        ****                         reflectance_digital(&dig);
 553:main.c        ****                         }
 554:main.c        ****                         if(count >= 2){
 555:main.c        ****                             motor_forward(210,0);       // Stop motors
 556:main.c        ****                         }
 557:main.c        ****                     }
 558:main.c        **** 
 559:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 1){
 560:main.c        ****                         motor_turn(210,210,0);   //goes forward lul
 561:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 562:main.c        ****                     }
 563:main.c        ****                     else if (dig.l1 == 0 && dig.r1 == 1){
 564:main.c        ****                         motor_turn(210,0,0);  //turns right lul
 565:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 566:main.c        ****                     }
 567:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 0){
 568:main.c        ****                         motor_turn(0,210,0);   ///should turn left, right lul??   
 569:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 570:main.c        ****                     }
 571:main.c        ****                     else if (dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.l2 == 
 572:main.c        ****                         motor_turn(0,0,100000);   ///should stop, right lul??   
 573:main.c        **** 
 574:main.c        **** 
 575:main.c        ****                         }
 576:main.c        ****                     }
 577:main.c        ****                 }
 578:main.c        **** 
 579:main.c        **** 
 580:main.c        ****             }    
 581:main.c        ****         }
 582:main.c        **** 
 583:main.c        **** }   
 584:main.c        **** #endif
 585:main.c        **** 
 586:main.c        **** 
 587:main.c        **** #if 0
 588:main.c        **** //reflectance
 589:main.c        **** void zmain(void)
 590:main.c        **** {
 591:main.c        ****     struct sensors_ ref;
 592:main.c        ****     struct sensors_ dig;
 593:main.c        **** 
 594:main.c        ****     reflectance_start();
 595:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 596:main.c        ****     
 597:main.c        **** 
 598:main.c        ****     while(true)
 599:main.c        ****     {
 600:main.c        ****         // read raw sensor values
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 12


 601:main.c        ****         reflectance_read(&ref);
 602:main.c        ****         // print out each period of reflectance sensors
 603:main.c        ****         printf("%5d %5d %5d %5d %5d %5d\r\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3);     
 604:main.c        ****         
 605:main.c        ****         // read digital values that are based on threshold. 0 = white, 1 = black
 606:main.c        ****         // when blackness value is over threshold the sensors reads 1, otherwise 0
 607:main.c        ****         reflectance_digital(&dig); 
 608:main.c        ****         //print out 0 or 1 according to results of reflectance period
 609:main.c        ****         printf("%5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3);    
 610:main.c        ****         
 611:main.c        ****         vTaskDelay(200);
 612:main.c        ****     }
 613:main.c        **** }   
 614:main.c        **** #endif
 615:main.c        **** 
 616:main.c        **** 
 617:main.c        **** #if 0
 618:main.c        **** //motor
 619:main.c        **** void zmain(void)
 620:main.c        **** {
 621:main.c        ****     struct sensors_ ref;
 622:main.c        ****     struct sensors_ dig;
 623:main.c        **** 
 624:main.c        ****     reflectance_start();
 625:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 626:main.c        ****     
 627:main.c        ****     reflectance_digital(&dig);
 628:main.c        ****     
 629:main.c        ****     motor_start();              // enable motor controller
 630:main.c        ****     motor_forward(0,0);         // set speed to zero to stop motors
 631:main.c        **** 
 632:main.c        ****     vTaskDelay(3000);
 633:main.c        ****     
 634:main.c        ****     if(dig.l3, dig.l2, dig.l1){
 635:main.c        ****         
 636:main.c        ****     }
 637:main.c        ****     motor_forward(100,2000);     // moving forward
 638:main.c        ****     motor_turn(200,50,2000);     // turn
 639:main.c        ****     motor_turn(50,200,2000);     // turn
 640:main.c        ****     motor_backward(100,2000);    // moving backward
 641:main.c        ****      
 642:main.c        ****     motor_forward(0,0);         // stop motors
 643:main.c        **** 
 644:main.c        ****     motor_stop();               // disable motor controller
 645:main.c        ****     
 646:main.c        ****     while(true)
 647:main.c        ****     {
 648:main.c        ****         vTaskDelay(100);
 649:main.c        ****     }
 650:main.c        **** }
 651:main.c        **** #endif
 652:main.c        **** 
 653:main.c        **** #if 0
 654:main.c        **** /* Example of how to use te Accelerometer!!!*/
 655:main.c        **** void zmain(void)
 656:main.c        **** {
 657:main.c        ****     struct accData_ data;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 13


 658:main.c        ****     
 659:main.c        ****     printf("Accelerometer test...\n");
 660:main.c        **** 
 661:main.c        ****     if(!LSM303D_Start()){
 662:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 663:main.c        ****         vTaskSuspend(NULL);
 664:main.c        ****     }
 665:main.c        ****     else {
 666:main.c        ****         printf("Device Ok...\n");
 667:main.c        ****     }
 668:main.c        ****     motor_start();              // enable motor controller
 669:main.c        ****     motor_forward(0,0);
 670:main.c        ****     srand(time(NULL));   // Initialization, should only be called once.
 671:main.c        ****     int r=0, counter=0;
 672:main.c        ****     while(true)
 673:main.c        ****     {
 674:main.c        ****         LSM303D_Read_Acc(&data);
 675:main.c        ****        
 676:main.c        ****         motor_forward(200,20);
 677:main.c        ****         //vTaskDelay(200);
 678:main.c        ****         if (counter == 0) r = rand() % 2;
 679:main.c        ****         if (counter > 19){
 680:main.c        ****             counter = 0;
 681:main.c        ****             r = rand() % 2;
 682:main.c        ****         }// Returns a pseudo-random integer between 0 and RAND_MAX.
 683:main.c        ****             if(r == 0){
 684:main.c        ****                 motor_turn(200,50,5);
 685:main.c        ****                 vTaskDelay(0);
 686:main.c        ****                 //motor_forward(0,0);
 687:main.c        ****             }
 688:main.c        ****             else if(r == 1){
 689:main.c        ****                 motor_turn(50,200,5);
 690:main.c        ****                 vTaskDelay(0);
 691:main.c        ****                 //motor_forward(0,0);
 692:main.c        ****             }
 693:main.c        ****             else {
 694:main.c        ****                 motor_forward(200,20);
 695:main.c        ****                 vTaskDelay(0);
 696:main.c        ****             }
 697:main.c        ****         LSM303D_Read_Acc(&data);
 698:main.c        ****         if((data.accX<-4000)){
 699:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 700:main.c        ****             if(r == 0){
 701:main.c        ****                 motor_backward(80,50);
 702:main.c        ****                 motor_turn(200,50,500);
 703:main.c        ****                 vTaskDelay(0);
 704:main.c        ****                 //motor_forward(0,0);
 705:main.c        ****             }
 706:main.c        ****             else{
 707:main.c        ****                 motor_backward(80,50);
 708:main.c        ****                 motor_turn(50,200,500);
 709:main.c        ****                 vTaskDelay(0);
 710:main.c        ****                 //motor_forward(0,0);
 711:main.c        ****             }
 712:main.c        ****             motor_forward(100,100);
 713:main.c        ****         }
 714:main.c        ****         counter++;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 14


 715:main.c        ****         printf("%8d %8d %8d\n",data.accX, data.accY, data.accZ);
 716:main.c        ****         vTaskDelay(0);
 717:main.c        ****     }
 718:main.c        ****  }   
 719:main.c        **** #endif    
 720:main.c        **** 
 721:main.c        **** #if 0
 722:main.c        **** // MQTT test
 723:main.c        **** void zmain(void)
 724:main.c        **** {
 725:main.c        ****     int ctr = 0;
 726:main.c        **** 
 727:main.c        ****     printf("\nBoot\n");
 728:main.c        ****     send_mqtt("Zumo01/debug", "Boot");
 729:main.c        **** 
 730:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 731:main.c        ****     BatteryLed_Write(0); // Switch led off 
 732:main.c        **** 
 733:main.c        ****     while(true)
 734:main.c        ****     {
 735:main.c        ****         printf("Ctr: %d, Button: %d\n", ctr, SW1_Read());
 736:main.c        ****         print_mqtt("Zumo01/debug", "Ctr: %d, Button: %d", ctr, SW1_Read());
 737:main.c        **** 
 738:main.c        ****         vTaskDelay(1000);
 739:main.c        ****         ctr++;
 740:main.c        ****     }
 741:main.c        ****  }   
 742:main.c        **** #endif
 743:main.c        **** 
 744:main.c        **** #if 0
 745:main.c        **** 
 746:main.c        ****     
 747:main.c        **** void zmain(void)
 748:main.c        **** {
 749:main.c        ****     Ultra_Start();
 750:main.c        ****     motor_start(0,0);
 751:main.c        ****     motor_forward(0,0);
 752:main.c        ****     
 753:main.c        ****     vTaskDelay(3000);
 754:main.c        ****     
 755:main.c        ****     while(true){
 756:main.c        ****         int distance = Ultra_GetDistance();
 757:main.c        ****     
 758:main.c        ****         if(distance <= 10 && distance !=0){
 759:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 760:main.c        ****             if(r == 0){
 761:main.c        ****                 motor_turn(50,200,500);
 762:main.c        ****                 vTaskDelay(0);
 763:main.c        ****                 print_mqtt("Zumo006/turn", "left");
 764:main.c        ****                 //motor_forward(0,0);
 765:main.c        ****             }
 766:main.c        ****             else{
 767:main.c        ****                 motor_turn(200,50,500);
 768:main.c        ****                 vTaskDelay(0);
 769:main.c        ****                 print_mqtt("Zumo006/turn", "right");
 770:main.c        ****                 //motor_forward(0,0);
 771:main.c        ****             }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 15


 772:main.c        ****             motor_forward(100,100);
 773:main.c        ****         }
 774:main.c        ****         
 775:main.c        ****     }   
 776:main.c        **** }
 777:main.c        **** #endif
 778:main.c        **** 
 779:main.c        **** #if 0
 780:main.c        **** //IR receiverm - how to wait for IR remote commands
 781:main.c        **** void zmain(void)
 782:main.c        **** {
 783:main.c        ****     RTC_Start(); // start real time clock
 784:main.c        ****     
 785:main.c        ****     RTC_TIME_DATE now;
 786:main.c        **** 
 787:main.c        ****     time_t myTime;
 788:main.c        ****     struct tm * timeinfo;
 789:main.c        ****     time( &myTime );
 790:main.c        ****     timeinfo = localtime( &myTime );
 791:main.c        ****     
 792:main.c        ****     // set current time
 793:main.c        ****     now.Hour = timeinfo->tm_hour;
 794:main.c        ****     now.Min = timeinfo->tm_min;
 795:main.c        ****     now.Sec = timeinfo->tm_sec6;
 796:main.c        ****     now.DayOfMonth = timeinfo->tm_mday;
 797:main.c        ****     now.Month = timeinfo->tm_mon+1;
 798:main.c        ****     now.Year = timeinfo->tm_year+1900;
 799:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 800:main.c        ****     
 801:main.c        ****     uint8_t button_;
 802:main.c        ****     printf("\nStart\n");
 803:main.c        ****     
 804:main.c        ****     while(true){
 805:main.c        ****         button_ = SW1_Read();
 806:main.c        ****         if(button_==0){
 807:main.c        ****             IR_Start();
 808:main.c        ****             printf("\n\nIR test\n");
 809:main.c        ****             struct sensors_ ref;
 810:main.c        ****             struct sensors_ dig;
 811:main.c        ****             bool led = false,loop = true, startline= true;
 812:main.c        ****             int count =0;
 813:main.c        ****             motor_start();              // enable motor controller 
 814:main.c        ****             IR_flush(); // clear IR receive buffer
 815:main.c        ****             printf("Buffer cleared\n");
 816:main.c        ****             
 817:main.c        ****             reflectance_start();
 818:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 819:main.c        ****             vTaskDelay(200);
 820:main.c        ****                 while(startline){
 821:main.c        ****                     // read raw sensor values
 822:main.c        ****                     reflectance_read(&ref);
 823:main.c        ****                     reflectance_digital(&dig); 
 824:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 825:main.c        ****                         motor_turn(50,50,50);       // motor forward
 826:main.c        ****                         Beep(60,80);
 827:main.c        ****                     }
 828:main.c        ****                     else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 16


 829:main.c        ****                         motor_forward(0,0);       // Stop motors
 830:main.c        ****                         startline = false;
 831:main.c        ****                     }
 832:main.c        ****                 }
 833:main.c        ****             IR_wait();  // wait for IR command
 834:main.c        ****             led = !led;
 835:main.c        ****             BatteryLed_Write(led);   
 836:main.c        ****             
 837:main.c        ****             // Toggle led when IR signal is received
 838:main.c        ****             while(loop)
 839:main.c        ****             {   
 840:main.c        ****                 if(led){
 841:main.c        ****                     // read raw sensor values
 842:main.c        ****                     reflectance_read(&ref);
 843:main.c        ****                     reflectance_digital(&dig); 
 844:main.c        ****                     
 845:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 846:main.c        ****                         motor_turn(50,50,50);       // motor forward
 847:main.c        ****                         motor_forward(0,0);       // Stop motors
 848:main.c        ****                         vTaskDelay(50);
 849:main.c        ****                         count++;
 850:main.c        ****                         printf("count %d \n",count);
 851:main.c        ****                         printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 852:main.c        ****                         print_mqtt("Zumo006/lap", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 853:main.c        ****                         /*if(count >= 7){
 854:main.c        ****                             motor_forward(0,0);       // Stop motors
 855:main.c        ****                             loop = false;
 856:main.c        ****                         }*/
 857:main.c        ****                     }
 858:main.c        ****                     else{
 859:main.c        ****                          motor_turn(50,50,50);       // motor forward
 860:main.c        ****                         Beep(100,100);
 861:main.c        ****                     }
 862:main.c        ****                 }
 863:main.c        ****                 else {
 864:main.c        ****                     printf("Led is OFF\n");
 865:main.c        ****                     loop = false;
 866:main.c        ****                 }
 867:main.c        ****                
 868:main.c        ****             }    
 869:main.c        ****         }
 870:main.c        ****     }
 871:main.c        ****  }
 872:main.c        **** #endif
 873:main.c        **** 
 874:main.c        **** #if 0
 875:main.c        **** void zmain(void)
 876:main.c        **** {    
 877:main.c        ****     struct accData_ data;
 878:main.c        ****     struct sensors_ ref;
 879:main.c        ****     struct sensors_ dig;
 880:main.c        ****     
 881:main.c        ****     printf("MQTT and sensor test...\n");
 882:main.c        **** 
 883:main.c        ****     if(!LSM303D_Start()){
 884:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 885:main.c        ****         vTaskSuspend(NULL);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 17


 886:main.c        ****     }
 887:main.c        ****     else {
 888:main.c        ****         printf("Accelerometer Ok...\n");
 889:main.c        ****     }
 890:main.c        ****     
 891:main.c        ****     int ctr = 0;
 892:main.c        ****     reflectance_start();
 893:main.c        ****     while(true)
 894:main.c        ****     {
 895:main.c        ****         LSM303D_Read_Acc(&data);
 896:main.c        ****         // send data when we detect a hit and at 10 second intervals
 897:main.c        ****         if(data.accX > 1500 || ++ctr > 1000) {
 898:main.c        ****             printf("Acc: %8d %8d %8d\n",data.accX, data.accY, data.accZ);
 899:main.c        ****             //print_mqtt("Zumo01/acc", "%d,%d,%d", data.accX, data.accY, data.accZ);
 900:main.c        ****             reflectance_read(&ref);
 901:main.c        ****             printf("Ref: %8d %8d %8d %8d %8d %8d\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3
 902:main.c        ****             //print_mqtt("Zumo01/ref", "%d,%d,%d,%d,%d,%d", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2,
 903:main.c        ****             reflectance_digital(&dig);
 904:main.c        ****             printf("Dig: %8d %8d %8d %8d %8d %8d\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3
 905:main.c        ****             //print_mqtt("Zumo01/dig", "%d,%d,%d,%d,%d,%d", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2,
 906:main.c        ****             ctr = 0;
 907:main.c        ****         }
 908:main.c        ****         vTaskDelay(10);
 909:main.c        ****     }
 910:main.c        ****  }   
 911:main.c        **** 
 912:main.c        **** #endif
 913:main.c        **** 
 914:main.c        **** #if 0
 915:main.c        **** void zmain(void)
 916:main.c        **** {    
 917:main.c        ****     RTC_Start(); // start real time clock
 918:main.c        ****     
 919:main.c        ****     RTC_TIME_DATE now;
 920:main.c        **** 
 921:main.c        ****     // set current time
 922:main.c        ****     now.Hour = 12;
 923:main.c        ****     now.Min = 34;
 924:main.c        ****     now.Sec = 56;
 925:main.c        ****     now.DayOfMonth = 25;
 926:main.c        ****     now.Month = 9;
 927:main.c        ****     now.Year = 2018;
 928:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 929:main.c        **** 
 930:main.c        ****     while(true)
 931:main.c        ****     {
 932:main.c        ****         if(SW1_Read() == 0) {
 933:main.c        ****             // read the current time
 934:main.c        ****             RTC_DisableInt(); // Disable Interrupt of RTC Component
 935:main.c        ****             now = *RTC_ReadTime(); // copy the current time to a local variable
 936:main.c        ****             RTC_EnableInt(); // Enable Interrupt of RTC Component
 937:main.c        **** 
 938:main.c        ****             // print the current time
 939:main.c        ****             printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 940:main.c        ****             print_mqtt("Zumo006/time", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 941:main.c        ****             
 942:main.c        ****             // wait until button is released
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 18


 943:main.c        ****             while(SW1_Read() == 0) vTaskDelay(50);
 944:main.c        ****         }
 945:main.c        ****         vTaskDelay(50);
 946:main.c        ****     }
 947:main.c        ****  }   
 948:main.c        **** #endif
 949:main.c        **** 
 950:main.c        **** #if 0
 951:main.c        **** //main project 1    
 952:main.c        **** #endif
 953:main.c        **** 
 954:main.c        **** #if 1
 955:main.c        **** //main project 2
 956:main.c        **** // Calibrated 
 957:main.c        **** void go_forward(uint8 speed, int delay)
 958:main.c        **** {
  28              		.loc 1 958 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
  40 0004 0D46     		mov	r5, r1
 959:main.c        ****     MotorDirLeft_Write(0);      
  41              		.loc 1 959 0
  42 0006 0020     		movs	r0, #0
  43              	.LVL1:
  44 0008 FFF7FEFF 		bl	MotorDirLeft_Write
  45              	.LVL2:
 960:main.c        ****     MotorDirRight_Write(0);    
  46              		.loc 1 960 0
  47 000c 0020     		movs	r0, #0
  48 000e FFF7FEFF 		bl	MotorDirRight_Write
  49              	.LVL3:
 961:main.c        ****     PWM_WriteCompare1(speed); 
  50              		.loc 1 961 0
  51 0012 2046     		mov	r0, r4
  52 0014 FFF7FEFF 		bl	PWM_WriteCompare1
  53              	.LVL4:
 962:main.c        ****     PWM_WriteCompare2(speed-7); 
  54              		.loc 1 962 0
  55 0018 E01F     		subs	r0, r4, #7
  56 001a C0B2     		uxtb	r0, r0
  57 001c FFF7FEFF 		bl	PWM_WriteCompare2
  58              	.LVL5:
 963:main.c        ****     vTaskDelay(delay);
  59              		.loc 1 963 0
  60 0020 2846     		mov	r0, r5
  61 0022 FFF7FEFF 		bl	vTaskDelay
  62              	.LVL6:
  63 0026 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 19


  64              		.cfi_endproc
  65              	.LFE85:
  66              		.size	go_forward, .-go_forward
  67              		.section	.text.tankturn_left,"ax",%progbits
  68              		.align	2
  69              		.global	tankturn_left
  70              		.thumb
  71              		.thumb_func
  72              		.type	tankturn_left, %function
  73              	tankturn_left:
  74              	.LFB86:
 964:main.c        **** }
 965:main.c        **** 
 966:main.c        **** // turn to left
 967:main.c        **** void tankturn_left(uint8 speed_left, uint8 speed_right, int delay)
 968:main.c        **** {
  75              		.loc 1 968 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL7:
  80 0000 70B5     		push	{r4, r5, r6, lr}
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 4, -16
  83              		.cfi_offset 5, -12
  84              		.cfi_offset 6, -8
  85              		.cfi_offset 14, -4
  86 0002 0646     		mov	r6, r0
  87 0004 0D46     		mov	r5, r1
  88 0006 1446     		mov	r4, r2
 969:main.c        ****     MotorDirLeft_Write(1);      
  89              		.loc 1 969 0
  90 0008 0120     		movs	r0, #1
  91              	.LVL8:
  92 000a FFF7FEFF 		bl	MotorDirLeft_Write
  93              	.LVL9:
 970:main.c        ****     MotorDirRight_Write(0);    
  94              		.loc 1 970 0
  95 000e 0020     		movs	r0, #0
  96 0010 FFF7FEFF 		bl	MotorDirRight_Write
  97              	.LVL10:
 971:main.c        ****     PWM_WriteCompare1(speed_left); 
  98              		.loc 1 971 0
  99 0014 3046     		mov	r0, r6
 100 0016 FFF7FEFF 		bl	PWM_WriteCompare1
 101              	.LVL11:
 972:main.c        ****     PWM_WriteCompare2(speed_right); 
 102              		.loc 1 972 0
 103 001a 2846     		mov	r0, r5
 104 001c FFF7FEFF 		bl	PWM_WriteCompare2
 105              	.LVL12:
 973:main.c        ****     vTaskDelay(delay);
 106              		.loc 1 973 0
 107 0020 2046     		mov	r0, r4
 108 0022 FFF7FEFF 		bl	vTaskDelay
 109              	.LVL13:
 110 0026 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 20


 111              		.cfi_endproc
 112              	.LFE86:
 113              		.size	tankturn_left, .-tankturn_left
 114              		.section	.text.tankturn_right,"ax",%progbits
 115              		.align	2
 116              		.global	tankturn_right
 117              		.thumb
 118              		.thumb_func
 119              		.type	tankturn_right, %function
 120              	tankturn_right:
 121              	.LFB87:
 974:main.c        **** }
 975:main.c        **** 
 976:main.c        **** // turn to right
 977:main.c        **** void tankturn_right(uint8 speed_left, uint8 speed_right, int delay)
 978:main.c        **** {
 122              		.loc 1 978 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL14:
 127 0000 70B5     		push	{r4, r5, r6, lr}
 128              		.cfi_def_cfa_offset 16
 129              		.cfi_offset 4, -16
 130              		.cfi_offset 5, -12
 131              		.cfi_offset 6, -8
 132              		.cfi_offset 14, -4
 133 0002 0646     		mov	r6, r0
 134 0004 0D46     		mov	r5, r1
 135 0006 1446     		mov	r4, r2
 979:main.c        ****     MotorDirLeft_Write(0);      
 136              		.loc 1 979 0
 137 0008 0020     		movs	r0, #0
 138              	.LVL15:
 139 000a FFF7FEFF 		bl	MotorDirLeft_Write
 140              	.LVL16:
 980:main.c        ****     MotorDirRight_Write(1);    
 141              		.loc 1 980 0
 142 000e 0120     		movs	r0, #1
 143 0010 FFF7FEFF 		bl	MotorDirRight_Write
 144              	.LVL17:
 981:main.c        ****     PWM_WriteCompare1(speed_left); 
 145              		.loc 1 981 0
 146 0014 3046     		mov	r0, r6
 147 0016 FFF7FEFF 		bl	PWM_WriteCompare1
 148              	.LVL18:
 982:main.c        ****     PWM_WriteCompare2(speed_right); 
 149              		.loc 1 982 0
 150 001a 2846     		mov	r0, r5
 151 001c FFF7FEFF 		bl	PWM_WriteCompare2
 152              	.LVL19:
 983:main.c        ****     vTaskDelay(delay);
 153              		.loc 1 983 0
 154 0020 2046     		mov	r0, r4
 155 0022 FFF7FEFF 		bl	vTaskDelay
 156              	.LVL20:
 157 0026 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 21


 158              		.cfi_endproc
 159              	.LFE87:
 160              		.size	tankturn_right, .-tankturn_right
 161              		.section	.text.zmain,"ax",%progbits
 162              		.align	2
 163              		.global	zmain
 164              		.thumb
 165              		.thumb_func
 166              		.type	zmain, %function
 167              	zmain:
 168              	.LFB88:
 984:main.c        **** }
 985:main.c        **** 
 986:main.c        **** void go_forward(uint8 speed, int delay);    
 987:main.c        **** void tankturn_right(uint8 speed_left, uint8 speed_right, int delay);    
 988:main.c        **** void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);
 989:main.c        **** 
 990:main.c        **** void zmain(void)
 991:main.c        **** {
 169              		.loc 1 991 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 24
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173 0000 70B5     		push	{r4, r5, r6, lr}
 174              		.cfi_def_cfa_offset 16
 175              		.cfi_offset 4, -16
 176              		.cfi_offset 5, -12
 177              		.cfi_offset 6, -8
 178              		.cfi_offset 14, -4
 179 0002 88B0     		sub	sp, sp, #32
 180              		.cfi_def_cfa_offset 48
 992:main.c        **** 
 993:main.c        ****     struct accData_ data; 
 994:main.c        ****     LSM303D_Start();
 181              		.loc 1 994 0
 182 0004 FFF7FEFF 		bl	LSM303D_Start
 183              	.LVL21:
 995:main.c        ****     Ultra_Start();
 184              		.loc 1 995 0
 185 0008 FFF7FEFF 		bl	Ultra_Start
 186              	.LVL22:
 996:main.c        **** 
 997:main.c        ****     struct sensors_ dig;
 998:main.c        ****     TickType_t start, end, hit = 0;
 999:main.c        **** 
1000:main.c        ****     reflectance_start();
 187              		.loc 1 1000 0
 188 000c FFF7FEFF 		bl	reflectance_start
 189              	.LVL23:
1001:main.c        ****     reflectance_set_threshold(9000, 9000, 9000, 9000, 11000, 13000);
 190              		.loc 1 1001 0
 191 0010 43F2C823 		movw	r3, #13000
 192 0014 0193     		str	r3, [sp, #4]
 193 0016 42F6F823 		movw	r3, #11000
 194 001a 0093     		str	r3, [sp]
 195 001c 42F22833 		movw	r3, #9000
 196 0020 1A46     		mov	r2, r3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 22


 197 0022 1946     		mov	r1, r3
 198 0024 1846     		mov	r0, r3
 199 0026 FFF7FEFF 		bl	reflectance_set_threshold
 200              	.LVL24:
1002:main.c        **** 
1003:main.c        ****     motor_start();
 201              		.loc 1 1003 0
 202 002a FFF7FEFF 		bl	motor_start
 203              	.LVL25:
1004:main.c        ****     motor_forward(0,0);
 204              		.loc 1 1004 0
 205 002e 0021     		movs	r1, #0
 206 0030 0846     		mov	r0, r1
 207 0032 FFF7FEFF 		bl	motor_forward
 208              	.LVL26:
1005:main.c        ****     IR_Start();
 209              		.loc 1 1005 0
 210 0036 FFF7FEFF 		bl	IR_Start
 211              	.LVL27:
1006:main.c        **** 
1007:main.c        ****     // Prepare for the fight, wait for IR on the line
1008:main.c        ****     while (SW1_Read() == 1) {
 212              		.loc 1 1008 0
 213 003a 02E0     		b	.L8
 214              	.L9:
1009:main.c        ****         vTaskDelay(100);
 215              		.loc 1 1009 0
 216 003c 6420     		movs	r0, #100
 217 003e FFF7FEFF 		bl	vTaskDelay
 218              	.LVL28:
 219              	.L8:
1008:main.c        ****         vTaskDelay(100);
 220              		.loc 1 1008 0
 221 0042 FFF7FEFF 		bl	SW1_Read
 222              	.LVL29:
 223 0046 0128     		cmp	r0, #1
 224 0048 F8D0     		beq	.L9
 225 004a 06E0     		b	.L10
 226              	.L11:
1010:main.c        ****     }
1011:main.c        **** 
1012:main.c        ****     // Search for the circle
1013:main.c        ****     while (dig.l1 != 1 || dig.l2 != 1 || dig.l3 != 1 ||
1014:main.c        ****           dig.r1 != 1 || dig.r2 != 1 || dig.r3 != 1) {
1015:main.c        ****             reflectance_digital(&dig);
 227              		.loc 1 1015 0
 228 004c 03A8     		add	r0, sp, #12
 229 004e FFF7FEFF 		bl	reflectance_digital
 230              	.LVL30:
1016:main.c        ****             go_forward(55, 10);
 231              		.loc 1 1016 0
 232 0052 0A21     		movs	r1, #10
 233 0054 3720     		movs	r0, #55
 234 0056 FFF7FEFF 		bl	go_forward
 235              	.LVL31:
 236              	.L10:
1013:main.c        ****           dig.r1 != 1 || dig.r2 != 1 || dig.r3 != 1) {
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 23


 237              		.loc 1 1013 0
 238 005a BDF81030 		ldrh	r3, [sp, #16]
 239 005e 012B     		cmp	r3, #1
 240 0060 F4D1     		bne	.L11
1013:main.c        ****           dig.r1 != 1 || dig.r2 != 1 || dig.r3 != 1) {
 241              		.loc 1 1013 0 is_stmt 0 discriminator 1
 242 0062 BDF80E30 		ldrh	r3, [sp, #14]
 243 0066 012B     		cmp	r3, #1
 244 0068 F0D1     		bne	.L11
1013:main.c        ****           dig.r1 != 1 || dig.r2 != 1 || dig.r3 != 1) {
 245              		.loc 1 1013 0 discriminator 2
 246 006a BDF80C30 		ldrh	r3, [sp, #12]
 247 006e 012B     		cmp	r3, #1
 248 0070 ECD1     		bne	.L11
1014:main.c        ****             reflectance_digital(&dig);
 249              		.loc 1 1014 0 is_stmt 1 discriminator 3
 250 0072 BDF81230 		ldrh	r3, [sp, #18]
1013:main.c        ****           dig.r1 != 1 || dig.r2 != 1 || dig.r3 != 1) {
 251              		.loc 1 1013 0 discriminator 3
 252 0076 012B     		cmp	r3, #1
 253 0078 E8D1     		bne	.L11
1014:main.c        ****             reflectance_digital(&dig);
 254              		.loc 1 1014 0
 255 007a BDF81430 		ldrh	r3, [sp, #20]
 256 007e 012B     		cmp	r3, #1
 257 0080 E4D1     		bne	.L11
1014:main.c        ****             reflectance_digital(&dig);
 258              		.loc 1 1014 0 is_stmt 0 discriminator 1
 259 0082 BDF81630 		ldrh	r3, [sp, #22]
 260 0086 012B     		cmp	r3, #1
 261 0088 E0D1     		bne	.L11
1017:main.c        ****     }
1018:main.c        **** 
1019:main.c        ****     motor_forward(0, 0); 
 262              		.loc 1 1019 0 is_stmt 1
 263 008a 0021     		movs	r1, #0
 264 008c 0846     		mov	r0, r1
 265 008e FFF7FEFF 		bl	motor_forward
 266              	.LVL32:
1020:main.c        ****     print_mqtt("Zumo006/ready", "zumo");
 267              		.loc 1 1020 0
 268 0092 5949     		ldr	r1, .L20
 269 0094 5948     		ldr	r0, .L20+4
 270 0096 FFF7FEFF 		bl	print_mqtt
 271              	.LVL33:
1021:main.c        ****     IR_wait();
 272              		.loc 1 1021 0
 273 009a FFF7FEFF 		bl	IR_wait
 274              	.LVL34:
1022:main.c        **** 
1023:main.c        ****     // Pass the circle line
1024:main.c        ****     go_forward(100, 200);
 275              		.loc 1 1024 0
 276 009e C821     		movs	r1, #200
 277 00a0 6420     		movs	r0, #100
 278 00a2 FFF7FEFF 		bl	go_forward
 279              	.LVL35:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 24


1025:main.c        **** 
1026:main.c        ****     start = xTaskGetTickCount();
 280              		.loc 1 1026 0
 281 00a6 FFF7FEFF 		bl	xTaskGetTickCount
 282              	.LVL36:
 283 00aa 0546     		mov	r5, r0
 284              	.LVL37:
1027:main.c        ****     print_mqtt("Zumo006/start", "%d", start);
 285              		.loc 1 1027 0
 286 00ac 0246     		mov	r2, r0
 287 00ae 5449     		ldr	r1, .L20+8
 288 00b0 5448     		ldr	r0, .L20+12
 289              	.LVL38:
 290 00b2 FFF7FEFF 		bl	print_mqtt
 291              	.LVL39:
 998:main.c        **** 
 292              		.loc 1 998 0
 293 00b6 0024     		movs	r4, #0
 294              	.LVL40:
 295              	.L17:
1028:main.c        **** 
1029:main.c        ****     // Sumo fighting loop
1030:main.c        ****     while (true) {
1031:main.c        ****         go_forward(100, 5);
 296              		.loc 1 1031 0
 297 00b8 0521     		movs	r1, #5
 298 00ba 6420     		movs	r0, #100
 299 00bc FFF7FEFF 		bl	go_forward
 300              	.LVL41:
1032:main.c        ****         LSM303D_Read_Acc(&data);
 301              		.loc 1 1032 0
 302 00c0 06A8     		add	r0, sp, #24
 303 00c2 FFF7FEFF 		bl	LSM303D_Read_Acc
 304              	.LVL42:
1033:main.c        ****         reflectance_digital(&dig);
 305              		.loc 1 1033 0
 306 00c6 03A8     		add	r0, sp, #12
 307 00c8 FFF7FEFF 		bl	reflectance_digital
 308              	.LVL43:
1034:main.c        **** 
1035:main.c        ****         // Detect hits from the back, left and right sides
1036:main.c        ****         if (data.accX > 12000 || data.accY > 12000 || data.accX < -12000 || data.accY < -12000) {
 309              		.loc 1 1036 0
 310 00cc BDF91820 		ldrsh	r2, [sp, #24]
 311 00d0 42F6E063 		movw	r3, #12000
 312 00d4 9A42     		cmp	r2, r3
 313 00d6 0ADC     		bgt	.L12
 314              		.loc 1 1036 0 is_stmt 0 discriminator 1
 315 00d8 BDF91A30 		ldrsh	r3, [sp, #26]
 316 00dc 42F6E061 		movw	r1, #12000
 317 00e0 8B42     		cmp	r3, r1
 318 00e2 04DC     		bgt	.L12
 319              		.loc 1 1036 0 discriminator 2
 320 00e4 4849     		ldr	r1, .L20+16
 321 00e6 8A42     		cmp	r2, r1
 322 00e8 01DB     		blt	.L12
 323              		.loc 1 1036 0 discriminator 3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 25


 324 00ea 8B42     		cmp	r3, r1
 325 00ec 1EDA     		bge	.L13
 326              	.L12:
1037:main.c        **** 
1038:main.c        ****             // Send the hit message with the minimal time interval
1039:main.c        ****             // of 100 seconds
1040:main.c        ****             if (xTaskGetTickCount() - hit > 110) {
 327              		.loc 1 1040 0 is_stmt 1
 328 00ee FFF7FEFF 		bl	xTaskGetTickCount
 329              	.LVL44:
 330 00f2 001B     		subs	r0, r0, r4
 331 00f4 6E28     		cmp	r0, #110
 332 00f6 19D9     		bls	.L13
1041:main.c        ****                 hit = xTaskGetTickCount();
 333              		.loc 1 1041 0
 334 00f8 FFF7FEFF 		bl	xTaskGetTickCount
 335              	.LVL45:
 336 00fc 0446     		mov	r4, r0
 337              	.LVL46:
1042:main.c        ****                 print_mqtt("Zumo006/attack", "%d", hit);
 338              		.loc 1 1042 0
 339 00fe 0246     		mov	r2, r0
 340 0100 3F49     		ldr	r1, .L20+8
 341 0102 4248     		ldr	r0, .L20+20
 342              	.LVL47:
 343 0104 FFF7FEFF 		bl	print_mqtt
 344              	.LVL48:
1043:main.c        **** 
1044:main.c        ****                 // Change the direction 90 degree and sprint to avoid unnecessary collisions
1045:main.c        ****                 tankturn_left(255, 255, 300);
 345              		.loc 1 1045 0
 346 0108 4FF49672 		mov	r2, #300
 347 010c FF21     		movs	r1, #255
 348 010e 0846     		mov	r0, r1
 349 0110 FFF7FEFF 		bl	tankturn_left
 350              	.LVL49:
1046:main.c        ****                 motor_forward(0,0);
 351              		.loc 1 1046 0
 352 0114 0021     		movs	r1, #0
 353 0116 0846     		mov	r0, r1
 354 0118 FFF7FEFF 		bl	motor_forward
 355              	.LVL50:
1047:main.c        ****                 go_forward(255, 100); 
 356              		.loc 1 1047 0
 357 011c 6421     		movs	r1, #100
 358 011e FF20     		movs	r0, #255
 359 0120 FFF7FEFF 		bl	go_forward
 360              	.LVL51:
1048:main.c        ****                 go_forward(100, 100); 
 361              		.loc 1 1048 0
 362 0124 6421     		movs	r1, #100
 363 0126 0846     		mov	r0, r1
 364 0128 FFF7FEFF 		bl	go_forward
 365              	.LVL52:
 366              	.L13:
1049:main.c        ****             }
1050:main.c        ****         }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 26


1051:main.c        **** 
1052:main.c        **** 
1053:main.c        ****         if (Ultra_GetDistance() < 10) {
 367              		.loc 1 1053 0
 368 012c FFF7FEFF 		bl	Ultra_GetDistance
 369              	.LVL53:
 370 0130 0928     		cmp	r0, #9
 371 0132 15DC     		bgt	.L14
1054:main.c        ****             go_forward(255, 300);
 372              		.loc 1 1054 0
 373 0134 4FF49671 		mov	r1, #300
 374 0138 FF20     		movs	r0, #255
 375 013a FFF7FEFF 		bl	go_forward
 376              	.LVL54:
1055:main.c        ****             go_forward(100, 100);
 377              		.loc 1 1055 0
 378 013e 6421     		movs	r1, #100
 379 0140 0846     		mov	r0, r1
 380 0142 FFF7FEFF 		bl	go_forward
 381              	.LVL55:
1056:main.c        **** 
1057:main.c        ****             if (xTaskGetTickCount() - hit > 100) {
 382              		.loc 1 1057 0
 383 0146 FFF7FEFF 		bl	xTaskGetTickCount
 384              	.LVL56:
 385 014a 001B     		subs	r0, r0, r4
 386 014c 6428     		cmp	r0, #100
 387 014e 07D9     		bls	.L14
1058:main.c        ****                 hit = xTaskGetTickCount();
 388              		.loc 1 1058 0
 389 0150 FFF7FEFF 		bl	xTaskGetTickCount
 390              	.LVL57:
 391 0154 0446     		mov	r4, r0
 392              	.LVL58:
1059:main.c        ****                 print_mqtt("Zumo006/hit", "%d", hit);
 393              		.loc 1 1059 0
 394 0156 0246     		mov	r2, r0
 395 0158 2949     		ldr	r1, .L20+8
 396 015a 2D48     		ldr	r0, .L20+24
 397              	.LVL59:
 398 015c FFF7FEFF 		bl	print_mqtt
 399              	.LVL60:
 400              	.L14:
1060:main.c        ****             }
1061:main.c        ****         }
1062:main.c        **** 
1063:main.c        ****         // 180 turn
1064:main.c        ****         if (dig.l1 == 1 || dig.l2 == 1 || dig.l3 == 1||
 401              		.loc 1 1064 0
 402 0160 BDF81030 		ldrh	r3, [sp, #16]
 403 0164 012B     		cmp	r3, #1
 404 0166 13D0     		beq	.L15
 405              		.loc 1 1064 0 is_stmt 0 discriminator 1
 406 0168 BDF80E30 		ldrh	r3, [sp, #14]
 407 016c 012B     		cmp	r3, #1
 408 016e 0FD0     		beq	.L15
 409              		.loc 1 1064 0 discriminator 2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 27


 410 0170 BDF80C30 		ldrh	r3, [sp, #12]
 411 0174 012B     		cmp	r3, #1
 412 0176 0BD0     		beq	.L15
1065:main.c        ****         dig.r1 == 1 || dig.r2 == 1 || dig.r3 == 1) {
 413              		.loc 1 1065 0 is_stmt 1 discriminator 3
 414 0178 BDF81230 		ldrh	r3, [sp, #18]
1064:main.c        ****         dig.r1 == 1 || dig.r2 == 1 || dig.r3 == 1) {
 415              		.loc 1 1064 0 discriminator 3
 416 017c 012B     		cmp	r3, #1
 417 017e 07D0     		beq	.L15
 418              		.loc 1 1065 0
 419 0180 BDF81430 		ldrh	r3, [sp, #20]
 420 0184 012B     		cmp	r3, #1
 421 0186 03D0     		beq	.L15
 422              		.loc 1 1065 0 is_stmt 0 discriminator 1
 423 0188 BDF81630 		ldrh	r3, [sp, #22]
 424 018c 012B     		cmp	r3, #1
 425 018e 15D1     		bne	.L16
 426              	.L15:
1066:main.c        ****             motor_backward(100, 200);
 427              		.loc 1 1066 0 is_stmt 1
 428 0190 C821     		movs	r1, #200
 429 0192 6420     		movs	r0, #100
 430 0194 FFF7FEFF 		bl	motor_backward
 431              	.LVL61:
1067:main.c        ****             motor_forward(0, 0);
 432              		.loc 1 1067 0
 433 0198 0021     		movs	r1, #0
 434 019a 0846     		mov	r0, r1
 435 019c FFF7FEFF 		bl	motor_forward
 436              	.LVL62:
1068:main.c        ****             tankturn_right(200, 200, 400);   
 437              		.loc 1 1068 0
 438 01a0 4FF4C872 		mov	r2, #400
 439 01a4 C821     		movs	r1, #200
 440 01a6 0846     		mov	r0, r1
 441 01a8 FFF7FEFF 		bl	tankturn_right
 442              	.LVL63:
1069:main.c        ****             motor_forward(0, 0);
 443              		.loc 1 1069 0
 444 01ac 0021     		movs	r1, #0
 445 01ae 0846     		mov	r0, r1
 446 01b0 FFF7FEFF 		bl	motor_forward
 447              	.LVL64:
1070:main.c        ****             go_forward(100, 100); 
 448              		.loc 1 1070 0
 449 01b4 6421     		movs	r1, #100
 450 01b6 0846     		mov	r0, r1
 451 01b8 FFF7FEFF 		bl	go_forward
 452              	.LVL65:
 453              	.L16:
1071:main.c        ****         }
1072:main.c        **** 
1073:main.c        ****         // Stop the fight by pressing the user button
1074:main.c        ****         if (SW1_Read() == 0) {
 454              		.loc 1 1074 0
 455 01bc FFF7FEFF 		bl	SW1_Read
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 28


 456              	.LVL66:
 457 01c0 0028     		cmp	r0, #0
 458 01c2 7FF479AF 		bne	.L17
 459              	.LBB2:
1075:main.c        ****             motor_forward(0,0);
 460              		.loc 1 1075 0
 461 01c6 0021     		movs	r1, #0
 462 01c8 0846     		mov	r0, r1
 463 01ca FFF7FEFF 		bl	motor_forward
 464              	.LVL67:
1076:main.c        **** 
1077:main.c        ****             end = xTaskGetTickCount();
 465              		.loc 1 1077 0
 466 01ce FFF7FEFF 		bl	xTaskGetTickCount
 467              	.LVL68:
 468 01d2 0646     		mov	r6, r0
 469              	.LVL69:
1078:main.c        ****             print_mqtt("Zumo006/stop", "%d", end);
 470              		.loc 1 1078 0
 471 01d4 0A4C     		ldr	r4, .L20+8
 472              	.LVL70:
 473 01d6 0246     		mov	r2, r0
 474 01d8 2146     		mov	r1, r4
 475 01da 0E48     		ldr	r0, .L20+28
 476              	.LVL71:
 477 01dc FFF7FEFF 		bl	print_mqtt
 478              	.LVL72:
1079:main.c        ****             int delta = end - start;
1080:main.c        ****             print_mqtt("Zuome006/time", "%d", delta);
 479              		.loc 1 1080 0
 480 01e0 721B     		subs	r2, r6, r5
 481              	.LVL73:
 482 01e2 2146     		mov	r1, r4
 483 01e4 0C48     		ldr	r0, .L20+32
 484 01e6 FFF7FEFF 		bl	print_mqtt
 485              	.LVL74:
1081:main.c        **** 
1082:main.c        ****             motor_stop();
 486              		.loc 1 1082 0
 487 01ea FFF7FEFF 		bl	motor_stop
 488              	.LVL75:
 489              	.L18:
1083:main.c        ****             while(true)
1084:main.c        ****                 vTaskDelay(100);
 490              		.loc 1 1084 0 discriminator 1
 491 01ee 6420     		movs	r0, #100
 492 01f0 FFF7FEFF 		bl	vTaskDelay
 493              	.LVL76:
 494 01f4 FBE7     		b	.L18
 495              	.L21:
 496 01f6 00BF     		.align	2
 497              	.L20:
 498 01f8 00000000 		.word	.LC0
 499 01fc 08000000 		.word	.LC1
 500 0200 18000000 		.word	.LC2
 501 0204 1C000000 		.word	.LC3
 502 0208 20D1FFFF 		.word	-12000
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 29


 503 020c 2C000000 		.word	.LC4
 504 0210 3C000000 		.word	.LC5
 505 0214 48000000 		.word	.LC6
 506 0218 58000000 		.word	.LC7
 507              	.LBE2:
 508              		.cfi_endproc
 509              	.LFE88:
 510              		.size	zmain, .-zmain
 511              		.section	.rodata.str1.4,"aMS",%progbits,1
 512              		.align	2
 513              	.LC0:
 514 0000 7A756D6F 		.ascii	"zumo\000"
 514      00
 515 0005 000000   		.space	3
 516              	.LC1:
 517 0008 5A756D6F 		.ascii	"Zumo006/ready\000"
 517      3030362F 
 517      72656164 
 517      7900
 518 0016 0000     		.space	2
 519              	.LC2:
 520 0018 256400   		.ascii	"%d\000"
 521 001b 00       		.space	1
 522              	.LC3:
 523 001c 5A756D6F 		.ascii	"Zumo006/start\000"
 523      3030362F 
 523      73746172 
 523      7400
 524 002a 0000     		.space	2
 525              	.LC4:
 526 002c 5A756D6F 		.ascii	"Zumo006/attack\000"
 526      3030362F 
 526      61747461 
 526      636B00
 527 003b 00       		.space	1
 528              	.LC5:
 529 003c 5A756D6F 		.ascii	"Zumo006/hit\000"
 529      3030362F 
 529      68697400 
 530              	.LC6:
 531 0048 5A756D6F 		.ascii	"Zumo006/stop\000"
 531      3030362F 
 531      73746F70 
 531      00
 532 0055 000000   		.space	3
 533              	.LC7:
 534 0058 5A756F6D 		.ascii	"Zuome006/time\000"
 534      65303036 
 534      2F74696D 
 534      6500
 535              		.text
 536              	.Letext0:
 537              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 538              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 539              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 540              		.file 5 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 541              		.file 6 ".\\ZumoLibrary/Reflectance.h"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 30


 542              		.file 7 ".\\ZumoLibrary/LSM303D.h"
 543              		.file 8 "Generated_Source\\PSoC5/MotorDirLeft.h"
 544              		.file 9 "Generated_Source\\PSoC5/MotorDirRight.h"
 545              		.file 10 "Generated_Source\\PSoC5/PWM.h"
 546              		.file 11 "..\\FreeRTOS\\Source\\include/task.h"
 547              		.file 12 ".\\ZumoLibrary/Motor.h"
 548              		.file 13 ".\\ZumoLibrary/mqtt_sender.h"
 549              		.file 14 ".\\ZumoLibrary/Ultra.h"
 550              		.file 15 ".\\ZumoLibrary/IR.h"
 551              		.file 16 "Generated_Source\\PSoC5/SW1.h"
 552              		.file 17 "Generated_Source\\PSoC5/core_cm3.h"
 553              		.section	.debug_info,"",%progbits
 554              	.Ldebug_info0:
 555 0000 96080000 		.4byte	0x896
 556 0004 0400     		.2byte	0x4
 557 0006 00000000 		.4byte	.Ldebug_abbrev0
 558 000a 04       		.byte	0x4
 559 000b 01       		.uleb128 0x1
 560 000c 0C030000 		.4byte	.LASF60
 561 0010 0C       		.byte	0xc
 562 0011 B1020000 		.4byte	.LASF61
 563 0015 77000000 		.4byte	.LASF62
 564 0019 00000000 		.4byte	.Ldebug_ranges0+0
 565 001d 00000000 		.4byte	0
 566 0021 00000000 		.4byte	.Ldebug_line0
 567 0025 02       		.uleb128 0x2
 568 0026 01       		.byte	0x1
 569 0027 06       		.byte	0x6
 570 0028 E9010000 		.4byte	.LASF0
 571 002c 02       		.uleb128 0x2
 572 002d 01       		.byte	0x1
 573 002e 08       		.byte	0x8
 574 002f C1010000 		.4byte	.LASF1
 575 0033 03       		.uleb128 0x3
 576 0034 FA020000 		.4byte	.LASF3
 577 0038 02       		.byte	0x2
 578 0039 29       		.byte	0x29
 579 003a 3E000000 		.4byte	0x3e
 580 003e 02       		.uleb128 0x2
 581 003f 02       		.byte	0x2
 582 0040 05       		.byte	0x5
 583 0041 33000000 		.4byte	.LASF2
 584 0045 03       		.uleb128 0x3
 585 0046 6C000000 		.4byte	.LASF4
 586 004a 02       		.byte	0x2
 587 004b 2B       		.byte	0x2b
 588 004c 50000000 		.4byte	0x50
 589 0050 02       		.uleb128 0x2
 590 0051 02       		.byte	0x2
 591 0052 07       		.byte	0x7
 592 0053 7D020000 		.4byte	.LASF5
 593 0057 03       		.uleb128 0x3
 594 0058 F0020000 		.4byte	.LASF6
 595 005c 02       		.byte	0x2
 596 005d 3F       		.byte	0x3f
 597 005e 62000000 		.4byte	0x62
 598 0062 02       		.uleb128 0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 31


 599 0063 04       		.byte	0x4
 600 0064 05       		.byte	0x5
 601 0065 5E020000 		.4byte	.LASF7
 602 0069 03       		.uleb128 0x3
 603 006a 5B000000 		.4byte	.LASF8
 604 006e 02       		.byte	0x2
 605 006f 41       		.byte	0x41
 606 0070 74000000 		.4byte	0x74
 607 0074 02       		.uleb128 0x2
 608 0075 04       		.byte	0x4
 609 0076 07       		.byte	0x7
 610 0077 B8020000 		.4byte	.LASF9
 611 007b 02       		.uleb128 0x2
 612 007c 08       		.byte	0x8
 613 007d 05       		.byte	0x5
 614 007e 12010000 		.4byte	.LASF10
 615 0082 02       		.uleb128 0x2
 616 0083 08       		.byte	0x8
 617 0084 07       		.byte	0x7
 618 0085 F5010000 		.4byte	.LASF11
 619 0089 04       		.uleb128 0x4
 620 008a 04       		.byte	0x4
 621 008b 05       		.byte	0x5
 622 008c 696E7400 		.ascii	"int\000"
 623 0090 02       		.uleb128 0x2
 624 0091 04       		.byte	0x4
 625 0092 07       		.byte	0x7
 626 0093 17020000 		.4byte	.LASF12
 627 0097 03       		.uleb128 0x3
 628 0098 90020000 		.4byte	.LASF13
 629 009c 03       		.byte	0x3
 630 009d 20       		.byte	0x20
 631 009e 33000000 		.4byte	0x33
 632 00a2 03       		.uleb128 0x3
 633 00a3 24020000 		.4byte	.LASF14
 634 00a7 03       		.byte	0x3
 635 00a8 24       		.byte	0x24
 636 00a9 45000000 		.4byte	0x45
 637 00ad 03       		.uleb128 0x3
 638 00ae 75020000 		.4byte	.LASF15
 639 00b2 03       		.byte	0x3
 640 00b3 2C       		.byte	0x2c
 641 00b4 57000000 		.4byte	0x57
 642 00b8 03       		.uleb128 0x3
 643 00b9 DF000000 		.4byte	.LASF16
 644 00bd 03       		.byte	0x3
 645 00be 30       		.byte	0x30
 646 00bf 69000000 		.4byte	0x69
 647 00c3 05       		.uleb128 0x5
 648 00c4 D9000000 		.4byte	.LASF17
 649 00c8 04       		.byte	0x4
 650 00c9 E401     		.2byte	0x1e4
 651 00cb 2C000000 		.4byte	0x2c
 652 00cf 02       		.uleb128 0x2
 653 00d0 04       		.byte	0x4
 654 00d1 04       		.byte	0x4
 655 00d2 0C010000 		.4byte	.LASF18
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 32


 656 00d6 02       		.uleb128 0x2
 657 00d7 08       		.byte	0x8
 658 00d8 04       		.byte	0x4
 659 00d9 CA020000 		.4byte	.LASF19
 660 00dd 02       		.uleb128 0x2
 661 00de 01       		.byte	0x1
 662 00df 08       		.byte	0x8
 663 00e0 59020000 		.4byte	.LASF20
 664 00e4 02       		.uleb128 0x2
 665 00e5 08       		.byte	0x8
 666 00e6 04       		.byte	0x4
 667 00e7 98010000 		.4byte	.LASF21
 668 00eb 02       		.uleb128 0x2
 669 00ec 04       		.byte	0x4
 670 00ed 07       		.byte	0x7
 671 00ee 3D000000 		.4byte	.LASF22
 672 00f2 03       		.uleb128 0x3
 673 00f3 20010000 		.4byte	.LASF23
 674 00f7 05       		.byte	0x5
 675 00f8 3F       		.byte	0x3f
 676 00f9 B8000000 		.4byte	0xb8
 677 00fd 06       		.uleb128 0x6
 678 00fe C5000000 		.4byte	.LASF24
 679 0102 0C       		.byte	0xc
 680 0103 06       		.byte	0x6
 681 0104 0E       		.byte	0xe
 682 0105 4C010000 		.4byte	0x14c
 683 0109 07       		.uleb128 0x7
 684 010a 6C3300   		.ascii	"l3\000"
 685 010d 06       		.byte	0x6
 686 010e 0F       		.byte	0xf
 687 010f A2000000 		.4byte	0xa2
 688 0113 00       		.byte	0
 689 0114 07       		.uleb128 0x7
 690 0115 6C3200   		.ascii	"l2\000"
 691 0118 06       		.byte	0x6
 692 0119 10       		.byte	0x10
 693 011a A2000000 		.4byte	0xa2
 694 011e 02       		.byte	0x2
 695 011f 07       		.uleb128 0x7
 696 0120 6C3100   		.ascii	"l1\000"
 697 0123 06       		.byte	0x6
 698 0124 11       		.byte	0x11
 699 0125 A2000000 		.4byte	0xa2
 700 0129 04       		.byte	0x4
 701 012a 07       		.uleb128 0x7
 702 012b 723100   		.ascii	"r1\000"
 703 012e 06       		.byte	0x6
 704 012f 12       		.byte	0x12
 705 0130 A2000000 		.4byte	0xa2
 706 0134 06       		.byte	0x6
 707 0135 07       		.uleb128 0x7
 708 0136 723200   		.ascii	"r2\000"
 709 0139 06       		.byte	0x6
 710 013a 13       		.byte	0x13
 711 013b A2000000 		.4byte	0xa2
 712 013f 08       		.byte	0x8
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 33


 713 0140 07       		.uleb128 0x7
 714 0141 723300   		.ascii	"r3\000"
 715 0144 06       		.byte	0x6
 716 0145 14       		.byte	0x14
 717 0146 A2000000 		.4byte	0xa2
 718 014a 0A       		.byte	0xa
 719 014b 00       		.byte	0
 720 014c 06       		.uleb128 0x6
 721 014d 60010000 		.4byte	.LASF25
 722 0151 06       		.byte	0x6
 723 0152 07       		.byte	0x7
 724 0153 47       		.byte	0x47
 725 0154 7D010000 		.4byte	0x17d
 726 0158 08       		.uleb128 0x8
 727 0159 46000000 		.4byte	.LASF26
 728 015d 07       		.byte	0x7
 729 015e 49       		.byte	0x49
 730 015f 97000000 		.4byte	0x97
 731 0163 00       		.byte	0
 732 0164 08       		.uleb128 0x8
 733 0165 4B000000 		.4byte	.LASF27
 734 0169 07       		.byte	0x7
 735 016a 4A       		.byte	0x4a
 736 016b 97000000 		.4byte	0x97
 737 016f 02       		.byte	0x2
 738 0170 08       		.uleb128 0x8
 739 0171 50000000 		.4byte	.LASF28
 740 0175 07       		.byte	0x7
 741 0176 4B       		.byte	0x4b
 742 0177 97000000 		.4byte	0x97
 743 017b 04       		.byte	0x4
 744 017c 00       		.byte	0
 745 017d 09       		.uleb128 0x9
 746 017e CE000000 		.4byte	.LASF31
 747 0182 01       		.byte	0x1
 748 0183 BD03     		.2byte	0x3bd
 749 0185 00000000 		.4byte	.LFB85
 750 0189 28000000 		.4byte	.LFE85-.LFB85
 751 018d 01       		.uleb128 0x1
 752 018e 9C       		.byte	0x9c
 753 018f 12020000 		.4byte	0x212
 754 0193 0A       		.uleb128 0xa
 755 0194 2D020000 		.4byte	.LASF29
 756 0198 01       		.byte	0x1
 757 0199 BD03     		.2byte	0x3bd
 758 019b C3000000 		.4byte	0xc3
 759 019f 00000000 		.4byte	.LLST0
 760 01a3 0A       		.uleb128 0xa
 761 01a4 66000000 		.4byte	.LASF30
 762 01a8 01       		.byte	0x1
 763 01a9 BD03     		.2byte	0x3bd
 764 01ab 89000000 		.4byte	0x89
 765 01af 21000000 		.4byte	.LLST1
 766 01b3 0B       		.uleb128 0xb
 767 01b4 0C000000 		.4byte	.LVL2
 768 01b8 B0070000 		.4byte	0x7b0
 769 01bc C6010000 		.4byte	0x1c6
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 34


 770 01c0 0C       		.uleb128 0xc
 771 01c1 01       		.uleb128 0x1
 772 01c2 50       		.byte	0x50
 773 01c3 01       		.uleb128 0x1
 774 01c4 30       		.byte	0x30
 775 01c5 00       		.byte	0
 776 01c6 0B       		.uleb128 0xb
 777 01c7 12000000 		.4byte	.LVL3
 778 01cb BB070000 		.4byte	0x7bb
 779 01cf D9010000 		.4byte	0x1d9
 780 01d3 0C       		.uleb128 0xc
 781 01d4 01       		.uleb128 0x1
 782 01d5 50       		.byte	0x50
 783 01d6 01       		.uleb128 0x1
 784 01d7 30       		.byte	0x30
 785 01d8 00       		.byte	0
 786 01d9 0B       		.uleb128 0xb
 787 01da 18000000 		.4byte	.LVL4
 788 01de C6070000 		.4byte	0x7c6
 789 01e2 ED010000 		.4byte	0x1ed
 790 01e6 0C       		.uleb128 0xc
 791 01e7 01       		.uleb128 0x1
 792 01e8 50       		.byte	0x50
 793 01e9 02       		.uleb128 0x2
 794 01ea 74       		.byte	0x74
 795 01eb 00       		.sleb128 0
 796 01ec 00       		.byte	0
 797 01ed 0B       		.uleb128 0xb
 798 01ee 20000000 		.4byte	.LVL5
 799 01f2 D1070000 		.4byte	0x7d1
 800 01f6 01020000 		.4byte	0x201
 801 01fa 0C       		.uleb128 0xc
 802 01fb 01       		.uleb128 0x1
 803 01fc 50       		.byte	0x50
 804 01fd 02       		.uleb128 0x2
 805 01fe 74       		.byte	0x74
 806 01ff 79       		.sleb128 -7
 807 0200 00       		.byte	0
 808 0201 0D       		.uleb128 0xd
 809 0202 26000000 		.4byte	.LVL6
 810 0206 DC070000 		.4byte	0x7dc
 811 020a 0C       		.uleb128 0xc
 812 020b 01       		.uleb128 0x1
 813 020c 50       		.byte	0x50
 814 020d 02       		.uleb128 0x2
 815 020e 75       		.byte	0x75
 816 020f 00       		.sleb128 0
 817 0210 00       		.byte	0
 818 0211 00       		.byte	0
 819 0212 09       		.uleb128 0x9
 820 0213 0F000000 		.4byte	.LASF32
 821 0217 01       		.byte	0x1
 822 0218 C703     		.2byte	0x3c7
 823 021a 00000000 		.4byte	.LFB86
 824 021e 28000000 		.4byte	.LFE86-.LFB86
 825 0222 01       		.uleb128 0x1
 826 0223 9C       		.byte	0x9c
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 35


 827 0224 B7020000 		.4byte	0x2b7
 828 0228 0A       		.uleb128 0xa
 829 0229 1D000000 		.4byte	.LASF33
 830 022d 01       		.byte	0x1
 831 022e C703     		.2byte	0x3c7
 832 0230 C3000000 		.4byte	0xc3
 833 0234 3F000000 		.4byte	.LLST2
 834 0238 0A       		.uleb128 0xa
 835 0239 9A030000 		.4byte	.LASF34
 836 023d 01       		.byte	0x1
 837 023e C703     		.2byte	0x3c7
 838 0240 C3000000 		.4byte	0xc3
 839 0244 60000000 		.4byte	.LLST3
 840 0248 0A       		.uleb128 0xa
 841 0249 66000000 		.4byte	.LASF30
 842 024d 01       		.byte	0x1
 843 024e C703     		.2byte	0x3c7
 844 0250 89000000 		.4byte	0x89
 845 0254 81000000 		.4byte	.LLST4
 846 0258 0B       		.uleb128 0xb
 847 0259 0E000000 		.4byte	.LVL9
 848 025d B0070000 		.4byte	0x7b0
 849 0261 6B020000 		.4byte	0x26b
 850 0265 0C       		.uleb128 0xc
 851 0266 01       		.uleb128 0x1
 852 0267 50       		.byte	0x50
 853 0268 01       		.uleb128 0x1
 854 0269 31       		.byte	0x31
 855 026a 00       		.byte	0
 856 026b 0B       		.uleb128 0xb
 857 026c 14000000 		.4byte	.LVL10
 858 0270 BB070000 		.4byte	0x7bb
 859 0274 7E020000 		.4byte	0x27e
 860 0278 0C       		.uleb128 0xc
 861 0279 01       		.uleb128 0x1
 862 027a 50       		.byte	0x50
 863 027b 01       		.uleb128 0x1
 864 027c 30       		.byte	0x30
 865 027d 00       		.byte	0
 866 027e 0B       		.uleb128 0xb
 867 027f 1A000000 		.4byte	.LVL11
 868 0283 C6070000 		.4byte	0x7c6
 869 0287 92020000 		.4byte	0x292
 870 028b 0C       		.uleb128 0xc
 871 028c 01       		.uleb128 0x1
 872 028d 50       		.byte	0x50
 873 028e 02       		.uleb128 0x2
 874 028f 76       		.byte	0x76
 875 0290 00       		.sleb128 0
 876 0291 00       		.byte	0
 877 0292 0B       		.uleb128 0xb
 878 0293 20000000 		.4byte	.LVL12
 879 0297 D1070000 		.4byte	0x7d1
 880 029b A6020000 		.4byte	0x2a6
 881 029f 0C       		.uleb128 0xc
 882 02a0 01       		.uleb128 0x1
 883 02a1 50       		.byte	0x50
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 36


 884 02a2 02       		.uleb128 0x2
 885 02a3 75       		.byte	0x75
 886 02a4 00       		.sleb128 0
 887 02a5 00       		.byte	0
 888 02a6 0D       		.uleb128 0xd
 889 02a7 26000000 		.4byte	.LVL13
 890 02ab DC070000 		.4byte	0x7dc
 891 02af 0C       		.uleb128 0xc
 892 02b0 01       		.uleb128 0x1
 893 02b1 50       		.byte	0x50
 894 02b2 02       		.uleb128 0x2
 895 02b3 74       		.byte	0x74
 896 02b4 00       		.sleb128 0
 897 02b5 00       		.byte	0
 898 02b6 00       		.byte	0
 899 02b7 09       		.uleb128 0x9
 900 02b8 00000000 		.4byte	.LASF35
 901 02bc 01       		.byte	0x1
 902 02bd D103     		.2byte	0x3d1
 903 02bf 00000000 		.4byte	.LFB87
 904 02c3 28000000 		.4byte	.LFE87-.LFB87
 905 02c7 01       		.uleb128 0x1
 906 02c8 9C       		.byte	0x9c
 907 02c9 5C030000 		.4byte	0x35c
 908 02cd 0A       		.uleb128 0xa
 909 02ce 1D000000 		.4byte	.LASF33
 910 02d2 01       		.byte	0x1
 911 02d3 D103     		.2byte	0x3d1
 912 02d5 C3000000 		.4byte	0xc3
 913 02d9 9F000000 		.4byte	.LLST5
 914 02dd 0A       		.uleb128 0xa
 915 02de 9A030000 		.4byte	.LASF34
 916 02e2 01       		.byte	0x1
 917 02e3 D103     		.2byte	0x3d1
 918 02e5 C3000000 		.4byte	0xc3
 919 02e9 C0000000 		.4byte	.LLST6
 920 02ed 0A       		.uleb128 0xa
 921 02ee 66000000 		.4byte	.LASF30
 922 02f2 01       		.byte	0x1
 923 02f3 D103     		.2byte	0x3d1
 924 02f5 89000000 		.4byte	0x89
 925 02f9 E1000000 		.4byte	.LLST7
 926 02fd 0B       		.uleb128 0xb
 927 02fe 0E000000 		.4byte	.LVL16
 928 0302 B0070000 		.4byte	0x7b0
 929 0306 10030000 		.4byte	0x310
 930 030a 0C       		.uleb128 0xc
 931 030b 01       		.uleb128 0x1
 932 030c 50       		.byte	0x50
 933 030d 01       		.uleb128 0x1
 934 030e 30       		.byte	0x30
 935 030f 00       		.byte	0
 936 0310 0B       		.uleb128 0xb
 937 0311 14000000 		.4byte	.LVL17
 938 0315 BB070000 		.4byte	0x7bb
 939 0319 23030000 		.4byte	0x323
 940 031d 0C       		.uleb128 0xc
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 37


 941 031e 01       		.uleb128 0x1
 942 031f 50       		.byte	0x50
 943 0320 01       		.uleb128 0x1
 944 0321 31       		.byte	0x31
 945 0322 00       		.byte	0
 946 0323 0B       		.uleb128 0xb
 947 0324 1A000000 		.4byte	.LVL18
 948 0328 C6070000 		.4byte	0x7c6
 949 032c 37030000 		.4byte	0x337
 950 0330 0C       		.uleb128 0xc
 951 0331 01       		.uleb128 0x1
 952 0332 50       		.byte	0x50
 953 0333 02       		.uleb128 0x2
 954 0334 76       		.byte	0x76
 955 0335 00       		.sleb128 0
 956 0336 00       		.byte	0
 957 0337 0B       		.uleb128 0xb
 958 0338 20000000 		.4byte	.LVL19
 959 033c D1070000 		.4byte	0x7d1
 960 0340 4B030000 		.4byte	0x34b
 961 0344 0C       		.uleb128 0xc
 962 0345 01       		.uleb128 0x1
 963 0346 50       		.byte	0x50
 964 0347 02       		.uleb128 0x2
 965 0348 75       		.byte	0x75
 966 0349 00       		.sleb128 0
 967 034a 00       		.byte	0
 968 034b 0D       		.uleb128 0xd
 969 034c 26000000 		.4byte	.LVL20
 970 0350 DC070000 		.4byte	0x7dc
 971 0354 0C       		.uleb128 0xc
 972 0355 01       		.uleb128 0x1
 973 0356 50       		.byte	0x50
 974 0357 02       		.uleb128 0x2
 975 0358 74       		.byte	0x74
 976 0359 00       		.sleb128 0
 977 035a 00       		.byte	0
 978 035b 00       		.byte	0
 979 035c 0E       		.uleb128 0xe
 980 035d EA020000 		.4byte	.LASF63
 981 0361 01       		.byte	0x1
 982 0362 DE03     		.2byte	0x3de
 983 0364 00000000 		.4byte	.LFB88
 984 0368 1C020000 		.4byte	.LFE88-.LFB88
 985 036c 01       		.uleb128 0x1
 986 036d 9C       		.byte	0x9c
 987 036e 9F070000 		.4byte	0x79f
 988 0372 0F       		.uleb128 0xf
 989 0373 A3020000 		.4byte	.LASF36
 990 0377 01       		.byte	0x1
 991 0378 E103     		.2byte	0x3e1
 992 037a 4C010000 		.4byte	0x14c
 993 037e 02       		.uleb128 0x2
 994 037f 91       		.byte	0x91
 995 0380 68       		.sleb128 -24
 996 0381 10       		.uleb128 0x10
 997 0382 64696700 		.ascii	"dig\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 38


 998 0386 01       		.byte	0x1
 999 0387 E503     		.2byte	0x3e5
 1000 0389 FD000000 		.4byte	0xfd
 1001 038d 02       		.uleb128 0x2
 1002 038e 91       		.byte	0x91
 1003 038f 5C       		.sleb128 -36
 1004 0390 11       		.uleb128 0x11
 1005 0391 33020000 		.4byte	.LASF37
 1006 0395 01       		.byte	0x1
 1007 0396 E603     		.2byte	0x3e6
 1008 0398 F2000000 		.4byte	0xf2
 1009 039c FF000000 		.4byte	.LLST8
 1010 03a0 12       		.uleb128 0x12
 1011 03a1 656E6400 		.ascii	"end\000"
 1012 03a5 01       		.byte	0x1
 1013 03a6 E603     		.2byte	0x3e6
 1014 03a8 F2000000 		.4byte	0xf2
 1015 03ac 28010000 		.4byte	.LLST9
 1016 03b0 12       		.uleb128 0x12
 1017 03b1 68697400 		.ascii	"hit\000"
 1018 03b5 01       		.byte	0x1
 1019 03b6 E603     		.2byte	0x3e6
 1020 03b8 F2000000 		.4byte	0xf2
 1021 03bc 51010000 		.4byte	.LLST10
 1022 03c0 13       		.uleb128 0x13
 1023 03c1 C6010000 		.4byte	.LBB2
 1024 03c5 56000000 		.4byte	.LBE2-.LBB2
 1025 03c9 61040000 		.4byte	0x461
 1026 03cd 11       		.uleb128 0x11
 1027 03ce 55000000 		.4byte	.LASF38
 1028 03d2 01       		.byte	0x1
 1029 03d3 3704     		.2byte	0x437
 1030 03d5 89000000 		.4byte	0x89
 1031 03d9 B2010000 		.4byte	.LLST11
 1032 03dd 0B       		.uleb128 0xb
 1033 03de CE010000 		.4byte	.LVL67
 1034 03e2 E8070000 		.4byte	0x7e8
 1035 03e6 F5030000 		.4byte	0x3f5
 1036 03ea 0C       		.uleb128 0xc
 1037 03eb 01       		.uleb128 0x1
 1038 03ec 50       		.byte	0x50
 1039 03ed 01       		.uleb128 0x1
 1040 03ee 30       		.byte	0x30
 1041 03ef 0C       		.uleb128 0xc
 1042 03f0 01       		.uleb128 0x1
 1043 03f1 51       		.byte	0x51
 1044 03f2 01       		.uleb128 0x1
 1045 03f3 30       		.byte	0x30
 1046 03f4 00       		.byte	0
 1047 03f5 14       		.uleb128 0x14
 1048 03f6 D2010000 		.4byte	.LVL68
 1049 03fa F3070000 		.4byte	0x7f3
 1050 03fe 0B       		.uleb128 0xb
 1051 03ff E0010000 		.4byte	.LVL72
 1052 0403 FF070000 		.4byte	0x7ff
 1053 0407 21040000 		.4byte	0x421
 1054 040b 0C       		.uleb128 0xc
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 39


 1055 040c 01       		.uleb128 0x1
 1056 040d 50       		.byte	0x50
 1057 040e 05       		.uleb128 0x5
 1058 040f 03       		.byte	0x3
 1059 0410 48000000 		.4byte	.LC6
 1060 0414 0C       		.uleb128 0xc
 1061 0415 01       		.uleb128 0x1
 1062 0416 51       		.byte	0x51
 1063 0417 02       		.uleb128 0x2
 1064 0418 74       		.byte	0x74
 1065 0419 00       		.sleb128 0
 1066 041a 0C       		.uleb128 0xc
 1067 041b 01       		.uleb128 0x1
 1068 041c 52       		.byte	0x52
 1069 041d 02       		.uleb128 0x2
 1070 041e 76       		.byte	0x76
 1071 041f 00       		.sleb128 0
 1072 0420 00       		.byte	0
 1073 0421 0B       		.uleb128 0xb
 1074 0422 EA010000 		.4byte	.LVL74
 1075 0426 FF070000 		.4byte	0x7ff
 1076 042a 47040000 		.4byte	0x447
 1077 042e 0C       		.uleb128 0xc
 1078 042f 01       		.uleb128 0x1
 1079 0430 50       		.byte	0x50
 1080 0431 05       		.uleb128 0x5
 1081 0432 03       		.byte	0x3
 1082 0433 58000000 		.4byte	.LC7
 1083 0437 0C       		.uleb128 0xc
 1084 0438 01       		.uleb128 0x1
 1085 0439 51       		.byte	0x51
 1086 043a 02       		.uleb128 0x2
 1087 043b 74       		.byte	0x74
 1088 043c 00       		.sleb128 0
 1089 043d 0C       		.uleb128 0xc
 1090 043e 01       		.uleb128 0x1
 1091 043f 52       		.byte	0x52
 1092 0440 05       		.uleb128 0x5
 1093 0441 76       		.byte	0x76
 1094 0442 00       		.sleb128 0
 1095 0443 75       		.byte	0x75
 1096 0444 00       		.sleb128 0
 1097 0445 1C       		.byte	0x1c
 1098 0446 00       		.byte	0
 1099 0447 14       		.uleb128 0x14
 1100 0448 EE010000 		.4byte	.LVL75
 1101 044c 0A080000 		.4byte	0x80a
 1102 0450 0D       		.uleb128 0xd
 1103 0451 F4010000 		.4byte	.LVL76
 1104 0455 DC070000 		.4byte	0x7dc
 1105 0459 0C       		.uleb128 0xc
 1106 045a 01       		.uleb128 0x1
 1107 045b 50       		.byte	0x50
 1108 045c 02       		.uleb128 0x2
 1109 045d 08       		.byte	0x8
 1110 045e 64       		.byte	0x64
 1111 045f 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 40


 1112 0460 00       		.byte	0
 1113 0461 14       		.uleb128 0x14
 1114 0462 08000000 		.4byte	.LVL21
 1115 0466 15080000 		.4byte	0x815
 1116 046a 14       		.uleb128 0x14
 1117 046b 0C000000 		.4byte	.LVL22
 1118 046f 20080000 		.4byte	0x820
 1119 0473 14       		.uleb128 0x14
 1120 0474 10000000 		.4byte	.LVL23
 1121 0478 2B080000 		.4byte	0x82b
 1122 047c 0B       		.uleb128 0xb
 1123 047d 2A000000 		.4byte	.LVL24
 1124 0481 36080000 		.4byte	0x836
 1125 0485 B6040000 		.4byte	0x4b6
 1126 0489 0C       		.uleb128 0xc
 1127 048a 01       		.uleb128 0x1
 1128 048b 50       		.byte	0x50
 1129 048c 03       		.uleb128 0x3
 1130 048d 0A       		.byte	0xa
 1131 048e 2823     		.2byte	0x2328
 1132 0490 0C       		.uleb128 0xc
 1133 0491 01       		.uleb128 0x1
 1134 0492 51       		.byte	0x51
 1135 0493 03       		.uleb128 0x3
 1136 0494 0A       		.byte	0xa
 1137 0495 2823     		.2byte	0x2328
 1138 0497 0C       		.uleb128 0xc
 1139 0498 01       		.uleb128 0x1
 1140 0499 52       		.byte	0x52
 1141 049a 03       		.uleb128 0x3
 1142 049b 0A       		.byte	0xa
 1143 049c 2823     		.2byte	0x2328
 1144 049e 0C       		.uleb128 0xc
 1145 049f 01       		.uleb128 0x1
 1146 04a0 53       		.byte	0x53
 1147 04a1 03       		.uleb128 0x3
 1148 04a2 0A       		.byte	0xa
 1149 04a3 2823     		.2byte	0x2328
 1150 04a5 0C       		.uleb128 0xc
 1151 04a6 02       		.uleb128 0x2
 1152 04a7 7D       		.byte	0x7d
 1153 04a8 00       		.sleb128 0
 1154 04a9 03       		.uleb128 0x3
 1155 04aa 0A       		.byte	0xa
 1156 04ab F82A     		.2byte	0x2af8
 1157 04ad 0C       		.uleb128 0xc
 1158 04ae 02       		.uleb128 0x2
 1159 04af 7D       		.byte	0x7d
 1160 04b0 04       		.sleb128 4
 1161 04b1 03       		.uleb128 0x3
 1162 04b2 0A       		.byte	0xa
 1163 04b3 C832     		.2byte	0x32c8
 1164 04b5 00       		.byte	0
 1165 04b6 14       		.uleb128 0x14
 1166 04b7 2E000000 		.4byte	.LVL25
 1167 04bb 41080000 		.4byte	0x841
 1168 04bf 0B       		.uleb128 0xb
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 41


 1169 04c0 36000000 		.4byte	.LVL26
 1170 04c4 E8070000 		.4byte	0x7e8
 1171 04c8 D7040000 		.4byte	0x4d7
 1172 04cc 0C       		.uleb128 0xc
 1173 04cd 01       		.uleb128 0x1
 1174 04ce 50       		.byte	0x50
 1175 04cf 01       		.uleb128 0x1
 1176 04d0 30       		.byte	0x30
 1177 04d1 0C       		.uleb128 0xc
 1178 04d2 01       		.uleb128 0x1
 1179 04d3 51       		.byte	0x51
 1180 04d4 01       		.uleb128 0x1
 1181 04d5 30       		.byte	0x30
 1182 04d6 00       		.byte	0
 1183 04d7 14       		.uleb128 0x14
 1184 04d8 3A000000 		.4byte	.LVL27
 1185 04dc 4C080000 		.4byte	0x84c
 1186 04e0 0B       		.uleb128 0xb
 1187 04e1 42000000 		.4byte	.LVL28
 1188 04e5 DC070000 		.4byte	0x7dc
 1189 04e9 F4040000 		.4byte	0x4f4
 1190 04ed 0C       		.uleb128 0xc
 1191 04ee 01       		.uleb128 0x1
 1192 04ef 50       		.byte	0x50
 1193 04f0 02       		.uleb128 0x2
 1194 04f1 08       		.byte	0x8
 1195 04f2 64       		.byte	0x64
 1196 04f3 00       		.byte	0
 1197 04f4 14       		.uleb128 0x14
 1198 04f5 46000000 		.4byte	.LVL29
 1199 04f9 57080000 		.4byte	0x857
 1200 04fd 0B       		.uleb128 0xb
 1201 04fe 52000000 		.4byte	.LVL30
 1202 0502 62080000 		.4byte	0x862
 1203 0506 11050000 		.4byte	0x511
 1204 050a 0C       		.uleb128 0xc
 1205 050b 01       		.uleb128 0x1
 1206 050c 50       		.byte	0x50
 1207 050d 02       		.uleb128 0x2
 1208 050e 91       		.byte	0x91
 1209 050f 5C       		.sleb128 -36
 1210 0510 00       		.byte	0
 1211 0511 0B       		.uleb128 0xb
 1212 0512 5A000000 		.4byte	.LVL31
 1213 0516 7D010000 		.4byte	0x17d
 1214 051a 2A050000 		.4byte	0x52a
 1215 051e 0C       		.uleb128 0xc
 1216 051f 01       		.uleb128 0x1
 1217 0520 50       		.byte	0x50
 1218 0521 02       		.uleb128 0x2
 1219 0522 08       		.byte	0x8
 1220 0523 37       		.byte	0x37
 1221 0524 0C       		.uleb128 0xc
 1222 0525 01       		.uleb128 0x1
 1223 0526 51       		.byte	0x51
 1224 0527 01       		.uleb128 0x1
 1225 0528 3A       		.byte	0x3a
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 42


 1226 0529 00       		.byte	0
 1227 052a 0B       		.uleb128 0xb
 1228 052b 92000000 		.4byte	.LVL32
 1229 052f E8070000 		.4byte	0x7e8
 1230 0533 42050000 		.4byte	0x542
 1231 0537 0C       		.uleb128 0xc
 1232 0538 01       		.uleb128 0x1
 1233 0539 50       		.byte	0x50
 1234 053a 01       		.uleb128 0x1
 1235 053b 30       		.byte	0x30
 1236 053c 0C       		.uleb128 0xc
 1237 053d 01       		.uleb128 0x1
 1238 053e 51       		.byte	0x51
 1239 053f 01       		.uleb128 0x1
 1240 0540 30       		.byte	0x30
 1241 0541 00       		.byte	0
 1242 0542 0B       		.uleb128 0xb
 1243 0543 9A000000 		.4byte	.LVL33
 1244 0547 FF070000 		.4byte	0x7ff
 1245 054b 62050000 		.4byte	0x562
 1246 054f 0C       		.uleb128 0xc
 1247 0550 01       		.uleb128 0x1
 1248 0551 50       		.byte	0x50
 1249 0552 05       		.uleb128 0x5
 1250 0553 03       		.byte	0x3
 1251 0554 08000000 		.4byte	.LC1
 1252 0558 0C       		.uleb128 0xc
 1253 0559 01       		.uleb128 0x1
 1254 055a 51       		.byte	0x51
 1255 055b 05       		.uleb128 0x5
 1256 055c 03       		.byte	0x3
 1257 055d 00000000 		.4byte	.LC0
 1258 0561 00       		.byte	0
 1259 0562 14       		.uleb128 0x14
 1260 0563 9E000000 		.4byte	.LVL34
 1261 0567 6D080000 		.4byte	0x86d
 1262 056b 0B       		.uleb128 0xb
 1263 056c A6000000 		.4byte	.LVL35
 1264 0570 7D010000 		.4byte	0x17d
 1265 0574 85050000 		.4byte	0x585
 1266 0578 0C       		.uleb128 0xc
 1267 0579 01       		.uleb128 0x1
 1268 057a 50       		.byte	0x50
 1269 057b 02       		.uleb128 0x2
 1270 057c 08       		.byte	0x8
 1271 057d 64       		.byte	0x64
 1272 057e 0C       		.uleb128 0xc
 1273 057f 01       		.uleb128 0x1
 1274 0580 51       		.byte	0x51
 1275 0581 02       		.uleb128 0x2
 1276 0582 08       		.byte	0x8
 1277 0583 C8       		.byte	0xc8
 1278 0584 00       		.byte	0
 1279 0585 14       		.uleb128 0x14
 1280 0586 AA000000 		.4byte	.LVL36
 1281 058a F3070000 		.4byte	0x7f3
 1282 058e 0B       		.uleb128 0xb
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 43


 1283 058f B6000000 		.4byte	.LVL39
 1284 0593 FF070000 		.4byte	0x7ff
 1285 0597 B4050000 		.4byte	0x5b4
 1286 059b 0C       		.uleb128 0xc
 1287 059c 01       		.uleb128 0x1
 1288 059d 50       		.byte	0x50
 1289 059e 05       		.uleb128 0x5
 1290 059f 03       		.byte	0x3
 1291 05a0 1C000000 		.4byte	.LC3
 1292 05a4 0C       		.uleb128 0xc
 1293 05a5 01       		.uleb128 0x1
 1294 05a6 51       		.byte	0x51
 1295 05a7 05       		.uleb128 0x5
 1296 05a8 03       		.byte	0x3
 1297 05a9 18000000 		.4byte	.LC2
 1298 05ad 0C       		.uleb128 0xc
 1299 05ae 01       		.uleb128 0x1
 1300 05af 52       		.byte	0x52
 1301 05b0 02       		.uleb128 0x2
 1302 05b1 75       		.byte	0x75
 1303 05b2 00       		.sleb128 0
 1304 05b3 00       		.byte	0
 1305 05b4 0B       		.uleb128 0xb
 1306 05b5 C0000000 		.4byte	.LVL41
 1307 05b9 7D010000 		.4byte	0x17d
 1308 05bd CD050000 		.4byte	0x5cd
 1309 05c1 0C       		.uleb128 0xc
 1310 05c2 01       		.uleb128 0x1
 1311 05c3 50       		.byte	0x50
 1312 05c4 02       		.uleb128 0x2
 1313 05c5 08       		.byte	0x8
 1314 05c6 64       		.byte	0x64
 1315 05c7 0C       		.uleb128 0xc
 1316 05c8 01       		.uleb128 0x1
 1317 05c9 51       		.byte	0x51
 1318 05ca 01       		.uleb128 0x1
 1319 05cb 35       		.byte	0x35
 1320 05cc 00       		.byte	0
 1321 05cd 0B       		.uleb128 0xb
 1322 05ce C6000000 		.4byte	.LVL42
 1323 05d2 78080000 		.4byte	0x878
 1324 05d6 E1050000 		.4byte	0x5e1
 1325 05da 0C       		.uleb128 0xc
 1326 05db 01       		.uleb128 0x1
 1327 05dc 50       		.byte	0x50
 1328 05dd 02       		.uleb128 0x2
 1329 05de 91       		.byte	0x91
 1330 05df 68       		.sleb128 -24
 1331 05e0 00       		.byte	0
 1332 05e1 0B       		.uleb128 0xb
 1333 05e2 CC000000 		.4byte	.LVL43
 1334 05e6 62080000 		.4byte	0x862
 1335 05ea F5050000 		.4byte	0x5f5
 1336 05ee 0C       		.uleb128 0xc
 1337 05ef 01       		.uleb128 0x1
 1338 05f0 50       		.byte	0x50
 1339 05f1 02       		.uleb128 0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 44


 1340 05f2 91       		.byte	0x91
 1341 05f3 5C       		.sleb128 -36
 1342 05f4 00       		.byte	0
 1343 05f5 14       		.uleb128 0x14
 1344 05f6 F2000000 		.4byte	.LVL44
 1345 05fa F3070000 		.4byte	0x7f3
 1346 05fe 14       		.uleb128 0x14
 1347 05ff FC000000 		.4byte	.LVL45
 1348 0603 F3070000 		.4byte	0x7f3
 1349 0607 0B       		.uleb128 0xb
 1350 0608 08010000 		.4byte	.LVL48
 1351 060c FF070000 		.4byte	0x7ff
 1352 0610 2D060000 		.4byte	0x62d
 1353 0614 0C       		.uleb128 0xc
 1354 0615 01       		.uleb128 0x1
 1355 0616 50       		.byte	0x50
 1356 0617 05       		.uleb128 0x5
 1357 0618 03       		.byte	0x3
 1358 0619 2C000000 		.4byte	.LC4
 1359 061d 0C       		.uleb128 0xc
 1360 061e 01       		.uleb128 0x1
 1361 061f 51       		.byte	0x51
 1362 0620 05       		.uleb128 0x5
 1363 0621 03       		.byte	0x3
 1364 0622 18000000 		.4byte	.LC2
 1365 0626 0C       		.uleb128 0xc
 1366 0627 01       		.uleb128 0x1
 1367 0628 52       		.byte	0x52
 1368 0629 02       		.uleb128 0x2
 1369 062a 74       		.byte	0x74
 1370 062b 00       		.sleb128 0
 1371 062c 00       		.byte	0
 1372 062d 0B       		.uleb128 0xb
 1373 062e 14010000 		.4byte	.LVL49
 1374 0632 12020000 		.4byte	0x212
 1375 0636 4E060000 		.4byte	0x64e
 1376 063a 0C       		.uleb128 0xc
 1377 063b 01       		.uleb128 0x1
 1378 063c 50       		.byte	0x50
 1379 063d 02       		.uleb128 0x2
 1380 063e 09       		.byte	0x9
 1381 063f FF       		.byte	0xff
 1382 0640 0C       		.uleb128 0xc
 1383 0641 01       		.uleb128 0x1
 1384 0642 51       		.byte	0x51
 1385 0643 02       		.uleb128 0x2
 1386 0644 09       		.byte	0x9
 1387 0645 FF       		.byte	0xff
 1388 0646 0C       		.uleb128 0xc
 1389 0647 01       		.uleb128 0x1
 1390 0648 52       		.byte	0x52
 1391 0649 03       		.uleb128 0x3
 1392 064a 0A       		.byte	0xa
 1393 064b 2C01     		.2byte	0x12c
 1394 064d 00       		.byte	0
 1395 064e 0B       		.uleb128 0xb
 1396 064f 1C010000 		.4byte	.LVL50
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 45


 1397 0653 E8070000 		.4byte	0x7e8
 1398 0657 66060000 		.4byte	0x666
 1399 065b 0C       		.uleb128 0xc
 1400 065c 01       		.uleb128 0x1
 1401 065d 50       		.byte	0x50
 1402 065e 01       		.uleb128 0x1
 1403 065f 30       		.byte	0x30
 1404 0660 0C       		.uleb128 0xc
 1405 0661 01       		.uleb128 0x1
 1406 0662 51       		.byte	0x51
 1407 0663 01       		.uleb128 0x1
 1408 0664 30       		.byte	0x30
 1409 0665 00       		.byte	0
 1410 0666 0B       		.uleb128 0xb
 1411 0667 24010000 		.4byte	.LVL51
 1412 066b 7D010000 		.4byte	0x17d
 1413 066f 80060000 		.4byte	0x680
 1414 0673 0C       		.uleb128 0xc
 1415 0674 01       		.uleb128 0x1
 1416 0675 50       		.byte	0x50
 1417 0676 02       		.uleb128 0x2
 1418 0677 09       		.byte	0x9
 1419 0678 FF       		.byte	0xff
 1420 0679 0C       		.uleb128 0xc
 1421 067a 01       		.uleb128 0x1
 1422 067b 51       		.byte	0x51
 1423 067c 02       		.uleb128 0x2
 1424 067d 08       		.byte	0x8
 1425 067e 64       		.byte	0x64
 1426 067f 00       		.byte	0
 1427 0680 0B       		.uleb128 0xb
 1428 0681 2C010000 		.4byte	.LVL52
 1429 0685 7D010000 		.4byte	0x17d
 1430 0689 9A060000 		.4byte	0x69a
 1431 068d 0C       		.uleb128 0xc
 1432 068e 01       		.uleb128 0x1
 1433 068f 50       		.byte	0x50
 1434 0690 02       		.uleb128 0x2
 1435 0691 08       		.byte	0x8
 1436 0692 64       		.byte	0x64
 1437 0693 0C       		.uleb128 0xc
 1438 0694 01       		.uleb128 0x1
 1439 0695 51       		.byte	0x51
 1440 0696 02       		.uleb128 0x2
 1441 0697 08       		.byte	0x8
 1442 0698 64       		.byte	0x64
 1443 0699 00       		.byte	0
 1444 069a 14       		.uleb128 0x14
 1445 069b 30010000 		.4byte	.LVL53
 1446 069f 83080000 		.4byte	0x883
 1447 06a3 0B       		.uleb128 0xb
 1448 06a4 3E010000 		.4byte	.LVL54
 1449 06a8 7D010000 		.4byte	0x17d
 1450 06ac BE060000 		.4byte	0x6be
 1451 06b0 0C       		.uleb128 0xc
 1452 06b1 01       		.uleb128 0x1
 1453 06b2 50       		.byte	0x50
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 46


 1454 06b3 02       		.uleb128 0x2
 1455 06b4 09       		.byte	0x9
 1456 06b5 FF       		.byte	0xff
 1457 06b6 0C       		.uleb128 0xc
 1458 06b7 01       		.uleb128 0x1
 1459 06b8 51       		.byte	0x51
 1460 06b9 03       		.uleb128 0x3
 1461 06ba 0A       		.byte	0xa
 1462 06bb 2C01     		.2byte	0x12c
 1463 06bd 00       		.byte	0
 1464 06be 0B       		.uleb128 0xb
 1465 06bf 46010000 		.4byte	.LVL55
 1466 06c3 7D010000 		.4byte	0x17d
 1467 06c7 D8060000 		.4byte	0x6d8
 1468 06cb 0C       		.uleb128 0xc
 1469 06cc 01       		.uleb128 0x1
 1470 06cd 50       		.byte	0x50
 1471 06ce 02       		.uleb128 0x2
 1472 06cf 08       		.byte	0x8
 1473 06d0 64       		.byte	0x64
 1474 06d1 0C       		.uleb128 0xc
 1475 06d2 01       		.uleb128 0x1
 1476 06d3 51       		.byte	0x51
 1477 06d4 02       		.uleb128 0x2
 1478 06d5 08       		.byte	0x8
 1479 06d6 64       		.byte	0x64
 1480 06d7 00       		.byte	0
 1481 06d8 14       		.uleb128 0x14
 1482 06d9 4A010000 		.4byte	.LVL56
 1483 06dd F3070000 		.4byte	0x7f3
 1484 06e1 14       		.uleb128 0x14
 1485 06e2 54010000 		.4byte	.LVL57
 1486 06e6 F3070000 		.4byte	0x7f3
 1487 06ea 0B       		.uleb128 0xb
 1488 06eb 60010000 		.4byte	.LVL60
 1489 06ef FF070000 		.4byte	0x7ff
 1490 06f3 10070000 		.4byte	0x710
 1491 06f7 0C       		.uleb128 0xc
 1492 06f8 01       		.uleb128 0x1
 1493 06f9 50       		.byte	0x50
 1494 06fa 05       		.uleb128 0x5
 1495 06fb 03       		.byte	0x3
 1496 06fc 3C000000 		.4byte	.LC5
 1497 0700 0C       		.uleb128 0xc
 1498 0701 01       		.uleb128 0x1
 1499 0702 51       		.byte	0x51
 1500 0703 05       		.uleb128 0x5
 1501 0704 03       		.byte	0x3
 1502 0705 18000000 		.4byte	.LC2
 1503 0709 0C       		.uleb128 0xc
 1504 070a 01       		.uleb128 0x1
 1505 070b 52       		.byte	0x52
 1506 070c 02       		.uleb128 0x2
 1507 070d 74       		.byte	0x74
 1508 070e 00       		.sleb128 0
 1509 070f 00       		.byte	0
 1510 0710 0B       		.uleb128 0xb
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 47


 1511 0711 98010000 		.4byte	.LVL61
 1512 0715 8E080000 		.4byte	0x88e
 1513 0719 2A070000 		.4byte	0x72a
 1514 071d 0C       		.uleb128 0xc
 1515 071e 01       		.uleb128 0x1
 1516 071f 50       		.byte	0x50
 1517 0720 02       		.uleb128 0x2
 1518 0721 08       		.byte	0x8
 1519 0722 64       		.byte	0x64
 1520 0723 0C       		.uleb128 0xc
 1521 0724 01       		.uleb128 0x1
 1522 0725 51       		.byte	0x51
 1523 0726 02       		.uleb128 0x2
 1524 0727 08       		.byte	0x8
 1525 0728 C8       		.byte	0xc8
 1526 0729 00       		.byte	0
 1527 072a 0B       		.uleb128 0xb
 1528 072b A0010000 		.4byte	.LVL62
 1529 072f E8070000 		.4byte	0x7e8
 1530 0733 42070000 		.4byte	0x742
 1531 0737 0C       		.uleb128 0xc
 1532 0738 01       		.uleb128 0x1
 1533 0739 50       		.byte	0x50
 1534 073a 01       		.uleb128 0x1
 1535 073b 30       		.byte	0x30
 1536 073c 0C       		.uleb128 0xc
 1537 073d 01       		.uleb128 0x1
 1538 073e 51       		.byte	0x51
 1539 073f 01       		.uleb128 0x1
 1540 0740 30       		.byte	0x30
 1541 0741 00       		.byte	0
 1542 0742 0B       		.uleb128 0xb
 1543 0743 AC010000 		.4byte	.LVL63
 1544 0747 B7020000 		.4byte	0x2b7
 1545 074b 63070000 		.4byte	0x763
 1546 074f 0C       		.uleb128 0xc
 1547 0750 01       		.uleb128 0x1
 1548 0751 50       		.byte	0x50
 1549 0752 02       		.uleb128 0x2
 1550 0753 09       		.byte	0x9
 1551 0754 C8       		.byte	0xc8
 1552 0755 0C       		.uleb128 0xc
 1553 0756 01       		.uleb128 0x1
 1554 0757 51       		.byte	0x51
 1555 0758 02       		.uleb128 0x2
 1556 0759 09       		.byte	0x9
 1557 075a C8       		.byte	0xc8
 1558 075b 0C       		.uleb128 0xc
 1559 075c 01       		.uleb128 0x1
 1560 075d 52       		.byte	0x52
 1561 075e 03       		.uleb128 0x3
 1562 075f 0A       		.byte	0xa
 1563 0760 9001     		.2byte	0x190
 1564 0762 00       		.byte	0
 1565 0763 0B       		.uleb128 0xb
 1566 0764 B4010000 		.4byte	.LVL64
 1567 0768 E8070000 		.4byte	0x7e8
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 48


 1568 076c 7B070000 		.4byte	0x77b
 1569 0770 0C       		.uleb128 0xc
 1570 0771 01       		.uleb128 0x1
 1571 0772 50       		.byte	0x50
 1572 0773 01       		.uleb128 0x1
 1573 0774 30       		.byte	0x30
 1574 0775 0C       		.uleb128 0xc
 1575 0776 01       		.uleb128 0x1
 1576 0777 51       		.byte	0x51
 1577 0778 01       		.uleb128 0x1
 1578 0779 30       		.byte	0x30
 1579 077a 00       		.byte	0
 1580 077b 0B       		.uleb128 0xb
 1581 077c BC010000 		.4byte	.LVL65
 1582 0780 7D010000 		.4byte	0x17d
 1583 0784 95070000 		.4byte	0x795
 1584 0788 0C       		.uleb128 0xc
 1585 0789 01       		.uleb128 0x1
 1586 078a 50       		.byte	0x50
 1587 078b 02       		.uleb128 0x2
 1588 078c 08       		.byte	0x8
 1589 078d 64       		.byte	0x64
 1590 078e 0C       		.uleb128 0xc
 1591 078f 01       		.uleb128 0x1
 1592 0790 51       		.byte	0x51
 1593 0791 02       		.uleb128 0x2
 1594 0792 08       		.byte	0x8
 1595 0793 64       		.byte	0x64
 1596 0794 00       		.byte	0
 1597 0795 14       		.uleb128 0x14
 1598 0796 C0010000 		.4byte	.LVL66
 1599 079a 57080000 		.4byte	0x857
 1600 079e 00       		.byte	0
 1601 079f 15       		.uleb128 0x15
 1602 07a0 DD020000 		.4byte	.LASF64
 1603 07a4 11       		.byte	0x11
 1604 07a5 1207     		.2byte	0x712
 1605 07a7 AB070000 		.4byte	0x7ab
 1606 07ab 16       		.uleb128 0x16
 1607 07ac AD000000 		.4byte	0xad
 1608 07b0 17       		.uleb128 0x17
 1609 07b1 A6030000 		.4byte	.LASF39
 1610 07b5 A6030000 		.4byte	.LASF39
 1611 07b9 08       		.byte	0x8
 1612 07ba 26       		.byte	0x26
 1613 07bb 17       		.uleb128 0x17
 1614 07bc 7B010000 		.4byte	.LASF40
 1615 07c0 7B010000 		.4byte	.LASF40
 1616 07c4 09       		.byte	0x9
 1617 07c5 26       		.byte	0x26
 1618 07c6 17       		.uleb128 0x17
 1619 07c7 2B010000 		.4byte	.LASF41
 1620 07cb 2B010000 		.4byte	.LASF41
 1621 07cf 0A       		.byte	0xa
 1622 07d0 C7       		.byte	0xc7
 1623 07d1 17       		.uleb128 0x17
 1624 07d2 39020000 		.4byte	.LASF42
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 49


 1625 07d6 39020000 		.4byte	.LASF42
 1626 07da 0A       		.byte	0xa
 1627 07db CA       		.byte	0xca
 1628 07dc 18       		.uleb128 0x18
 1629 07dd 0C020000 		.4byte	.LASF43
 1630 07e1 0C020000 		.4byte	.LASF43
 1631 07e5 0B       		.byte	0xb
 1632 07e6 ED02     		.2byte	0x2ed
 1633 07e8 17       		.uleb128 0x17
 1634 07e9 4B020000 		.4byte	.LASF44
 1635 07ed 4B020000 		.4byte	.LASF44
 1636 07f1 0C       		.byte	0xc
 1637 07f2 0F       		.byte	0xf
 1638 07f3 18       		.uleb128 0x18
 1639 07f4 69010000 		.4byte	.LASF45
 1640 07f8 69010000 		.4byte	.LASF45
 1641 07fc 0B       		.byte	0xb
 1642 07fd 3E05     		.2byte	0x53e
 1643 07ff 17       		.uleb128 0x17
 1644 0800 98020000 		.4byte	.LASF46
 1645 0804 98020000 		.4byte	.LASF46
 1646 0808 0D       		.byte	0xd
 1647 0809 07       		.byte	0x7
 1648 080a 17       		.uleb128 0x17
 1649 080b 28000000 		.4byte	.LASF47
 1650 080f 28000000 		.4byte	.LASF47
 1651 0813 0C       		.byte	0xc
 1652 0814 0C       		.byte	0xc
 1653 0815 17       		.uleb128 0x17
 1654 0816 67020000 		.4byte	.LASF48
 1655 081a 67020000 		.4byte	.LASF48
 1656 081e 07       		.byte	0x7
 1657 081f 50       		.byte	0x50
 1658 0820 17       		.uleb128 0x17
 1659 0821 B5010000 		.4byte	.LASF49
 1660 0825 B5010000 		.4byte	.LASF49
 1661 0829 0E       		.byte	0xe
 1662 082a 0A       		.byte	0xa
 1663 082b 17       		.uleb128 0x17
 1664 082c E8000000 		.4byte	.LASF50
 1665 0830 E8000000 		.4byte	.LASF50
 1666 0834 06       		.byte	0x6
 1667 0835 17       		.byte	0x17
 1668 0836 17       		.uleb128 0x17
 1669 0837 CF010000 		.4byte	.LASF51
 1670 083b CF010000 		.4byte	.LASF51
 1671 083f 06       		.byte	0x6
 1672 0840 1A       		.byte	0x1a
 1673 0841 17       		.uleb128 0x17
 1674 0842 D1020000 		.4byte	.LASF52
 1675 0846 D1020000 		.4byte	.LASF52
 1676 084a 0C       		.byte	0xc
 1677 084b 0B       		.byte	0xb
 1678 084c 17       		.uleb128 0x17
 1679 084d 8F010000 		.4byte	.LASF53
 1680 0851 8F010000 		.4byte	.LASF53
 1681 0855 0F       		.byte	0xf
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 50


 1682 0856 11       		.byte	0x11
 1683 0857 17       		.uleb128 0x17
 1684 0858 A8020000 		.4byte	.LASF54
 1685 085c A8020000 		.4byte	.LASF54
 1686 0860 10       		.byte	0x10
 1687 0861 29       		.byte	0x29
 1688 0862 17       		.uleb128 0x17
 1689 0863 3D010000 		.4byte	.LASF55
 1690 0867 3D010000 		.4byte	.LASF55
 1691 086b 06       		.byte	0x6
 1692 086c 19       		.byte	0x19
 1693 086d 17       		.uleb128 0x17
 1694 086e 04030000 		.4byte	.LASF56
 1695 0872 04030000 		.4byte	.LASF56
 1696 0876 0F       		.byte	0xf
 1697 0877 1B       		.byte	0x1b
 1698 0878 17       		.uleb128 0x17
 1699 0879 A4010000 		.4byte	.LASF57
 1700 087d A4010000 		.4byte	.LASF57
 1701 0881 07       		.byte	0x7
 1702 0882 51       		.byte	0x51
 1703 0883 17       		.uleb128 0x17
 1704 0884 FA000000 		.4byte	.LASF58
 1705 0888 FA000000 		.4byte	.LASF58
 1706 088c 0E       		.byte	0xe
 1707 088d 0D       		.byte	0xd
 1708 088e 17       		.uleb128 0x17
 1709 088f 51010000 		.4byte	.LASF59
 1710 0893 51010000 		.4byte	.LASF59
 1711 0897 0C       		.byte	0xc
 1712 0898 15       		.byte	0x15
 1713 0899 00       		.byte	0
 1714              		.section	.debug_abbrev,"",%progbits
 1715              	.Ldebug_abbrev0:
 1716 0000 01       		.uleb128 0x1
 1717 0001 11       		.uleb128 0x11
 1718 0002 01       		.byte	0x1
 1719 0003 25       		.uleb128 0x25
 1720 0004 0E       		.uleb128 0xe
 1721 0005 13       		.uleb128 0x13
 1722 0006 0B       		.uleb128 0xb
 1723 0007 03       		.uleb128 0x3
 1724 0008 0E       		.uleb128 0xe
 1725 0009 1B       		.uleb128 0x1b
 1726 000a 0E       		.uleb128 0xe
 1727 000b 55       		.uleb128 0x55
 1728 000c 17       		.uleb128 0x17
 1729 000d 11       		.uleb128 0x11
 1730 000e 01       		.uleb128 0x1
 1731 000f 10       		.uleb128 0x10
 1732 0010 17       		.uleb128 0x17
 1733 0011 00       		.byte	0
 1734 0012 00       		.byte	0
 1735 0013 02       		.uleb128 0x2
 1736 0014 24       		.uleb128 0x24
 1737 0015 00       		.byte	0
 1738 0016 0B       		.uleb128 0xb
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 51


 1739 0017 0B       		.uleb128 0xb
 1740 0018 3E       		.uleb128 0x3e
 1741 0019 0B       		.uleb128 0xb
 1742 001a 03       		.uleb128 0x3
 1743 001b 0E       		.uleb128 0xe
 1744 001c 00       		.byte	0
 1745 001d 00       		.byte	0
 1746 001e 03       		.uleb128 0x3
 1747 001f 16       		.uleb128 0x16
 1748 0020 00       		.byte	0
 1749 0021 03       		.uleb128 0x3
 1750 0022 0E       		.uleb128 0xe
 1751 0023 3A       		.uleb128 0x3a
 1752 0024 0B       		.uleb128 0xb
 1753 0025 3B       		.uleb128 0x3b
 1754 0026 0B       		.uleb128 0xb
 1755 0027 49       		.uleb128 0x49
 1756 0028 13       		.uleb128 0x13
 1757 0029 00       		.byte	0
 1758 002a 00       		.byte	0
 1759 002b 04       		.uleb128 0x4
 1760 002c 24       		.uleb128 0x24
 1761 002d 00       		.byte	0
 1762 002e 0B       		.uleb128 0xb
 1763 002f 0B       		.uleb128 0xb
 1764 0030 3E       		.uleb128 0x3e
 1765 0031 0B       		.uleb128 0xb
 1766 0032 03       		.uleb128 0x3
 1767 0033 08       		.uleb128 0x8
 1768 0034 00       		.byte	0
 1769 0035 00       		.byte	0
 1770 0036 05       		.uleb128 0x5
 1771 0037 16       		.uleb128 0x16
 1772 0038 00       		.byte	0
 1773 0039 03       		.uleb128 0x3
 1774 003a 0E       		.uleb128 0xe
 1775 003b 3A       		.uleb128 0x3a
 1776 003c 0B       		.uleb128 0xb
 1777 003d 3B       		.uleb128 0x3b
 1778 003e 05       		.uleb128 0x5
 1779 003f 49       		.uleb128 0x49
 1780 0040 13       		.uleb128 0x13
 1781 0041 00       		.byte	0
 1782 0042 00       		.byte	0
 1783 0043 06       		.uleb128 0x6
 1784 0044 13       		.uleb128 0x13
 1785 0045 01       		.byte	0x1
 1786 0046 03       		.uleb128 0x3
 1787 0047 0E       		.uleb128 0xe
 1788 0048 0B       		.uleb128 0xb
 1789 0049 0B       		.uleb128 0xb
 1790 004a 3A       		.uleb128 0x3a
 1791 004b 0B       		.uleb128 0xb
 1792 004c 3B       		.uleb128 0x3b
 1793 004d 0B       		.uleb128 0xb
 1794 004e 01       		.uleb128 0x1
 1795 004f 13       		.uleb128 0x13
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 52


 1796 0050 00       		.byte	0
 1797 0051 00       		.byte	0
 1798 0052 07       		.uleb128 0x7
 1799 0053 0D       		.uleb128 0xd
 1800 0054 00       		.byte	0
 1801 0055 03       		.uleb128 0x3
 1802 0056 08       		.uleb128 0x8
 1803 0057 3A       		.uleb128 0x3a
 1804 0058 0B       		.uleb128 0xb
 1805 0059 3B       		.uleb128 0x3b
 1806 005a 0B       		.uleb128 0xb
 1807 005b 49       		.uleb128 0x49
 1808 005c 13       		.uleb128 0x13
 1809 005d 38       		.uleb128 0x38
 1810 005e 0B       		.uleb128 0xb
 1811 005f 00       		.byte	0
 1812 0060 00       		.byte	0
 1813 0061 08       		.uleb128 0x8
 1814 0062 0D       		.uleb128 0xd
 1815 0063 00       		.byte	0
 1816 0064 03       		.uleb128 0x3
 1817 0065 0E       		.uleb128 0xe
 1818 0066 3A       		.uleb128 0x3a
 1819 0067 0B       		.uleb128 0xb
 1820 0068 3B       		.uleb128 0x3b
 1821 0069 0B       		.uleb128 0xb
 1822 006a 49       		.uleb128 0x49
 1823 006b 13       		.uleb128 0x13
 1824 006c 38       		.uleb128 0x38
 1825 006d 0B       		.uleb128 0xb
 1826 006e 00       		.byte	0
 1827 006f 00       		.byte	0
 1828 0070 09       		.uleb128 0x9
 1829 0071 2E       		.uleb128 0x2e
 1830 0072 01       		.byte	0x1
 1831 0073 3F       		.uleb128 0x3f
 1832 0074 19       		.uleb128 0x19
 1833 0075 03       		.uleb128 0x3
 1834 0076 0E       		.uleb128 0xe
 1835 0077 3A       		.uleb128 0x3a
 1836 0078 0B       		.uleb128 0xb
 1837 0079 3B       		.uleb128 0x3b
 1838 007a 05       		.uleb128 0x5
 1839 007b 27       		.uleb128 0x27
 1840 007c 19       		.uleb128 0x19
 1841 007d 11       		.uleb128 0x11
 1842 007e 01       		.uleb128 0x1
 1843 007f 12       		.uleb128 0x12
 1844 0080 06       		.uleb128 0x6
 1845 0081 40       		.uleb128 0x40
 1846 0082 18       		.uleb128 0x18
 1847 0083 9742     		.uleb128 0x2117
 1848 0085 19       		.uleb128 0x19
 1849 0086 01       		.uleb128 0x1
 1850 0087 13       		.uleb128 0x13
 1851 0088 00       		.byte	0
 1852 0089 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 53


 1853 008a 0A       		.uleb128 0xa
 1854 008b 05       		.uleb128 0x5
 1855 008c 00       		.byte	0
 1856 008d 03       		.uleb128 0x3
 1857 008e 0E       		.uleb128 0xe
 1858 008f 3A       		.uleb128 0x3a
 1859 0090 0B       		.uleb128 0xb
 1860 0091 3B       		.uleb128 0x3b
 1861 0092 05       		.uleb128 0x5
 1862 0093 49       		.uleb128 0x49
 1863 0094 13       		.uleb128 0x13
 1864 0095 02       		.uleb128 0x2
 1865 0096 17       		.uleb128 0x17
 1866 0097 00       		.byte	0
 1867 0098 00       		.byte	0
 1868 0099 0B       		.uleb128 0xb
 1869 009a 898201   		.uleb128 0x4109
 1870 009d 01       		.byte	0x1
 1871 009e 11       		.uleb128 0x11
 1872 009f 01       		.uleb128 0x1
 1873 00a0 31       		.uleb128 0x31
 1874 00a1 13       		.uleb128 0x13
 1875 00a2 01       		.uleb128 0x1
 1876 00a3 13       		.uleb128 0x13
 1877 00a4 00       		.byte	0
 1878 00a5 00       		.byte	0
 1879 00a6 0C       		.uleb128 0xc
 1880 00a7 8A8201   		.uleb128 0x410a
 1881 00aa 00       		.byte	0
 1882 00ab 02       		.uleb128 0x2
 1883 00ac 18       		.uleb128 0x18
 1884 00ad 9142     		.uleb128 0x2111
 1885 00af 18       		.uleb128 0x18
 1886 00b0 00       		.byte	0
 1887 00b1 00       		.byte	0
 1888 00b2 0D       		.uleb128 0xd
 1889 00b3 898201   		.uleb128 0x4109
 1890 00b6 01       		.byte	0x1
 1891 00b7 11       		.uleb128 0x11
 1892 00b8 01       		.uleb128 0x1
 1893 00b9 31       		.uleb128 0x31
 1894 00ba 13       		.uleb128 0x13
 1895 00bb 00       		.byte	0
 1896 00bc 00       		.byte	0
 1897 00bd 0E       		.uleb128 0xe
 1898 00be 2E       		.uleb128 0x2e
 1899 00bf 01       		.byte	0x1
 1900 00c0 3F       		.uleb128 0x3f
 1901 00c1 19       		.uleb128 0x19
 1902 00c2 03       		.uleb128 0x3
 1903 00c3 0E       		.uleb128 0xe
 1904 00c4 3A       		.uleb128 0x3a
 1905 00c5 0B       		.uleb128 0xb
 1906 00c6 3B       		.uleb128 0x3b
 1907 00c7 05       		.uleb128 0x5
 1908 00c8 27       		.uleb128 0x27
 1909 00c9 19       		.uleb128 0x19
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 54


 1910 00ca 8701     		.uleb128 0x87
 1911 00cc 19       		.uleb128 0x19
 1912 00cd 11       		.uleb128 0x11
 1913 00ce 01       		.uleb128 0x1
 1914 00cf 12       		.uleb128 0x12
 1915 00d0 06       		.uleb128 0x6
 1916 00d1 40       		.uleb128 0x40
 1917 00d2 18       		.uleb128 0x18
 1918 00d3 9742     		.uleb128 0x2117
 1919 00d5 19       		.uleb128 0x19
 1920 00d6 01       		.uleb128 0x1
 1921 00d7 13       		.uleb128 0x13
 1922 00d8 00       		.byte	0
 1923 00d9 00       		.byte	0
 1924 00da 0F       		.uleb128 0xf
 1925 00db 34       		.uleb128 0x34
 1926 00dc 00       		.byte	0
 1927 00dd 03       		.uleb128 0x3
 1928 00de 0E       		.uleb128 0xe
 1929 00df 3A       		.uleb128 0x3a
 1930 00e0 0B       		.uleb128 0xb
 1931 00e1 3B       		.uleb128 0x3b
 1932 00e2 05       		.uleb128 0x5
 1933 00e3 49       		.uleb128 0x49
 1934 00e4 13       		.uleb128 0x13
 1935 00e5 02       		.uleb128 0x2
 1936 00e6 18       		.uleb128 0x18
 1937 00e7 00       		.byte	0
 1938 00e8 00       		.byte	0
 1939 00e9 10       		.uleb128 0x10
 1940 00ea 34       		.uleb128 0x34
 1941 00eb 00       		.byte	0
 1942 00ec 03       		.uleb128 0x3
 1943 00ed 08       		.uleb128 0x8
 1944 00ee 3A       		.uleb128 0x3a
 1945 00ef 0B       		.uleb128 0xb
 1946 00f0 3B       		.uleb128 0x3b
 1947 00f1 05       		.uleb128 0x5
 1948 00f2 49       		.uleb128 0x49
 1949 00f3 13       		.uleb128 0x13
 1950 00f4 02       		.uleb128 0x2
 1951 00f5 18       		.uleb128 0x18
 1952 00f6 00       		.byte	0
 1953 00f7 00       		.byte	0
 1954 00f8 11       		.uleb128 0x11
 1955 00f9 34       		.uleb128 0x34
 1956 00fa 00       		.byte	0
 1957 00fb 03       		.uleb128 0x3
 1958 00fc 0E       		.uleb128 0xe
 1959 00fd 3A       		.uleb128 0x3a
 1960 00fe 0B       		.uleb128 0xb
 1961 00ff 3B       		.uleb128 0x3b
 1962 0100 05       		.uleb128 0x5
 1963 0101 49       		.uleb128 0x49
 1964 0102 13       		.uleb128 0x13
 1965 0103 02       		.uleb128 0x2
 1966 0104 17       		.uleb128 0x17
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 55


 1967 0105 00       		.byte	0
 1968 0106 00       		.byte	0
 1969 0107 12       		.uleb128 0x12
 1970 0108 34       		.uleb128 0x34
 1971 0109 00       		.byte	0
 1972 010a 03       		.uleb128 0x3
 1973 010b 08       		.uleb128 0x8
 1974 010c 3A       		.uleb128 0x3a
 1975 010d 0B       		.uleb128 0xb
 1976 010e 3B       		.uleb128 0x3b
 1977 010f 05       		.uleb128 0x5
 1978 0110 49       		.uleb128 0x49
 1979 0111 13       		.uleb128 0x13
 1980 0112 02       		.uleb128 0x2
 1981 0113 17       		.uleb128 0x17
 1982 0114 00       		.byte	0
 1983 0115 00       		.byte	0
 1984 0116 13       		.uleb128 0x13
 1985 0117 0B       		.uleb128 0xb
 1986 0118 01       		.byte	0x1
 1987 0119 11       		.uleb128 0x11
 1988 011a 01       		.uleb128 0x1
 1989 011b 12       		.uleb128 0x12
 1990 011c 06       		.uleb128 0x6
 1991 011d 01       		.uleb128 0x1
 1992 011e 13       		.uleb128 0x13
 1993 011f 00       		.byte	0
 1994 0120 00       		.byte	0
 1995 0121 14       		.uleb128 0x14
 1996 0122 898201   		.uleb128 0x4109
 1997 0125 00       		.byte	0
 1998 0126 11       		.uleb128 0x11
 1999 0127 01       		.uleb128 0x1
 2000 0128 31       		.uleb128 0x31
 2001 0129 13       		.uleb128 0x13
 2002 012a 00       		.byte	0
 2003 012b 00       		.byte	0
 2004 012c 15       		.uleb128 0x15
 2005 012d 34       		.uleb128 0x34
 2006 012e 00       		.byte	0
 2007 012f 03       		.uleb128 0x3
 2008 0130 0E       		.uleb128 0xe
 2009 0131 3A       		.uleb128 0x3a
 2010 0132 0B       		.uleb128 0xb
 2011 0133 3B       		.uleb128 0x3b
 2012 0134 05       		.uleb128 0x5
 2013 0135 49       		.uleb128 0x49
 2014 0136 13       		.uleb128 0x13
 2015 0137 3F       		.uleb128 0x3f
 2016 0138 19       		.uleb128 0x19
 2017 0139 3C       		.uleb128 0x3c
 2018 013a 19       		.uleb128 0x19
 2019 013b 00       		.byte	0
 2020 013c 00       		.byte	0
 2021 013d 16       		.uleb128 0x16
 2022 013e 35       		.uleb128 0x35
 2023 013f 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 56


 2024 0140 49       		.uleb128 0x49
 2025 0141 13       		.uleb128 0x13
 2026 0142 00       		.byte	0
 2027 0143 00       		.byte	0
 2028 0144 17       		.uleb128 0x17
 2029 0145 2E       		.uleb128 0x2e
 2030 0146 00       		.byte	0
 2031 0147 3F       		.uleb128 0x3f
 2032 0148 19       		.uleb128 0x19
 2033 0149 3C       		.uleb128 0x3c
 2034 014a 19       		.uleb128 0x19
 2035 014b 6E       		.uleb128 0x6e
 2036 014c 0E       		.uleb128 0xe
 2037 014d 03       		.uleb128 0x3
 2038 014e 0E       		.uleb128 0xe
 2039 014f 3A       		.uleb128 0x3a
 2040 0150 0B       		.uleb128 0xb
 2041 0151 3B       		.uleb128 0x3b
 2042 0152 0B       		.uleb128 0xb
 2043 0153 00       		.byte	0
 2044 0154 00       		.byte	0
 2045 0155 18       		.uleb128 0x18
 2046 0156 2E       		.uleb128 0x2e
 2047 0157 00       		.byte	0
 2048 0158 3F       		.uleb128 0x3f
 2049 0159 19       		.uleb128 0x19
 2050 015a 3C       		.uleb128 0x3c
 2051 015b 19       		.uleb128 0x19
 2052 015c 6E       		.uleb128 0x6e
 2053 015d 0E       		.uleb128 0xe
 2054 015e 03       		.uleb128 0x3
 2055 015f 0E       		.uleb128 0xe
 2056 0160 3A       		.uleb128 0x3a
 2057 0161 0B       		.uleb128 0xb
 2058 0162 3B       		.uleb128 0x3b
 2059 0163 05       		.uleb128 0x5
 2060 0164 00       		.byte	0
 2061 0165 00       		.byte	0
 2062 0166 00       		.byte	0
 2063              		.section	.debug_loc,"",%progbits
 2064              	.Ldebug_loc0:
 2065              	.LLST0:
 2066 0000 00000000 		.4byte	.LVL0
 2067 0004 08000000 		.4byte	.LVL1
 2068 0008 0100     		.2byte	0x1
 2069 000a 50       		.byte	0x50
 2070 000b 08000000 		.4byte	.LVL1
 2071 000f 28000000 		.4byte	.LFE85
 2072 0013 0400     		.2byte	0x4
 2073 0015 F3       		.byte	0xf3
 2074 0016 01       		.uleb128 0x1
 2075 0017 50       		.byte	0x50
 2076 0018 9F       		.byte	0x9f
 2077 0019 00000000 		.4byte	0
 2078 001d 00000000 		.4byte	0
 2079              	.LLST1:
 2080 0021 00000000 		.4byte	.LVL0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 57


 2081 0025 0B000000 		.4byte	.LVL2-1
 2082 0029 0100     		.2byte	0x1
 2083 002b 51       		.byte	0x51
 2084 002c 0B000000 		.4byte	.LVL2-1
 2085 0030 28000000 		.4byte	.LFE85
 2086 0034 0100     		.2byte	0x1
 2087 0036 55       		.byte	0x55
 2088 0037 00000000 		.4byte	0
 2089 003b 00000000 		.4byte	0
 2090              	.LLST2:
 2091 003f 00000000 		.4byte	.LVL7
 2092 0043 0A000000 		.4byte	.LVL8
 2093 0047 0100     		.2byte	0x1
 2094 0049 50       		.byte	0x50
 2095 004a 0A000000 		.4byte	.LVL8
 2096 004e 28000000 		.4byte	.LFE86
 2097 0052 0400     		.2byte	0x4
 2098 0054 F3       		.byte	0xf3
 2099 0055 01       		.uleb128 0x1
 2100 0056 50       		.byte	0x50
 2101 0057 9F       		.byte	0x9f
 2102 0058 00000000 		.4byte	0
 2103 005c 00000000 		.4byte	0
 2104              	.LLST3:
 2105 0060 00000000 		.4byte	.LVL7
 2106 0064 0D000000 		.4byte	.LVL9-1
 2107 0068 0100     		.2byte	0x1
 2108 006a 51       		.byte	0x51
 2109 006b 0D000000 		.4byte	.LVL9-1
 2110 006f 28000000 		.4byte	.LFE86
 2111 0073 0400     		.2byte	0x4
 2112 0075 F3       		.byte	0xf3
 2113 0076 01       		.uleb128 0x1
 2114 0077 51       		.byte	0x51
 2115 0078 9F       		.byte	0x9f
 2116 0079 00000000 		.4byte	0
 2117 007d 00000000 		.4byte	0
 2118              	.LLST4:
 2119 0081 00000000 		.4byte	.LVL7
 2120 0085 0D000000 		.4byte	.LVL9-1
 2121 0089 0100     		.2byte	0x1
 2122 008b 52       		.byte	0x52
 2123 008c 0D000000 		.4byte	.LVL9-1
 2124 0090 28000000 		.4byte	.LFE86
 2125 0094 0100     		.2byte	0x1
 2126 0096 54       		.byte	0x54
 2127 0097 00000000 		.4byte	0
 2128 009b 00000000 		.4byte	0
 2129              	.LLST5:
 2130 009f 00000000 		.4byte	.LVL14
 2131 00a3 0A000000 		.4byte	.LVL15
 2132 00a7 0100     		.2byte	0x1
 2133 00a9 50       		.byte	0x50
 2134 00aa 0A000000 		.4byte	.LVL15
 2135 00ae 28000000 		.4byte	.LFE87
 2136 00b2 0400     		.2byte	0x4
 2137 00b4 F3       		.byte	0xf3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 58


 2138 00b5 01       		.uleb128 0x1
 2139 00b6 50       		.byte	0x50
 2140 00b7 9F       		.byte	0x9f
 2141 00b8 00000000 		.4byte	0
 2142 00bc 00000000 		.4byte	0
 2143              	.LLST6:
 2144 00c0 00000000 		.4byte	.LVL14
 2145 00c4 0D000000 		.4byte	.LVL16-1
 2146 00c8 0100     		.2byte	0x1
 2147 00ca 51       		.byte	0x51
 2148 00cb 0D000000 		.4byte	.LVL16-1
 2149 00cf 28000000 		.4byte	.LFE87
 2150 00d3 0400     		.2byte	0x4
 2151 00d5 F3       		.byte	0xf3
 2152 00d6 01       		.uleb128 0x1
 2153 00d7 51       		.byte	0x51
 2154 00d8 9F       		.byte	0x9f
 2155 00d9 00000000 		.4byte	0
 2156 00dd 00000000 		.4byte	0
 2157              	.LLST7:
 2158 00e1 00000000 		.4byte	.LVL14
 2159 00e5 0D000000 		.4byte	.LVL16-1
 2160 00e9 0100     		.2byte	0x1
 2161 00eb 52       		.byte	0x52
 2162 00ec 0D000000 		.4byte	.LVL16-1
 2163 00f0 28000000 		.4byte	.LFE87
 2164 00f4 0100     		.2byte	0x1
 2165 00f6 54       		.byte	0x54
 2166 00f7 00000000 		.4byte	0
 2167 00fb 00000000 		.4byte	0
 2168              	.LLST8:
 2169 00ff AC000000 		.4byte	.LVL37
 2170 0103 B2000000 		.4byte	.LVL38
 2171 0107 0100     		.2byte	0x1
 2172 0109 50       		.byte	0x50
 2173 010a B2000000 		.4byte	.LVL38
 2174 010e B5000000 		.4byte	.LVL39-1
 2175 0112 0100     		.2byte	0x1
 2176 0114 52       		.byte	0x52
 2177 0115 B5000000 		.4byte	.LVL39-1
 2178 0119 1C020000 		.4byte	.LFE88
 2179 011d 0100     		.2byte	0x1
 2180 011f 55       		.byte	0x55
 2181 0120 00000000 		.4byte	0
 2182 0124 00000000 		.4byte	0
 2183              	.LLST9:
 2184 0128 D4010000 		.4byte	.LVL69
 2185 012c DC010000 		.4byte	.LVL71
 2186 0130 0100     		.2byte	0x1
 2187 0132 50       		.byte	0x50
 2188 0133 DC010000 		.4byte	.LVL71
 2189 0137 DF010000 		.4byte	.LVL72-1
 2190 013b 0100     		.2byte	0x1
 2191 013d 52       		.byte	0x52
 2192 013e DF010000 		.4byte	.LVL72-1
 2193 0142 1C020000 		.4byte	.LFE88
 2194 0146 0100     		.2byte	0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 59


 2195 0148 56       		.byte	0x56
 2196 0149 00000000 		.4byte	0
 2197 014d 00000000 		.4byte	0
 2198              	.LLST10:
 2199 0151 0C000000 		.4byte	.LVL22
 2200 0155 B8000000 		.4byte	.LVL40
 2201 0159 0200     		.2byte	0x2
 2202 015b 30       		.byte	0x30
 2203 015c 9F       		.byte	0x9f
 2204 015d B8000000 		.4byte	.LVL40
 2205 0161 FE000000 		.4byte	.LVL46
 2206 0165 0100     		.2byte	0x1
 2207 0167 54       		.byte	0x54
 2208 0168 FE000000 		.4byte	.LVL46
 2209 016c 04010000 		.4byte	.LVL47
 2210 0170 0100     		.2byte	0x1
 2211 0172 50       		.byte	0x50
 2212 0173 04010000 		.4byte	.LVL47
 2213 0177 07010000 		.4byte	.LVL48-1
 2214 017b 0100     		.2byte	0x1
 2215 017d 52       		.byte	0x52
 2216 017e 07010000 		.4byte	.LVL48-1
 2217 0182 56010000 		.4byte	.LVL58
 2218 0186 0100     		.2byte	0x1
 2219 0188 54       		.byte	0x54
 2220 0189 56010000 		.4byte	.LVL58
 2221 018d 5C010000 		.4byte	.LVL59
 2222 0191 0100     		.2byte	0x1
 2223 0193 50       		.byte	0x50
 2224 0194 5C010000 		.4byte	.LVL59
 2225 0198 5F010000 		.4byte	.LVL60-1
 2226 019c 0100     		.2byte	0x1
 2227 019e 52       		.byte	0x52
 2228 019f 5F010000 		.4byte	.LVL60-1
 2229 01a3 D6010000 		.4byte	.LVL70
 2230 01a7 0100     		.2byte	0x1
 2231 01a9 54       		.byte	0x54
 2232 01aa 00000000 		.4byte	0
 2233 01ae 00000000 		.4byte	0
 2234              	.LLST11:
 2235 01b2 E0010000 		.4byte	.LVL72
 2236 01b6 E2010000 		.4byte	.LVL73
 2237 01ba 0600     		.2byte	0x6
 2238 01bc 76       		.byte	0x76
 2239 01bd 00       		.sleb128 0
 2240 01be 75       		.byte	0x75
 2241 01bf 00       		.sleb128 0
 2242 01c0 1C       		.byte	0x1c
 2243 01c1 9F       		.byte	0x9f
 2244 01c2 E2010000 		.4byte	.LVL73
 2245 01c6 E9010000 		.4byte	.LVL74-1
 2246 01ca 0100     		.2byte	0x1
 2247 01cc 52       		.byte	0x52
 2248 01cd E9010000 		.4byte	.LVL74-1
 2249 01d1 1C020000 		.4byte	.LFE88
 2250 01d5 0600     		.2byte	0x6
 2251 01d7 76       		.byte	0x76
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 60


 2252 01d8 00       		.sleb128 0
 2253 01d9 75       		.byte	0x75
 2254 01da 00       		.sleb128 0
 2255 01db 1C       		.byte	0x1c
 2256 01dc 9F       		.byte	0x9f
 2257 01dd 00000000 		.4byte	0
 2258 01e1 00000000 		.4byte	0
 2259              		.section	.debug_aranges,"",%progbits
 2260 0000 34000000 		.4byte	0x34
 2261 0004 0200     		.2byte	0x2
 2262 0006 00000000 		.4byte	.Ldebug_info0
 2263 000a 04       		.byte	0x4
 2264 000b 00       		.byte	0
 2265 000c 0000     		.2byte	0
 2266 000e 0000     		.2byte	0
 2267 0010 00000000 		.4byte	.LFB85
 2268 0014 28000000 		.4byte	.LFE85-.LFB85
 2269 0018 00000000 		.4byte	.LFB86
 2270 001c 28000000 		.4byte	.LFE86-.LFB86
 2271 0020 00000000 		.4byte	.LFB87
 2272 0024 28000000 		.4byte	.LFE87-.LFB87
 2273 0028 00000000 		.4byte	.LFB88
 2274 002c 1C020000 		.4byte	.LFE88-.LFB88
 2275 0030 00000000 		.4byte	0
 2276 0034 00000000 		.4byte	0
 2277              		.section	.debug_ranges,"",%progbits
 2278              	.Ldebug_ranges0:
 2279 0000 00000000 		.4byte	.LFB85
 2280 0004 28000000 		.4byte	.LFE85
 2281 0008 00000000 		.4byte	.LFB86
 2282 000c 28000000 		.4byte	.LFE86
 2283 0010 00000000 		.4byte	.LFB87
 2284 0014 28000000 		.4byte	.LFE87
 2285 0018 00000000 		.4byte	.LFB88
 2286 001c 1C020000 		.4byte	.LFE88
 2287 0020 00000000 		.4byte	0
 2288 0024 00000000 		.4byte	0
 2289              		.section	.debug_line,"",%progbits
 2290              	.Ldebug_line0:
 2291 0000 16030000 		.section	.debug_str,"MS",%progbits,1
 2291      02003A02 
 2291      00000201 
 2291      FB0E0D00 
 2291      01010101 
 2292              	.LASF35:
 2293 0000 74616E6B 		.ascii	"tankturn_right\000"
 2293      7475726E 
 2293      5F726967 
 2293      687400
 2294              	.LASF32:
 2295 000f 74616E6B 		.ascii	"tankturn_left\000"
 2295      7475726E 
 2295      5F6C6566 
 2295      7400
 2296              	.LASF33:
 2297 001d 73706565 		.ascii	"speed_left\000"
 2297      645F6C65 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 61


 2297      667400
 2298              	.LASF47:
 2299 0028 6D6F746F 		.ascii	"motor_stop\000"
 2299      725F7374 
 2299      6F7000
 2300              	.LASF2:
 2301 0033 73686F72 		.ascii	"short int\000"
 2301      7420696E 
 2301      7400
 2302              	.LASF22:
 2303 003d 73697A65 		.ascii	"sizetype\000"
 2303      74797065 
 2303      00
 2304              	.LASF26:
 2305 0046 61636358 		.ascii	"accX\000"
 2305      00
 2306              	.LASF27:
 2307 004b 61636359 		.ascii	"accY\000"
 2307      00
 2308              	.LASF28:
 2309 0050 6163635A 		.ascii	"accZ\000"
 2309      00
 2310              	.LASF38:
 2311 0055 64656C74 		.ascii	"delta\000"
 2311      6100
 2312              	.LASF8:
 2313 005b 5F5F7569 		.ascii	"__uint32_t\000"
 2313      6E743332 
 2313      5F7400
 2314              	.LASF30:
 2315 0066 64656C61 		.ascii	"delay\000"
 2315      7900
 2316              	.LASF4:
 2317 006c 5F5F7569 		.ascii	"__uint16_t\000"
 2317      6E743136 
 2317      5F7400
 2318              	.LASF62:
 2319 0077 433A5C55 		.ascii	"C:\\Users\\ilyap\\Documents\\PSoC Creator\\Zumo_tan"
 2319      73657273 
 2319      5C696C79 
 2319      61705C44 
 2319      6F63756D 
 2320 00a5 6B5C5A75 		.ascii	"k\\Zumo_robot\\ZumoBot_Tank.cydsn\000"
 2320      6D6F5F72 
 2320      6F626F74 
 2320      5C5A756D 
 2320      6F426F74 
 2321              	.LASF24:
 2322 00c5 73656E73 		.ascii	"sensors_\000"
 2322      6F72735F 
 2322      00
 2323              	.LASF31:
 2324 00ce 676F5F66 		.ascii	"go_forward\000"
 2324      6F727761 
 2324      726400
 2325              	.LASF17:
 2326 00d9 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 62


 2326      3800
 2327              	.LASF16:
 2328 00df 75696E74 		.ascii	"uint32_t\000"
 2328      33325F74 
 2328      00
 2329              	.LASF50:
 2330 00e8 7265666C 		.ascii	"reflectance_start\000"
 2330      65637461 
 2330      6E63655F 
 2330      73746172 
 2330      7400
 2331              	.LASF58:
 2332 00fa 556C7472 		.ascii	"Ultra_GetDistance\000"
 2332      615F4765 
 2332      74446973 
 2332      74616E63 
 2332      6500
 2333              	.LASF18:
 2334 010c 666C6F61 		.ascii	"float\000"
 2334      7400
 2335              	.LASF10:
 2336 0112 6C6F6E67 		.ascii	"long long int\000"
 2336      206C6F6E 
 2336      6720696E 
 2336      7400
 2337              	.LASF23:
 2338 0120 5469636B 		.ascii	"TickType_t\000"
 2338      54797065 
 2338      5F7400
 2339              	.LASF41:
 2340 012b 50574D5F 		.ascii	"PWM_WriteCompare1\000"
 2340      57726974 
 2340      65436F6D 
 2340      70617265 
 2340      3100
 2341              	.LASF55:
 2342 013d 7265666C 		.ascii	"reflectance_digital\000"
 2342      65637461 
 2342      6E63655F 
 2342      64696769 
 2342      74616C00 
 2343              	.LASF59:
 2344 0151 6D6F746F 		.ascii	"motor_backward\000"
 2344      725F6261 
 2344      636B7761 
 2344      726400
 2345              	.LASF25:
 2346 0160 61636344 		.ascii	"accData_\000"
 2346      6174615F 
 2346      00
 2347              	.LASF45:
 2348 0169 78546173 		.ascii	"xTaskGetTickCount\000"
 2348      6B476574 
 2348      5469636B 
 2348      436F756E 
 2348      7400
 2349              	.LASF40:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 63


 2350 017b 4D6F746F 		.ascii	"MotorDirRight_Write\000"
 2350      72446972 
 2350      52696768 
 2350      745F5772 
 2350      69746500 
 2351              	.LASF53:
 2352 018f 49525F53 		.ascii	"IR_Start\000"
 2352      74617274 
 2352      00
 2353              	.LASF21:
 2354 0198 6C6F6E67 		.ascii	"long double\000"
 2354      20646F75 
 2354      626C6500 
 2355              	.LASF57:
 2356 01a4 4C534D33 		.ascii	"LSM303D_Read_Acc\000"
 2356      3033445F 
 2356      52656164 
 2356      5F416363 
 2356      00
 2357              	.LASF49:
 2358 01b5 556C7472 		.ascii	"Ultra_Start\000"
 2358      615F5374 
 2358      61727400 
 2359              	.LASF1:
 2360 01c1 756E7369 		.ascii	"unsigned char\000"
 2360      676E6564 
 2360      20636861 
 2360      7200
 2361              	.LASF51:
 2362 01cf 7265666C 		.ascii	"reflectance_set_threshold\000"
 2362      65637461 
 2362      6E63655F 
 2362      7365745F 
 2362      74687265 
 2363              	.LASF0:
 2364 01e9 7369676E 		.ascii	"signed char\000"
 2364      65642063 
 2364      68617200 
 2365              	.LASF11:
 2366 01f5 6C6F6E67 		.ascii	"long long unsigned int\000"
 2366      206C6F6E 
 2366      6720756E 
 2366      7369676E 
 2366      65642069 
 2367              	.LASF43:
 2368 020c 76546173 		.ascii	"vTaskDelay\000"
 2368      6B44656C 
 2368      617900
 2369              	.LASF12:
 2370 0217 756E7369 		.ascii	"unsigned int\000"
 2370      676E6564 
 2370      20696E74 
 2370      00
 2371              	.LASF14:
 2372 0224 75696E74 		.ascii	"uint16_t\000"
 2372      31365F74 
 2372      00
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 64


 2373              	.LASF29:
 2374 022d 73706565 		.ascii	"speed\000"
 2374      6400
 2375              	.LASF37:
 2376 0233 73746172 		.ascii	"start\000"
 2376      7400
 2377              	.LASF42:
 2378 0239 50574D5F 		.ascii	"PWM_WriteCompare2\000"
 2378      57726974 
 2378      65436F6D 
 2378      70617265 
 2378      3200
 2379              	.LASF44:
 2380 024b 6D6F746F 		.ascii	"motor_forward\000"
 2380      725F666F 
 2380      72776172 
 2380      6400
 2381              	.LASF20:
 2382 0259 63686172 		.ascii	"char\000"
 2382      00
 2383              	.LASF7:
 2384 025e 6C6F6E67 		.ascii	"long int\000"
 2384      20696E74 
 2384      00
 2385              	.LASF48:
 2386 0267 4C534D33 		.ascii	"LSM303D_Start\000"
 2386      3033445F 
 2386      53746172 
 2386      7400
 2387              	.LASF15:
 2388 0275 696E7433 		.ascii	"int32_t\000"
 2388      325F7400 
 2389              	.LASF5:
 2390 027d 73686F72 		.ascii	"short unsigned int\000"
 2390      7420756E 
 2390      7369676E 
 2390      65642069 
 2390      6E7400
 2391              	.LASF13:
 2392 0290 696E7431 		.ascii	"int16_t\000"
 2392      365F7400 
 2393              	.LASF46:
 2394 0298 7072696E 		.ascii	"print_mqtt\000"
 2394      745F6D71 
 2394      747400
 2395              	.LASF36:
 2396 02a3 64617461 		.ascii	"data\000"
 2396      00
 2397              	.LASF54:
 2398 02a8 5357315F 		.ascii	"SW1_Read\000"
 2398      52656164 
 2398      00
 2399              	.LASF61:
 2400 02b1 6D61696E 		.ascii	"main.c\000"
 2400      2E6300
 2401              	.LASF9:
 2402 02b8 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 65


 2402      20756E73 
 2402      69676E65 
 2402      6420696E 
 2402      7400
 2403              	.LASF19:
 2404 02ca 646F7562 		.ascii	"double\000"
 2404      6C6500
 2405              	.LASF52:
 2406 02d1 6D6F746F 		.ascii	"motor_start\000"
 2406      725F7374 
 2406      61727400 
 2407              	.LASF64:
 2408 02dd 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2408      52784275 
 2408      66666572 
 2408      00
 2409              	.LASF63:
 2410 02ea 7A6D6169 		.ascii	"zmain\000"
 2410      6E00
 2411              	.LASF6:
 2412 02f0 5F5F696E 		.ascii	"__int32_t\000"
 2412      7433325F 
 2412      7400
 2413              	.LASF3:
 2414 02fa 5F5F696E 		.ascii	"__int16_t\000"
 2414      7431365F 
 2414      7400
 2415              	.LASF56:
 2416 0304 49525F77 		.ascii	"IR_wait\000"
 2416      61697400 
 2417              	.LASF60:
 2418 030c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2418      43313120 
 2418      352E342E 
 2418      31203230 
 2418      31363036 
 2419 033f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2419      20726576 
 2419      6973696F 
 2419      6E203233 
 2419      37373135 
 2420 0372 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2420      66756E63 
 2420      74696F6E 
 2420      2D736563 
 2420      74696F6E 
 2421              	.LASF34:
 2422 039a 73706565 		.ascii	"speed_right\000"
 2422      645F7269 
 2422      67687400 
 2423              	.LASF39:
 2424 03a6 4D6F746F 		.ascii	"MotorDirLeft_Write\000"
 2424      72446972 
 2424      4C656674 
 2424      5F577269 
 2424      746500
 2425              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccqimn4x.s 			page 66


