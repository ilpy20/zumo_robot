ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.zmain,"ax",%progbits
  20              		.align	2
  21              		.global	zmain
  22              		.thumb
  23              		.thumb_func
  24              		.type	zmain, %function
  25              	zmain:
  26              	.LFB85:
  27              		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        **** * @mainpage ZumoBot Project
   3:main.c        **** * @brief    You can make your own ZumoBot with various sensors.
   4:main.c        **** * @details  <br><br>
   5:main.c        ****     <p>
   6:main.c        ****     <B>General</B><br>
   7:main.c        ****     You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress
   8:main.c        ****     library has basic methods of various sensors and communications so that you can make what you w
   9:main.c        ****     <br><br>
  10:main.c        ****     </p>
  11:main.c        ****     
  12:main.c        ****     <p>
  13:main.c        ****     <B>Sensors</B><br>
  14:main.c        ****     &nbsp;Included: <br>
  15:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
  16:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
  17:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
  18:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Motors
  19:main.c        ****     &nbsp;Wii nunchuck<br>
  20:main.c        ****     &nbsp;TSOP-2236: IR Receiver<br>
  21:main.c        ****     &nbsp;HC-SR04: Ultrasonic sensor<br>
  22:main.c        ****     &nbsp;APDS-9301: Ambient light sensor<br>
  23:main.c        ****     &nbsp;IR LED <br><br><br>
  24:main.c        ****     </p>
  25:main.c        ****     
  26:main.c        ****     <p>
  27:main.c        ****     <B>Communication</B><br>
  28:main.c        ****     I2C, UART, Serial<br>
  29:main.c        ****     </p>
  30:main.c        **** */
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 2


  31:main.c        **** 
  32:main.c        **** #include <project.h>
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdlib.h>
  35:main.c        **** #include "FreeRTOS.h"
  36:main.c        **** #include "task.h"
  37:main.c        **** #include "Motor.h"
  38:main.c        **** #include "Ultra.h"
  39:main.c        **** #include "Nunchuk.h"
  40:main.c        **** #include "Reflectance.h"
  41:main.c        **** #include "Gyro.h"
  42:main.c        **** #include "Accel_magnet.h"
  43:main.c        **** #include "LSM303D.h"
  44:main.c        **** #include "IR.h"
  45:main.c        **** #include "Beep.h"
  46:main.c        **** #include "mqtt_sender.h"
  47:main.c        **** #include <time.h>
  48:main.c        **** #include <sys/time.h>
  49:main.c        **** #include "serial1.h"
  50:main.c        **** #include <unistd.h>
  51:main.c        **** /**
  52:main.c        ****  * @file    main.c
  53:main.c        ****  * @brief   
  54:main.c        ****  * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp
  55:main.c        **** */
  56:main.c        **** 
  57:main.c        **** #if 0
  58:main.c        **** //template
  59:main.c        **** void zmain(void){
  60:main.c        ****     
  61:main.c        ****     while(true)
  62:main.c        ****     {
  63:main.c        ****         BatteryLed_Write(!SW1_Read());
  64:main.c        ****         vTaskDelay(100);
  65:main.c        ****     }
  66:main.c        **** }
  67:main.c        **** #endif
  68:main.c        **** 
  69:main.c        **** #if 0
  70:main.c        **** // Beep light test
  71:main.c        **** void zmain(void)
  72:main.c        **** {
  73:main.c        ****     while(true)
  74:main.c        ****     {
  75:main.c        ****         if ((SW1_Read() == 0)){
  76:main.c        ****             for(int i = 0; i < 3; i++){
  77:main.c        ****                 BatteryLed_Write(1);
  78:main.c        ****                 Beep(750, 30);
  79:main.c        ****                 vTaskDelay(500);
  80:main.c        ****                 BatteryLed_Write(0);
  81:main.c        ****                 vTaskDelay(500);
  82:main.c        ****             }
  83:main.c        ****             for(int i = 0; i<3; i++){
  84:main.c        ****                 BatteryLed_Write(1);
  85:main.c        ****                 Beep(750, 30);
  86:main.c        ****                 vTaskDelay(1000);
  87:main.c        ****                 BatteryLed_Write(0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 3


  88:main.c        ****                 vTaskDelay(500);
  89:main.c        ****             }
  90:main.c        ****             for(int i = 0; i < 3; i++){
  91:main.c        ****                 BatteryLed_Write(1);
  92:main.c        ****                 Beep(750, 30);
  93:main.c        ****                 vTaskDelay(500);
  94:main.c        ****                 BatteryLed_Write(0);
  95:main.c        ****                 vTaskDelay(500);
  96:main.c        ****             }
  97:main.c        ****         }
  98:main.c        ****     }
  99:main.c        ****     
 100:main.c        ****     
 101:main.c        ****  }   
 102:main.c        **** #endif
 103:main.c        **** 
 104:main.c        **** #if 0
 105:main.c        **** // Name and age
 106:main.c        **** void zmain(void)
 107:main.c        **** {
 108:main.c        ****     TickType_t start;
 109:main.c        ****     TickType_t end;
 110:main.c        ****     char name[32];
 111:main.c        ****     int age;
 112:main.c        ****     
 113:main.c        ****     
 114:main.c        ****     printf("\n\n");
 115:main.c        ****     
 116:main.c        ****     printf("Enter your name: ");
 117:main.c        ****     //fflush(stdout);
 118:main.c        ****     start = xTaskGetTickCount();
 119:main.c        ****     scanf("%s", name);
 120:main.c        ****     printf("Enter your age: ");
 121:main.c        ****     //fflush(stdout);
 122:main.c        ****     scanf("%d", &age);
 123:main.c        ****     end = xTaskGetTickCount();
 124:main.c        ****     int time_long = end - start;
 125:main.c        ****     //printf("You are [%s], age = %d\n", name, age);
 126:main.c        ****     if (age <= 21){
 127:main.c        ****         if(time_long < 3000){
 128:main.c        ****             printf("\nSuper fast dude!");
 129:main.c        ****         }
 130:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 131:main.c        ****             printf("\nSo mediocre.");
 132:main.c        ****         }
 133:main.c        ****         else{
 134:main.c        ****             printf("\nMy granny is faster than you!");
 135:main.c        ****         }
 136:main.c        ****     }
 137:main.c        ****     else if((age >= 22)&&(age<=50)){
 138:main.c        ****         if(time_long < 3000){
 139:main.c        ****             printf("\nBe quick or be dead");
 140:main.c        ****         }
 141:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 142:main.c        ****             printf("\nYou're so average.");
 143:main.c        ****         }
 144:main.c        ****         else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 4


 145:main.c        ****             printf("\nHave you been smoking something illegal?");
 146:main.c        ****         }
 147:main.c        ****     }
 148:main.c        ****     else{
 149:main.c        ****         if(time_long <= 3000){
 150:main.c        ****             printf("\nStill going strong");
 151:main.c        ****         }
 152:main.c        ****         else if((time_long >= 4000)&&(time_long <=5000)){
 153:main.c        ****             printf("\nYou are doing ok for your age.");
 154:main.c        ****         }
 155:main.c        ****         else{
 156:main.c        ****             printf("\nDo they still allow you to drive?");
 157:main.c        ****         }
 158:main.c        ****     }
 159:main.c        ****     while(true)
 160:main.c        ****     {
 161:main.c        ****         BatteryLed_Write(!SW1_Read());
 162:main.c        ****         vTaskDelay(100);
 163:main.c        ****     }
 164:main.c        ****  }   
 165:main.c        **** #endif
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** #if 0
 169:main.c        **** //battery level//
 170:main.c        **** void zmain(void)
 171:main.c        **** {
 172:main.c        **** 	ADC_Battery_Start();   	 
 173:main.c        **** 
 174:main.c        **** 	int16 adcresult =0;
 175:main.c        **** 	float volts = 0.0;
 176:main.c        **** 
 177:main.c        **** 	printf("\nBoot\n");
 178:main.c        **** 
 179:main.c        **** 	//BatteryLed_Write(1); // Switch led on
 180:main.c        **** 	//BatteryLed_Write(0); // Switch led off
 181:main.c        **** 	//uint8 button;
 182:main.c        **** 	//button = SW1_Read(); // read SW1 on pSoC board
 183:main.c        **** 	// SW1_Read() returns zero when button is pressed
 184:main.c        **** 	// SW1_Read() returns one when button is not pressed
 185:main.c        **** 
 186:main.c        **** 	while(true)
 187:main.c        **** 	{
 188:main.c        ****     	char msg[80];
 189:main.c        ****     	ADC_Battery_StartConvert(); // start sampling
 190:main.c        ****     	if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for ADC converted val
 191:main.c        ****         	adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
 192:main.c        ****         	volts=(adcresult*5/4095)*(30/20);
 193:main.c        ****         	// convert value to Volts
 194:main.c        ****         	// you need to implement the conversion
 195:main.c        ****        	 
 196:main.c        ****         	// Print both ADC results and converted value
 197:main.c        ****         	printf("%d %f\r\n",adcresult, volts);
 198:main.c        ****        	 
 199:main.c        ****     	if (volts<4){
 200:main.c        ****         	while(SW1_Read()){
 201:main.c        ****             	BatteryLed_Write(1);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 5


 202:main.c        ****             	vTaskDelay(500);
 203:main.c        ****             	BatteryLed_Write(0);
 204:main.c        ****             	vTaskDelay(500);
 205:main.c        ****         	}
 206:main.c        ****     	}
 207:main.c        ****     	}
 208:main.c        ****     	vTaskDelay(500);
 209:main.c        **** 	}
 210:main.c        ****  }  
 211:main.c        **** 
 212:main.c        ****    
 213:main.c        **** #endif
 214:main.c        **** 
 215:main.c        **** #if 0
 216:main.c        **** // button
 217:main.c        **** void zmain(void)
 218:main.c        **** {
 219:main.c        ****     while(true) {
 220:main.c        ****         printf("Press button within 5 seconds!\n");
 221:main.c        ****         int i = 50;
 222:main.c        ****         while(i > 0) {
 223:main.c        ****             if(SW1_Read() == 0) {
 224:main.c        ****                 break;
 225:main.c        ****             }
 226:main.c        ****             vTaskDelay(100);
 227:main.c        ****             --i;
 228:main.c        ****         }
 229:main.c        ****         if(i > 0) {
 230:main.c        ****             printf("Good work\n");
 231:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait until button is released
 232:main.c        ****         }
 233:main.c        ****         else {
 234:main.c        ****             printf("You didn't press the button\n");
 235:main.c        ****         }
 236:main.c        ****     }
 237:main.c        **** }
 238:main.c        **** #endif
 239:main.c        **** 
 240:main.c        **** #if 0
 241:main.c        **** // button
 242:main.c        **** void zmain(void)
 243:main.c        **** {
 244:main.c        ****     printf("\nBoot\n");
 245:main.c        **** 
 246:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 247:main.c        ****     BatteryLed_Write(0); // Switch led off 
 248:main.c        ****     
 249:main.c        ****     //uint8 button;
 250:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 251:main.c        ****     // SW1_Read() returns zero when button is pressed
 252:main.c        ****     // SW1_Read() returns one when button is not pressed
 253:main.c        ****     
 254:main.c        ****     bool led = false;
 255:main.c        ****     
 256:main.c        ****     while(true)
 257:main.c        ****     {
 258:main.c        ****         // toggle led state when button is pressed
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 6


 259:main.c        ****         if(SW1_Read() == 0) {
 260:main.c        ****             led = !led;
 261:main.c        ****             BatteryLed_Write(led);
 262:main.c        ****             if(led) printf("Led is ON\n");
 263:main.c        ****             else printf("Led is OFF\n");
 264:main.c        ****             Beep(1000, 150);
 265:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait while button is being pressed
 266:main.c        ****         }        
 267:main.c        ****     }
 268:main.c        ****  }   
 269:main.c        **** #endif
 270:main.c        **** 
 271:main.c        **** #if 0
 272:main.c        ****     void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);
 273:main.c        ****     
 274:main.c        **** void zmain(void)
 275:main.c        **** {
 276:main.c        ****     Ultra_Start();
 277:main.c        ****     motor_start(0,0);
 278:main.c        ****     motor_forward(0,0);
 279:main.c        ****     
 280:main.c        ****     vTaskDelay(3000);
 281:main.c        ****     
 282:main.c        ****     while(true){
 283:main.c        ****     int distance = Ultra_GetDistance();
 284:main.c        ****     
 285:main.c        ****     if(distance <= 10 && distance !=0){
 286:main.c        ****         motor_backward(50,500);
 287:main.c        ****         Beep(150, 200);
 288:main.c        ****         motor_turn(150,150, 500);
 289:main.c        ****         motor_forward(0,0);
 290:main.c        ****      }
 291:main.c        ****     motor_turn(200,100,50);
 292:main.c        ****     }   
 293:main.c        **** }
 294:main.c        **** #endif
 295:main.c        **** 
 296:main.c        **** #if 0
 297:main.c        **** //ultrasonic sensor//
 298:main.c        **** void zmain(void)
 299:main.c        **** {
 300:main.c        ****     Ultra_Start();                          // Ultra Sonic Start function
 301:main.c        ****     
 302:main.c        ****     while(true) {
 303:main.c        ****         int d = Ultra_GetDistance();
 304:main.c        ****         // Print the detected distance (centimeters)
 305:main.c        ****         printf("distance = %d\r\n", d);
 306:main.c        ****         vTaskDelay(200);
 307:main.c        ****     }
 308:main.c        **** }   
 309:main.c        **** #endif
 310:main.c        **** 
 311:main.c        **** #if 0
 312:main.c        **** //IR receiverm - how to wait for IR remote commands
 313:main.c        **** void zmain(void)
 314:main.c        **** {
 315:main.c        ****     uint8_t button_;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 7


 316:main.c        ****     printf("\nStart\n");
 317:main.c        ****     
 318:main.c        ****     while(true){
 319:main.c        ****         button_ = SW1_Read();
 320:main.c        ****         if(button_==0){
 321:main.c        ****             IR_Start();
 322:main.c        ****             printf("\n\nIR test\n");
 323:main.c        ****             struct sensors_ ref;
 324:main.c        ****             struct sensors_ dig;
 325:main.c        ****             bool led = false,loop = true, startline= true;
 326:main.c        ****             int count =0;
 327:main.c        ****             motor_start();              // enable motor controller 
 328:main.c        ****             IR_flush(); // clear IR receive buffer
 329:main.c        ****             printf("Buffer cleared\n");
 330:main.c        ****             
 331:main.c        ****             reflectance_start();
 332:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 333:main.c        ****             vTaskDelay(200);
 334:main.c        ****                 while(startline){
 335:main.c        ****                     // read raw sensor values
 336:main.c        ****                     reflectance_read(&ref);
 337:main.c        ****                     reflectance_digital(&dig); 
 338:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 339:main.c        ****                         motor_turn(50,50,50);       // motor forward
 340:main.c        ****                         Beep(60,80);
 341:main.c        ****                     }
 342:main.c        ****                     else{
 343:main.c        ****                         motor_forward(0,0);       // Stop motors
 344:main.c        ****                         startline = false;
 345:main.c        ****                     }
 346:main.c        ****                 }
 347:main.c        ****             IR_wait();  // wait for IR command
 348:main.c        ****             led = !led;
 349:main.c        ****             BatteryLed_Write(led);   
 350:main.c        ****             
 351:main.c        ****             // Toggle led when IR signal is received
 352:main.c        ****             while(loop)
 353:main.c        ****             {   
 354:main.c        ****                 if(led){
 355:main.c        ****                     // read raw sensor values
 356:main.c        ****                     reflectance_read(&ref);
 357:main.c        ****                     reflectance_digital(&dig); 
 358:main.c        ****                     
 359:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 360:main.c        ****                         motor_turn(50,50,50);       // motor forward
 361:main.c        ****                         vTaskDelay(50);
 362:main.c        ****                         count++;
 363:main.c        ****                         printf("count %d \n",count);
 364:main.c        ****                         if(count >= 7){
 365:main.c        ****                             motor_forward(0,0);       // Stop motors
 366:main.c        ****                             loop = false;
 367:main.c        ****                         }
 368:main.c        ****                     }
 369:main.c        ****                     else{
 370:main.c        ****                          motor_turn(50,50,50);       // motor forward
 371:main.c        ****                         Beep(100,100);
 372:main.c        ****                     }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 8


 373:main.c        ****                 }
 374:main.c        ****                 else {
 375:main.c        ****                     printf("Led is OFF\n");
 376:main.c        ****                     loop = false;
 377:main.c        ****                 }
 378:main.c        ****                
 379:main.c        ****             }    
 380:main.c        ****         }
 381:main.c        ****     }
 382:main.c        ****  }   
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        **** 
 386:main.c        **** #if 0
 387:main.c        **** //IR receiverm - how to wait for IR remote commands
 388:main.c        **** void zmain(void)
 389:main.c        **** {
 390:main.c        ****     uint8_t button_;
 391:main.c        ****     printf("\nStart\n");
 392:main.c        ****     
 393:main.c        ****     while(true){
 394:main.c        ****         button_ = SW1_Read();
 395:main.c        ****         if(button_==0){
 396:main.c        ****             IR_Start();
 397:main.c        ****             printf("\n\nIR test\n");
 398:main.c        ****             struct sensors_ ref;
 399:main.c        ****             struct sensors_ dig;
 400:main.c        ****             bool led = false,loop = true, startline= true/*, crossline= true*/;
 401:main.c        ****             int count =0;
 402:main.c        ****             motor_start();              // enable motor controller 
 403:main.c        ****             IR_flush(); // clear IR receive buffer
 404:main.c        ****             printf("Buffer cleared\n");
 405:main.c        ****             
 406:main.c        ****             reflectance_start();
 407:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 408:main.c        ****             vTaskDelay(200);
 409:main.c        ****                 while(startline){
 410:main.c        ****                     // read raw sensor values
 411:main.c        ****                     reflectance_read(&ref);
 412:main.c        ****                     reflectance_digital(&dig); 
 413:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 414:main.c        ****                         motor_turn(50,50,0);       // motor forward
 415:main.c        ****                         //Beep(60,80);
 416:main.c        ****                     }
 417:main.c        ****                     else{
 418:main.c        ****                         motor_forward(0,0);       // Stop motors
 419:main.c        ****                         startline = false;
 420:main.c        ****                     }
 421:main.c        ****                 }
 422:main.c        ****             IR_wait();  // wait for IR command
 423:main.c        ****             led = !led;
 424:main.c        ****             BatteryLed_Write(led);   
 425:main.c        ****             
 426:main.c        ****             // Toggle led when IR signal is received
 427:main.c        ****             while(loop)
 428:main.c        ****             {   
 429:main.c        ****                 if(led){
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 9


 430:main.c        ****                     //do {
 431:main.c        ****                         // read raw sensor values
 432:main.c        ****                     //reflectance_read(&ref);
 433:main.c        ****                     reflectance_digital(&dig); 
 434:main.c        ****                     
 435:main.c        ****                    
 436:main.c        ****                         /*if(dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r3 == 1 && dig.r2 == 
 437:main.c        ****                             motor_forward(0,0);
 438:main.c        ****                             count++;
 439:main.c        ****                             if(count==1){
 440:main.c        ****                                 motor_turn(50,50,50);       // motor forward
 441:main.c        ****                             }
 442:main.c        ****                             if (count==2){
 443:main.c        ****                                 motor_turn_left(10,100,500);
 444:main.c        ****                             }
 445:main.c        ****                             if (count<=4){
 446:main.c        ****                                 motor_turn_right(100,10,500);
 447:main.c        ****                             }
 448:main.c        ****                             if (count==5){
 449:main.c        ****                                 motor_forward(0,0);       // Stop motors
 450:main.c        ****                                 led = false;
 451:main.c        ****                                 BatteryLed_Write(led);
 452:main.c        ****                             }
 453:main.c        ****                         } */
 454:main.c        ****                         if(dig.r2 == 1 && dig.r1 == 1){
 455:main.c        ****                             //count++;
 456:main.c        ****                             motor_turn(100,10,0);       // motor turn left
 457:main.c        ****                             //Beep(20,20);
 458:main.c        ****                             vTaskDelay(0);
 459:main.c        ****                             
 460:main.c        ****                             printf("count %d \n",count);
 461:main.c        ****                         }
 462:main.c        ****                         if(dig.l2 == 1 && dig.l1 == 1){
 463:main.c        ****                             //count++;
 464:main.c        ****                             motor_turn(10,100,0);       // motor turn right
 465:main.c        ****                            // Beep(20,20);
 466:main.c        ****                             vTaskDelay(0);
 467:main.c        ****                             
 468:main.c        ****                             printf("count %d \n",count);
 469:main.c        ****                         }
 470:main.c        ****                        // printf("count %d \n",count);
 471:main.c        ****                         if (dig.l1 == 1 && dig.r1 == 1){
 472:main.c        ****                             
 473:main.c        ****                             motor_turn(50,50,0);       // motor forward
 474:main.c        ****                             vTaskDelay(0);
 475:main.c        ****                             //Beep(50,50);
 476:main.c        ****                             //count++;
 477:main.c        ****                             printf("count %d \n",count);
 478:main.c        ****                         }
 479:main.c        ****                    
 480:main.c        ****                 }
 481:main.c        ****                 else {
 482:main.c        ****                     printf("Led is OFF\n");
 483:main.c        ****                     loop = false;
 484:main.c        ****                 }
 485:main.c        ****                
 486:main.c        ****             }    
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 10


 487:main.c        ****         }
 488:main.c        ****     }
 489:main.c        ****  }  
 490:main.c        **** #endif
 491:main.c        **** 
 492:main.c        **** #if 0
 493:main.c        **** //IR receiverm - how to wait for IR remote commands
 494:main.c        **** void zmain(void)
 495:main.c        **** {
 496:main.c        ****     //IR receiverm - how to wait for IR remote commands
 497:main.c        **** void zmain(void);
 498:main.c        **** 
 499:main.c        ****     uint8_t button_;
 500:main.c        ****     printf("\nStart\n");
 501:main.c        **** 
 502:main.c        ****     while(true){
 503:main.c        ****         button_ = SW1_Read();
 504:main.c        ****         if(button_==0){
 505:main.c        ****             IR_Start();
 506:main.c        ****             printf("\n\nIR test\n");
 507:main.c        ****             struct sensors_ ref;
 508:main.c        ****             struct sensors_ dig;
 509:main.c        ****             bool led = false,loop = true, startline= true;
 510:main.c        ****             int count =0;
 511:main.c        ****             motor_start();              // enable motor controller 
 512:main.c        ****             IR_flush(); // clear IR receive buffer
 513:main.c        ****             printf("Buffer cleared\n");
 514:main.c        **** 
 515:main.c        ****             reflectance_start();
 516:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 517:main.c        ****             vTaskDelay(200);
 518:main.c        ****                 while(startline){
 519:main.c        ****                     // read raw sensor values
 520:main.c        ****                     reflectance_read(&ref);
 521:main.c        ****                     reflectance_digital(&dig); 
 522:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 523:main.c        ****                         motor_turn(50,50,50);       // motor forward
 524:main.c        ****                         Beep(60,80);
 525:main.c        ****                     }
 526:main.c        **** 
 527:main.c        ****                     else{
 528:main.c        ****                         motor_forward(0,0);       // Stop motors
 529:main.c        ****                         startline = false;
 530:main.c        ****                     }
 531:main.c        ****                 }
 532:main.c        ****             IR_wait();  // wait for IR command
 533:main.c        ****             led = !led;
 534:main.c        ****             BatteryLed_Write(led);   
 535:main.c        **** 
 536:main.c        ****             // Toggle led when IR signal is received
 537:main.c        ****             while(loop)
 538:main.c        ****             {   
 539:main.c        ****                 if(led){
 540:main.c        ****                     // read raw sensor values
 541:main.c        ****                     reflectance_read(&ref);
 542:main.c        ****                     reflectance_digital(&dig); 
 543:main.c        **** 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 11


 544:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1){
 545:main.c        ****                         count++;
 546:main.c        ****                         printf("\nStart\n");
 547:main.c        ****                         printf("count %d \n",count);
 548:main.c        **** 
 549:main.c        **** 
 550:main.c        ****                         while (dig.r3 == 1 && dig.l3 == 1){
 551:main.c        ****                          motor_turn(50,49,0);
 552:main.c        ****                         reflectance_digital(&dig);
 553:main.c        ****                         }
 554:main.c        ****                         if(count >= 2){
 555:main.c        ****                             motor_forward(210,0);       // Stop motors
 556:main.c        ****                         }
 557:main.c        ****                     }
 558:main.c        **** 
 559:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 1){
 560:main.c        ****                         motor_turn(210,210,0);   //goes forward lul
 561:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 562:main.c        ****                     }
 563:main.c        ****                     else if (dig.l1 == 0 && dig.r1 == 1){
 564:main.c        ****                         motor_turn(210,0,0);  //turns right lul
 565:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 566:main.c        ****                     }
 567:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 0){
 568:main.c        ****                         motor_turn(0,210,0);   ///should turn left, right lul??   
 569:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 570:main.c        ****                     }
 571:main.c        ****                     else if (dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.l2 == 
 572:main.c        ****                         motor_turn(0,0,100000);   ///should stop, right lul??   
 573:main.c        **** 
 574:main.c        **** 
 575:main.c        ****                         }
 576:main.c        ****                     }
 577:main.c        ****                 }
 578:main.c        **** 
 579:main.c        **** 
 580:main.c        ****             }    
 581:main.c        ****         }
 582:main.c        **** 
 583:main.c        **** }   
 584:main.c        **** #endif
 585:main.c        **** 
 586:main.c        **** 
 587:main.c        **** #if 0
 588:main.c        **** //reflectance
 589:main.c        **** void zmain(void)
 590:main.c        **** {
 591:main.c        ****     struct sensors_ ref;
 592:main.c        ****     struct sensors_ dig;
 593:main.c        **** 
 594:main.c        ****     reflectance_start();
 595:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 596:main.c        ****     
 597:main.c        **** 
 598:main.c        ****     while(true)
 599:main.c        ****     {
 600:main.c        ****         // read raw sensor values
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 12


 601:main.c        ****         reflectance_read(&ref);
 602:main.c        ****         // print out each period of reflectance sensors
 603:main.c        ****         printf("%5d %5d %5d %5d %5d %5d\r\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3);     
 604:main.c        ****         
 605:main.c        ****         // read digital values that are based on threshold. 0 = white, 1 = black
 606:main.c        ****         // when blackness value is over threshold the sensors reads 1, otherwise 0
 607:main.c        ****         reflectance_digital(&dig); 
 608:main.c        ****         //print out 0 or 1 according to results of reflectance period
 609:main.c        ****         printf("%5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3);    
 610:main.c        ****         
 611:main.c        ****         vTaskDelay(200);
 612:main.c        ****     }
 613:main.c        **** }   
 614:main.c        **** #endif
 615:main.c        **** 
 616:main.c        **** 
 617:main.c        **** #if 0
 618:main.c        **** //motor
 619:main.c        **** void zmain(void)
 620:main.c        **** {
 621:main.c        ****     struct sensors_ ref;
 622:main.c        ****     struct sensors_ dig;
 623:main.c        **** 
 624:main.c        ****     reflectance_start();
 625:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 626:main.c        ****     
 627:main.c        ****     reflectance_digital(&dig);
 628:main.c        ****     
 629:main.c        ****     motor_start();              // enable motor controller
 630:main.c        ****     motor_forward(0,0);         // set speed to zero to stop motors
 631:main.c        **** 
 632:main.c        ****     vTaskDelay(3000);
 633:main.c        ****     
 634:main.c        ****     if(dig.l3, dig.l2, dig.l1){
 635:main.c        ****         
 636:main.c        ****     }
 637:main.c        ****     motor_forward(100,2000);     // moving forward
 638:main.c        ****     motor_turn(200,50,2000);     // turn
 639:main.c        ****     motor_turn(50,200,2000);     // turn
 640:main.c        ****     motor_backward(100,2000);    // moving backward
 641:main.c        ****      
 642:main.c        ****     motor_forward(0,0);         // stop motors
 643:main.c        **** 
 644:main.c        ****     motor_stop();               // disable motor controller
 645:main.c        ****     
 646:main.c        ****     while(true)
 647:main.c        ****     {
 648:main.c        ****         vTaskDelay(100);
 649:main.c        ****     }
 650:main.c        **** }
 651:main.c        **** #endif
 652:main.c        **** 
 653:main.c        **** #if 0
 654:main.c        **** /* Example of how to use te Accelerometer!!!*/
 655:main.c        **** void zmain(void)
 656:main.c        **** {
 657:main.c        ****     struct accData_ data;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 13


 658:main.c        ****     
 659:main.c        ****     printf("Accelerometer test...\n");
 660:main.c        **** 
 661:main.c        ****     if(!LSM303D_Start()){
 662:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 663:main.c        ****         vTaskSuspend(NULL);
 664:main.c        ****     }
 665:main.c        ****     else {
 666:main.c        ****         printf("Device Ok...\n");
 667:main.c        ****     }
 668:main.c        ****     motor_start();              // enable motor controller
 669:main.c        ****     motor_forward(0,0);
 670:main.c        ****     srand(time(NULL));   // Initialization, should only be called once.
 671:main.c        ****     int r=0, counter=0;
 672:main.c        ****     while(true)
 673:main.c        ****     {
 674:main.c        ****         LSM303D_Read_Acc(&data);
 675:main.c        ****        
 676:main.c        ****         motor_forward(200,20);
 677:main.c        ****         //vTaskDelay(200);
 678:main.c        ****         if (counter == 0) r = rand() % 2;
 679:main.c        ****         if (counter > 19){
 680:main.c        ****             counter = 0;
 681:main.c        ****             r = rand() % 2;
 682:main.c        ****         }// Returns a pseudo-random integer between 0 and RAND_MAX.
 683:main.c        ****             if(r == 0){
 684:main.c        ****                 motor_turn(200,50,5);
 685:main.c        ****                 vTaskDelay(0);
 686:main.c        ****                 //motor_forward(0,0);
 687:main.c        ****             }
 688:main.c        ****             else if(r == 1){
 689:main.c        ****                 motor_turn(50,200,5);
 690:main.c        ****                 vTaskDelay(0);
 691:main.c        ****                 //motor_forward(0,0);
 692:main.c        ****             }
 693:main.c        ****             else {
 694:main.c        ****                 motor_forward(200,20);
 695:main.c        ****                 vTaskDelay(0);
 696:main.c        ****             }
 697:main.c        ****         LSM303D_Read_Acc(&data);
 698:main.c        ****         if((data.accX<-4000)){
 699:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 700:main.c        ****             if(r == 0){
 701:main.c        ****                 motor_backward(80,50);
 702:main.c        ****                 motor_turn(200,50,500);
 703:main.c        ****                 vTaskDelay(0);
 704:main.c        ****                 //motor_forward(0,0);
 705:main.c        ****             }
 706:main.c        ****             else{
 707:main.c        ****                 motor_backward(80,50);
 708:main.c        ****                 motor_turn(50,200,500);
 709:main.c        ****                 vTaskDelay(0);
 710:main.c        ****                 //motor_forward(0,0);
 711:main.c        ****             }
 712:main.c        ****             motor_forward(100,100);
 713:main.c        ****         }
 714:main.c        ****         counter++;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 14


 715:main.c        ****         printf("%8d %8d %8d\n",data.accX, data.accY, data.accZ);
 716:main.c        ****         vTaskDelay(0);
 717:main.c        ****     }
 718:main.c        ****  }   
 719:main.c        **** #endif    
 720:main.c        **** 
 721:main.c        **** #if 0
 722:main.c        **** // MQTT test
 723:main.c        **** void zmain(void)
 724:main.c        **** {
 725:main.c        ****     int ctr = 0;
 726:main.c        **** 
 727:main.c        ****     printf("\nBoot\n");
 728:main.c        ****     send_mqtt("Zumo01/debug", "Boot");
 729:main.c        **** 
 730:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 731:main.c        ****     BatteryLed_Write(0); // Switch led off 
 732:main.c        **** 
 733:main.c        ****     while(true)
 734:main.c        ****     {
 735:main.c        ****         printf("Ctr: %d, Button: %d\n", ctr, SW1_Read());
 736:main.c        ****         print_mqtt("Zumo01/debug", "Ctr: %d, Button: %d", ctr, SW1_Read());
 737:main.c        **** 
 738:main.c        ****         vTaskDelay(1000);
 739:main.c        ****         ctr++;
 740:main.c        ****     }
 741:main.c        ****  }   
 742:main.c        **** #endif
 743:main.c        **** 
 744:main.c        **** #if 0
 745:main.c        **** 
 746:main.c        ****     
 747:main.c        **** void zmain(void)
 748:main.c        **** {
 749:main.c        ****     Ultra_Start();
 750:main.c        ****     motor_start(0,0);
 751:main.c        ****     motor_forward(0,0);
 752:main.c        ****     
 753:main.c        ****     vTaskDelay(3000);
 754:main.c        ****     
 755:main.c        ****     while(true){
 756:main.c        ****         int distance = Ultra_GetDistance();
 757:main.c        ****     
 758:main.c        ****         if(distance <= 10 && distance !=0){
 759:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 760:main.c        ****             if(r == 0){
 761:main.c        ****                 motor_turn(50,200,500);
 762:main.c        ****                 vTaskDelay(0);
 763:main.c        ****                 print_mqtt("Zumo006/turn", "left");
 764:main.c        ****                 //motor_forward(0,0);
 765:main.c        ****             }
 766:main.c        ****             else{
 767:main.c        ****                 motor_turn(200,50,500);
 768:main.c        ****                 vTaskDelay(0);
 769:main.c        ****                 print_mqtt("Zumo006/turn", "right");
 770:main.c        ****                 //motor_forward(0,0);
 771:main.c        ****             }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 15


 772:main.c        ****             motor_forward(100,100);
 773:main.c        ****         }
 774:main.c        ****         
 775:main.c        ****     }   
 776:main.c        **** }
 777:main.c        **** #endif
 778:main.c        **** 
 779:main.c        **** #if 0
 780:main.c        **** //IR receiverm - how to wait for IR remote commands
 781:main.c        **** void zmain(void)
 782:main.c        **** {
 783:main.c        ****     RTC_Start(); // start real time clock
 784:main.c        ****     
 785:main.c        ****     RTC_TIME_DATE now;
 786:main.c        **** 
 787:main.c        ****     time_t myTime;
 788:main.c        ****     struct tm * timeinfo;
 789:main.c        ****     time( &myTime );
 790:main.c        ****     timeinfo = localtime( &myTime );
 791:main.c        ****     
 792:main.c        ****     // set current time
 793:main.c        ****     now.Hour = timeinfo->tm_hour;
 794:main.c        ****     now.Min = timeinfo->tm_min;
 795:main.c        ****     now.Sec = timeinfo->tm_sec6;
 796:main.c        ****     now.DayOfMonth = timeinfo->tm_mday;
 797:main.c        ****     now.Month = timeinfo->tm_mon+1;
 798:main.c        ****     now.Year = timeinfo->tm_year+1900;
 799:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 800:main.c        ****     
 801:main.c        ****     uint8_t button_;
 802:main.c        ****     printf("\nStart\n");
 803:main.c        ****     
 804:main.c        ****     while(true){
 805:main.c        ****         button_ = SW1_Read();
 806:main.c        ****         if(button_==0){
 807:main.c        ****             IR_Start();
 808:main.c        ****             printf("\n\nIR test\n");
 809:main.c        ****             struct sensors_ ref;
 810:main.c        ****             struct sensors_ dig;
 811:main.c        ****             bool led = false,loop = true, startline= true;
 812:main.c        ****             int count =0;
 813:main.c        ****             motor_start();              // enable motor controller 
 814:main.c        ****             IR_flush(); // clear IR receive buffer
 815:main.c        ****             printf("Buffer cleared\n");
 816:main.c        ****             
 817:main.c        ****             reflectance_start();
 818:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 819:main.c        ****             vTaskDelay(200);
 820:main.c        ****                 while(startline){
 821:main.c        ****                     // read raw sensor values
 822:main.c        ****                     reflectance_read(&ref);
 823:main.c        ****                     reflectance_digital(&dig); 
 824:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 825:main.c        ****                         motor_turn(50,50,50);       // motor forward
 826:main.c        ****                         Beep(60,80);
 827:main.c        ****                     }
 828:main.c        ****                     else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 16


 829:main.c        ****                         motor_forward(0,0);       // Stop motors
 830:main.c        ****                         startline = false;
 831:main.c        ****                     }
 832:main.c        ****                 }
 833:main.c        ****             IR_wait();  // wait for IR command
 834:main.c        ****             led = !led;
 835:main.c        ****             BatteryLed_Write(led);   
 836:main.c        ****             
 837:main.c        ****             // Toggle led when IR signal is received
 838:main.c        ****             while(loop)
 839:main.c        ****             {   
 840:main.c        ****                 if(led){
 841:main.c        ****                     // read raw sensor values
 842:main.c        ****                     reflectance_read(&ref);
 843:main.c        ****                     reflectance_digital(&dig); 
 844:main.c        ****                     
 845:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 846:main.c        ****                         motor_turn(50,50,50);       // motor forward
 847:main.c        ****                         motor_forward(0,0);       // Stop motors
 848:main.c        ****                         vTaskDelay(50);
 849:main.c        ****                         count++;
 850:main.c        ****                         printf("count %d \n",count);
 851:main.c        ****                         printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 852:main.c        ****                         print_mqtt("Zumo006/lap", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 853:main.c        ****                         /*if(count >= 7){
 854:main.c        ****                             motor_forward(0,0);       // Stop motors
 855:main.c        ****                             loop = false;
 856:main.c        ****                         }*/
 857:main.c        ****                     }
 858:main.c        ****                     else{
 859:main.c        ****                          motor_turn(50,50,50);       // motor forward
 860:main.c        ****                         Beep(100,100);
 861:main.c        ****                     }
 862:main.c        ****                 }
 863:main.c        ****                 else {
 864:main.c        ****                     printf("Led is OFF\n");
 865:main.c        ****                     loop = false;
 866:main.c        ****                 }
 867:main.c        ****                
 868:main.c        ****             }    
 869:main.c        ****         }
 870:main.c        ****     }
 871:main.c        ****  }
 872:main.c        **** #endif
 873:main.c        **** 
 874:main.c        **** #if 0
 875:main.c        **** void zmain(void)
 876:main.c        **** {    
 877:main.c        ****     struct accData_ data;
 878:main.c        ****     struct sensors_ ref;
 879:main.c        ****     struct sensors_ dig;
 880:main.c        ****     
 881:main.c        ****     printf("MQTT and sensor test...\n");
 882:main.c        **** 
 883:main.c        ****     if(!LSM303D_Start()){
 884:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 885:main.c        ****         vTaskSuspend(NULL);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 17


 886:main.c        ****     }
 887:main.c        ****     else {
 888:main.c        ****         printf("Accelerometer Ok...\n");
 889:main.c        ****     }
 890:main.c        ****     
 891:main.c        ****     int ctr = 0;
 892:main.c        ****     reflectance_start();
 893:main.c        ****     while(true)
 894:main.c        ****     {
 895:main.c        ****         LSM303D_Read_Acc(&data);
 896:main.c        ****         // send data when we detect a hit and at 10 second intervals
 897:main.c        ****         if(data.accX > 1500 || ++ctr > 1000) {
 898:main.c        ****             printf("Acc: %8d %8d %8d\n",data.accX, data.accY, data.accZ);
 899:main.c        ****             print_mqtt("Zumo01/acc", "%d,%d,%d", data.accX, data.accY, data.accZ);
 900:main.c        ****             reflectance_read(&ref);
 901:main.c        ****             printf("Ref: %8d %8d %8d %8d %8d %8d\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3
 902:main.c        ****             print_mqtt("Zumo01/ref", "%d,%d,%d,%d,%d,%d", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, r
 903:main.c        ****             reflectance_digital(&dig);
 904:main.c        ****             printf("Dig: %8d %8d %8d %8d %8d %8d\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3
 905:main.c        ****             print_mqtt("Zumo01/dig", "%d,%d,%d,%d,%d,%d", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, d
 906:main.c        ****             ctr = 0;
 907:main.c        ****         }
 908:main.c        ****         vTaskDelay(10);
 909:main.c        ****     }
 910:main.c        ****  }   
 911:main.c        **** 
 912:main.c        **** #endif
 913:main.c        **** 
 914:main.c        **** #if 0
 915:main.c        **** void zmain(void)
 916:main.c        **** {    
 917:main.c        ****     RTC_Start(); // start real time clock
 918:main.c        ****     
 919:main.c        ****     RTC_TIME_DATE now;
 920:main.c        **** 
 921:main.c        ****     // set current time
 922:main.c        ****     now.Hour = 12;
 923:main.c        ****     now.Min = 34;
 924:main.c        ****     now.Sec = 56;
 925:main.c        ****     now.DayOfMonth = 25;
 926:main.c        ****     now.Month = 9;
 927:main.c        ****     now.Year = 2018;
 928:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 929:main.c        **** 
 930:main.c        ****     while(true)
 931:main.c        ****     {
 932:main.c        ****         if(SW1_Read() == 0) {
 933:main.c        ****             // read the current time
 934:main.c        ****             RTC_DisableInt(); // Disable Interrupt of RTC Component
 935:main.c        ****             now = *RTC_ReadTime(); // copy the current time to a local variable
 936:main.c        ****             RTC_EnableInt(); // Enable Interrupt of RTC Component
 937:main.c        **** 
 938:main.c        ****             // print the current time
 939:main.c        ****             printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 940:main.c        ****             print_mqtt("Zumo006/time", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 941:main.c        ****             
 942:main.c        ****             // wait until button is released
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 18


 943:main.c        ****             while(SW1_Read() == 0) vTaskDelay(50);
 944:main.c        ****         }
 945:main.c        ****         vTaskDelay(50);
 946:main.c        ****     }
 947:main.c        ****  }   
 948:main.c        **** #endif
 949:main.c        **** 
 950:main.c        **** #if 1
 951:main.c        **** //main project
 952:main.c        **** void zmain(void)
 953:main.c        **** {
  28              		.loc 1 953 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 8AB0     		sub	sp, sp, #40
  37              		.cfi_def_cfa_offset 48
 954:main.c        ****     struct accData_ data;
 955:main.c        ****     
 956:main.c        ****     uint8_t button_;
 957:main.c        ****     printf("\nStart\n");
  38              		.loc 1 957 0
  39 0004 6548     		ldr	r0, .L18
  40 0006 FFF7FEFF 		bl	puts
  41              	.LVL0:
  42              	.L2:
 958:main.c        ****     
 959:main.c        ****     while(true){
 960:main.c        ****         button_ = SW1_Read();
  43              		.loc 1 960 0
  44 000a FFF7FEFF 		bl	SW1_Read
  45              	.LVL1:
 961:main.c        ****         if(button_==0){
  46              		.loc 1 961 0
  47 000e 0028     		cmp	r0, #0
  48 0010 FBD1     		bne	.L2
  49              	.LBB2:
 962:main.c        ****             IR_Start();
  50              		.loc 1 962 0
  51 0012 FFF7FEFF 		bl	IR_Start
  52              	.LVL2:
 963:main.c        ****             printf("\n\nIR test\n");
  53              		.loc 1 963 0
  54 0016 6248     		ldr	r0, .L18+4
  55 0018 FFF7FEFF 		bl	puts
  56              	.LVL3:
 964:main.c        ****             struct sensors_ ref;
 965:main.c        ****             struct sensors_ dig;
 966:main.c        ****             bool led = false,loop1 = true, startline= true, loop2 = true;
 967:main.c        ****             int count =0;
 968:main.c        ****             motor_start();              // enable motor controller
  57              		.loc 1 968 0
  58 001c FFF7FEFF 		bl	motor_start
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 19


  59              	.LVL4:
 969:main.c        ****             print_mqtt("Zumo006/ready","line");
  60              		.loc 1 969 0
  61 0020 6049     		ldr	r1, .L18+8
  62 0022 6148     		ldr	r0, .L18+12
  63 0024 FFF7FEFF 		bl	print_mqtt
  64              	.LVL5:
 970:main.c        ****             IR_flush(); // clear IR receive buffer
  65              		.loc 1 970 0
  66 0028 FFF7FEFF 		bl	IR_flush
  67              	.LVL6:
 971:main.c        ****             printf("Buffer cleared\n");
  68              		.loc 1 971 0
  69 002c 5F48     		ldr	r0, .L18+16
  70 002e FFF7FEFF 		bl	puts
  71              	.LVL7:
 972:main.c        ****             
 973:main.c        ****             reflectance_start();
  72              		.loc 1 973 0
  73 0032 FFF7FEFF 		bl	reflectance_start
  74              	.LVL8:
 974:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
  75              		.loc 1 974 0
  76 0036 42F22830 		movw	r0, #9000
  77 003a 0190     		str	r0, [sp, #4]
  78 003c 0090     		str	r0, [sp]
  79 003e 42F6F823 		movw	r3, #11000
  80 0042 1A46     		mov	r2, r3
  81 0044 0146     		mov	r1, r0
  82 0046 FFF7FEFF 		bl	reflectance_set_threshold
  83              	.LVL9:
 975:main.c        ****             vTaskDelay(200);
  84              		.loc 1 975 0
  85 004a C820     		movs	r0, #200
  86 004c FFF7FEFF 		bl	vTaskDelay
  87              	.LVL10:
 966:main.c        ****             int count =0;
  88              		.loc 1 966 0
  89 0050 0124     		movs	r4, #1
 976:main.c        ****                 while(startline){
  90              		.loc 1 976 0
  91 0052 1CE0     		b	.L3
  92              	.LVL11:
  93              	.L6:
 977:main.c        ****                     // read raw sensor values
 978:main.c        ****                     reflectance_read(&ref);
  94              		.loc 1 978 0
  95 0054 02A8     		add	r0, sp, #8
  96 0056 FFF7FEFF 		bl	reflectance_read
  97              	.LVL12:
 979:main.c        ****                     reflectance_digital(&dig); 
  98              		.loc 1 979 0
  99 005a 05A8     		add	r0, sp, #20
 100 005c FFF7FEFF 		bl	reflectance_digital
 101              	.LVL13:
 980:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 102              		.loc 1 980 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 20


 103 0060 BDF81430 		ldrh	r3, [sp, #20]
 104 0064 012B     		cmp	r3, #1
 105 0066 0DD0     		beq	.L4
 106              		.loc 1 980 0 is_stmt 0 discriminator 1
 107 0068 BDF81E30 		ldrh	r3, [sp, #30]
 108 006c 012B     		cmp	r3, #1
 109 006e 09D0     		beq	.L4
 981:main.c        ****                         motor_turn(50,50,50);       // motor forward
 110              		.loc 1 981 0 is_stmt 1
 111 0070 3222     		movs	r2, #50
 112 0072 1146     		mov	r1, r2
 113 0074 1046     		mov	r0, r2
 114 0076 FFF7FEFF 		bl	motor_turn
 115              	.LVL14:
 982:main.c        ****                         Beep(60,80);
 116              		.loc 1 982 0
 117 007a 5021     		movs	r1, #80
 118 007c 3C20     		movs	r0, #60
 119 007e FFF7FEFF 		bl	Beep
 120              	.LVL15:
 121 0082 04E0     		b	.L3
 122              	.L4:
 983:main.c        ****                     }
 984:main.c        ****                     else{
 985:main.c        ****                         motor_forward(0,0);       // Stop motors
 123              		.loc 1 985 0
 124 0084 0021     		movs	r1, #0
 125 0086 0846     		mov	r0, r1
 126 0088 FFF7FEFF 		bl	motor_forward
 127              	.LVL16:
 986:main.c        ****                         startline = false;
 128              		.loc 1 986 0
 129 008c 0024     		movs	r4, #0
 130              	.LVL17:
 131              	.L3:
 976:main.c        ****                     // read raw sensor values
 132              		.loc 1 976 0
 133 008e 002C     		cmp	r4, #0
 134 0090 E0D1     		bne	.L6
 987:main.c        ****                     }
 988:main.c        ****                 }
 989:main.c        ****             print_mqtt("Zumo006/ready","line");
 135              		.loc 1 989 0
 136 0092 4449     		ldr	r1, .L18+8
 137 0094 4448     		ldr	r0, .L18+12
 138 0096 FFF7FEFF 		bl	print_mqtt
 139              	.LVL18:
 990:main.c        ****             IR_wait();  // wait for IR command
 140              		.loc 1 990 0
 141 009a FFF7FEFF 		bl	IR_wait
 142              	.LVL19:
 991:main.c        ****             CySysTickEnable();
 143              		.loc 1 991 0
 144 009e FFF7FEFF 		bl	CySysTickEnable
 145              	.LVL20:
 992:main.c        ****             CySysTickStart();
 146              		.loc 1 992 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 21


 147 00a2 FFF7FEFF 		bl	CySysTickStart
 148              	.LVL21:
 993:main.c        ****             int start = CySysTickGetValue();
 149              		.loc 1 993 0
 150 00a6 FFF7FEFF 		bl	CySysTickGetValue
 151              	.LVL22:
 994:main.c        ****             print_mqtt("Zumo006/start","%d", start);
 152              		.loc 1 994 0
 153 00aa 0246     		mov	r2, r0
 154 00ac 4049     		ldr	r1, .L18+20
 155 00ae 4148     		ldr	r0, .L18+24
 156              	.LVL23:
 157 00b0 FFF7FEFF 		bl	print_mqtt
 158              	.LVL24:
 995:main.c        ****             led = !led;
 996:main.c        ****             BatteryLed_Write(led);   
 159              		.loc 1 996 0
 160 00b4 0120     		movs	r0, #1
 161 00b6 FFF7FEFF 		bl	BatteryLed_Write
 162              	.LVL25:
 163 00ba 65E0     		b	.L7
 164              	.LVL26:
 165              	.L12:
 166              	.LBB3:
 997:main.c        ****             
 998:main.c        ****             // Toggle led when IR signal is received
 999:main.c        ****             while(loop1)
1000:main.c        ****             {   
1001:main.c        ****                 if(led){
1002:main.c        ****                     while(loop2){
1003:main.c        ****                     // read raw sensor values
1004:main.c        ****                     reflectance_read(&ref);
1005:main.c        ****                     reflectance_digital(&dig); 
1006:main.c        **** 
1007:main.c        ****                     LSM303D_Read_Acc(&data);
1008:main.c        ****                     while(dig.l2 != 1 || dig.r2 != 1){
1009:main.c        ****                         //motor_turn(50,50,0);
1010:main.c        ****                         if(data.accX<-4000){
 167              		.loc 1 1010 0
 168 00bc BDF92030 		ldrsh	r3, [sp, #32]
 169 00c0 13F57A6F 		cmn	r3, #4000
 170 00c4 2CDA     		bge	.L8
 171              	.LBB4:
1011:main.c        ****                             print_mqtt("Zumo006/hit","%d", CySysTickGetValue());
 172              		.loc 1 1011 0
 173 00c6 FFF7FEFF 		bl	CySysTickGetValue
 174              	.LVL27:
 175 00ca 0246     		mov	r2, r0
 176 00cc 3849     		ldr	r1, .L18+20
 177 00ce 3A48     		ldr	r0, .L18+28
 178 00d0 FFF7FEFF 		bl	print_mqtt
 179              	.LVL28:
1012:main.c        ****                             int r = rand() % 2;      // Returns a pseudo-random integer between 0 a
 180              		.loc 1 1012 0
 181 00d4 FFF7FEFF 		bl	rand
 182              	.LVL29:
 183 00d8 384C     		ldr	r4, .L18+32
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 22


 184 00da 0440     		ands	r4, r0, r4
 185 00dc 03D5     		bpl	.L9
 186 00de 013C     		subs	r4, r4, #1
 187 00e0 64F00104 		orn	r4, r4, #1
 188 00e4 0134     		adds	r4, r4, #1
 189              	.L9:
 190              	.LVL30:
1013:main.c        ****                             int r1 = rand() % 500;
 191              		.loc 1 1013 0
 192 00e6 FFF7FEFF 		bl	rand
 193              	.LVL31:
 194 00ea 354A     		ldr	r2, .L18+36
 195 00ec 82FB0032 		smull	r3, r2, r2, r0
 196 00f0 C317     		asrs	r3, r0, #31
 197 00f2 C3EB6212 		rsb	r2, r3, r2, asr #5
 198 00f6 4FF4FA73 		mov	r3, #500
 199 00fa 03FB1202 		mls	r2, r3, r2, r0
 200              	.LVL32:
1014:main.c        ****                             if(r == 0){
 201              		.loc 1 1014 0
 202 00fe 3CB9     		cbnz	r4, .L10
1015:main.c        ****                                 //motor_backward(80,50);
1016:main.c        ****                                 motor_turn(200,50,r1);
 203              		.loc 1 1016 0
 204 0100 3221     		movs	r1, #50
 205 0102 C820     		movs	r0, #200
 206 0104 FFF7FEFF 		bl	motor_turn
 207              	.LVL33:
1017:main.c        ****                                 vTaskDelay(0);
 208              		.loc 1 1017 0
 209 0108 0020     		movs	r0, #0
 210 010a FFF7FEFF 		bl	vTaskDelay
 211              	.LVL34:
 212 010e 0CE0     		b	.L16
 213              	.LVL35:
 214              	.L10:
1018:main.c        ****                             }
1019:main.c        ****                             else{
1020:main.c        ****                                 motor_turn(50,200,r1);
 215              		.loc 1 1020 0
 216 0110 C821     		movs	r1, #200
 217 0112 3220     		movs	r0, #50
 218 0114 FFF7FEFF 		bl	motor_turn
 219              	.LVL36:
1021:main.c        ****                                 vTaskDelay(0);
 220              		.loc 1 1021 0
 221 0118 0020     		movs	r0, #0
 222 011a FFF7FEFF 		bl	vTaskDelay
 223              	.LVL37:
 224 011e 04E0     		b	.L16
 225              	.LVL38:
 226              	.L8:
 227              	.LBE4:
1022:main.c        ****                             }
1023:main.c        ****                         }
1024:main.c        ****                         else{
1025:main.c        ****                             motor_turn(50,50,0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 23


 228              		.loc 1 1025 0
 229 0120 0022     		movs	r2, #0
 230 0122 3221     		movs	r1, #50
 231 0124 0846     		mov	r0, r1
 232 0126 FFF7FEFF 		bl	motor_turn
 233              	.LVL39:
 234              	.L16:
1008:main.c        ****                         //motor_turn(50,50,0);
 235              		.loc 1 1008 0
 236 012a BDF81630 		ldrh	r3, [sp, #22]
 237 012e 012B     		cmp	r3, #1
 238 0130 C4D1     		bne	.L12
1008:main.c        ****                         //motor_turn(50,50,0);
 239              		.loc 1 1008 0 is_stmt 0 discriminator 1
 240 0132 BDF81C30 		ldrh	r3, [sp, #28]
 241 0136 012B     		cmp	r3, #1
 242 0138 C0D1     		bne	.L12
1026:main.c        ****                         }
1027:main.c        ****                         
1028:main.c        ****                     }
1029:main.c        ****                     int r2 = rand() % 1000;
 243              		.loc 1 1029 0 is_stmt 1
 244 013a FFF7FEFF 		bl	rand
 245              	.LVL40:
 246 013e 204C     		ldr	r4, .L18+36
 247 0140 84FB0034 		smull	r3, r4, r4, r0
 248 0144 C317     		asrs	r3, r0, #31
 249 0146 C3EBA414 		rsb	r4, r3, r4, asr #6
 250 014a 4FF47A73 		mov	r3, #1000
 251 014e 03FB1404 		mls	r4, r3, r4, r0
 252              	.LVL41:
1030:main.c        ****                     int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_
 253              		.loc 1 1030 0
 254 0152 FFF7FEFF 		bl	rand
 255              	.LVL42:
 256 0156 194B     		ldr	r3, .L18+32
 257 0158 1840     		ands	r0, r0, r3
 258 015a 03D5     		bpl	.L13
 259 015c 0138     		subs	r0, r0, #1
 260 015e 60F00100 		orn	r0, r0, #1
 261 0162 0130     		adds	r0, r0, #1
 262              	.L13:
 263              	.LVL43:
1031:main.c        ****                     if(r==0) {
 264              		.loc 1 1031 0
 265 0164 40B9     		cbnz	r0, .L14
1032:main.c        ****                         motor_turn(50,200,r2);
 266              		.loc 1 1032 0
 267 0166 2246     		mov	r2, r4
 268 0168 C821     		movs	r1, #200
 269 016a 3220     		movs	r0, #50
 270              	.LVL44:
 271 016c FFF7FEFF 		bl	motor_turn
 272              	.LVL45:
1033:main.c        ****                         vTaskDelay(0);
 273              		.loc 1 1033 0
 274 0170 0020     		movs	r0, #0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 24


 275 0172 FFF7FEFF 		bl	vTaskDelay
 276              	.LVL46:
 277 0176 07E0     		b	.L7
 278              	.LVL47:
 279              	.L14:
1034:main.c        ****                     }
1035:main.c        ****                     else {
1036:main.c        ****                         motor_turn(50,200,r2);
 280              		.loc 1 1036 0
 281 0178 2246     		mov	r2, r4
 282 017a C821     		movs	r1, #200
 283 017c 3220     		movs	r0, #50
 284              	.LVL48:
 285 017e FFF7FEFF 		bl	motor_turn
 286              	.LVL49:
1037:main.c        ****                         vTaskDelay(0);
 287              		.loc 1 1037 0
 288 0182 0020     		movs	r0, #0
 289 0184 FFF7FEFF 		bl	vTaskDelay
 290              	.LVL50:
 291              	.L7:
1004:main.c        ****                     reflectance_digital(&dig); 
 292              		.loc 1 1004 0
 293 0188 02A8     		add	r0, sp, #8
 294 018a FFF7FEFF 		bl	reflectance_read
 295              	.LVL51:
1005:main.c        **** 
 296              		.loc 1 1005 0
 297 018e 05A8     		add	r0, sp, #20
 298 0190 FFF7FEFF 		bl	reflectance_digital
 299              	.LVL52:
1007:main.c        ****                     while(dig.l2 != 1 || dig.r2 != 1){
 300              		.loc 1 1007 0
 301 0194 08A8     		add	r0, sp, #32
 302 0196 FFF7FEFF 		bl	LSM303D_Read_Acc
 303              	.LVL53:
1008:main.c        ****                         //motor_turn(50,50,0);
 304              		.loc 1 1008 0
 305 019a C6E7     		b	.L16
 306              	.L19:
 307              		.align	2
 308              	.L18:
 309 019c 00000000 		.word	.LC0
 310 01a0 08000000 		.word	.LC1
 311 01a4 14000000 		.word	.LC2
 312 01a8 1C000000 		.word	.LC3
 313 01ac 2C000000 		.word	.LC4
 314 01b0 3C000000 		.word	.LC5
 315 01b4 40000000 		.word	.LC6
 316 01b8 50000000 		.word	.LC7
 317 01bc 01000080 		.word	-2147483647
 318 01c0 D34D6210 		.word	274877907
 319              	.LBE3:
 320              	.LBE2:
 321              		.cfi_endproc
 322              	.LFE85:
 323              		.size	zmain, .-zmain
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 25


 324              		.section	.rodata.str1.4,"aMS",%progbits,1
 325              		.align	2
 326              	.LC0:
 327 0000 0A537461 		.ascii	"\012Start\000"
 327      727400
 328 0007 00       		.space	1
 329              	.LC1:
 330 0008 0A0A4952 		.ascii	"\012\012IR test\000"
 330      20746573 
 330      7400
 331 0012 0000     		.space	2
 332              	.LC2:
 333 0014 6C696E65 		.ascii	"line\000"
 333      00
 334 0019 000000   		.space	3
 335              	.LC3:
 336 001c 5A756D6F 		.ascii	"Zumo006/ready\000"
 336      3030362F 
 336      72656164 
 336      7900
 337 002a 0000     		.space	2
 338              	.LC4:
 339 002c 42756666 		.ascii	"Buffer cleared\000"
 339      65722063 
 339      6C656172 
 339      656400
 340 003b 00       		.space	1
 341              	.LC5:
 342 003c 256400   		.ascii	"%d\000"
 343 003f 00       		.space	1
 344              	.LC6:
 345 0040 5A756D6F 		.ascii	"Zumo006/start\000"
 345      3030362F 
 345      73746172 
 345      7400
 346 004e 0000     		.space	2
 347              	.LC7:
 348 0050 5A756D6F 		.ascii	"Zumo006/hit\000"
 348      3030362F 
 348      68697400 
 349              		.text
 350              	.Letext0:
 351              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 352              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 353              		.file 4 ".\\ZumoLibrary/Reflectance.h"
 354              		.file 5 ".\\ZumoLibrary/LSM303D.h"
 355              		.file 6 "Generated_Source\\PSoC5/CyLib.h"
 356              		.file 7 ".\\ZumoLibrary/mqtt_sender.h"
 357              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 358              		.file 9 ".\\ZumoLibrary/Motor.h"
 359              		.file 10 "..\\FreeRTOS\\Source\\include/task.h"
 360              		.file 11 ".\\ZumoLibrary/IR.h"
 361              		.file 12 ".\\ZumoLibrary/Beep.h"
 362              		.file 13 "Generated_Source\\PSoC5/BatteryLed.h"
 363              		.file 14 "Generated_Source\\PSoC5/SW1.h"
 364              		.file 15 "Generated_Source\\PSoC5/core_cm3.h"
 365              		.file 16 "<built-in>"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 26


 366              		.section	.debug_info,"",%progbits
 367              	.Ldebug_info0:
 368 0000 AF060000 		.4byte	0x6af
 369 0004 0400     		.2byte	0x4
 370 0006 00000000 		.4byte	.Ldebug_abbrev0
 371 000a 04       		.byte	0x4
 372 000b 01       		.uleb128 0x1
 373 000c D3020000 		.4byte	.LASF55
 374 0010 0C       		.byte	0xc
 375 0011 49020000 		.4byte	.LASF56
 376 0015 42000000 		.4byte	.LASF57
 377 0019 00000000 		.4byte	.Ldebug_ranges0+0
 378 001d 00000000 		.4byte	0
 379 0021 00000000 		.4byte	.Ldebug_line0
 380 0025 02       		.uleb128 0x2
 381 0026 01       		.byte	0x1
 382 0027 06       		.byte	0x6
 383 0028 85010000 		.4byte	.LASF0
 384 002c 03       		.uleb128 0x3
 385 002d 25010000 		.4byte	.LASF2
 386 0031 02       		.byte	0x2
 387 0032 1D       		.byte	0x1d
 388 0033 37000000 		.4byte	0x37
 389 0037 02       		.uleb128 0x2
 390 0038 01       		.byte	0x1
 391 0039 08       		.byte	0x8
 392 003a 5D010000 		.4byte	.LASF1
 393 003e 03       		.uleb128 0x3
 394 003f AD020000 		.4byte	.LASF3
 395 0043 02       		.byte	0x2
 396 0044 29       		.byte	0x29
 397 0045 49000000 		.4byte	0x49
 398 0049 02       		.uleb128 0x2
 399 004a 02       		.byte	0x2
 400 004b 05       		.byte	0x5
 401 004c 15000000 		.4byte	.LASF4
 402 0050 03       		.uleb128 0x3
 403 0051 37000000 		.4byte	.LASF5
 404 0055 02       		.byte	0x2
 405 0056 2B       		.byte	0x2b
 406 0057 5B000000 		.4byte	0x5b
 407 005b 02       		.uleb128 0x2
 408 005c 02       		.byte	0x2
 409 005d 07       		.byte	0x7
 410 005e F4010000 		.4byte	.LASF6
 411 0062 03       		.uleb128 0x3
 412 0063 92020000 		.4byte	.LASF7
 413 0067 02       		.byte	0x2
 414 0068 3F       		.byte	0x3f
 415 0069 6D000000 		.4byte	0x6d
 416 006d 02       		.uleb128 0x2
 417 006e 04       		.byte	0x4
 418 006f 05       		.byte	0x5
 419 0070 01010000 		.4byte	.LASF8
 420 0074 02       		.uleb128 0x2
 421 0075 04       		.byte	0x4
 422 0076 07       		.byte	0x7
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 27


 423 0077 50020000 		.4byte	.LASF9
 424 007b 02       		.uleb128 0x2
 425 007c 08       		.byte	0x8
 426 007d 05       		.byte	0x5
 427 007e DF000000 		.4byte	.LASF10
 428 0082 02       		.uleb128 0x2
 429 0083 08       		.byte	0x8
 430 0084 07       		.byte	0x7
 431 0085 A2010000 		.4byte	.LASF11
 432 0089 04       		.uleb128 0x4
 433 008a 04       		.byte	0x4
 434 008b 05       		.byte	0x5
 435 008c 696E7400 		.ascii	"int\000"
 436 0090 02       		.uleb128 0x2
 437 0091 04       		.byte	0x4
 438 0092 07       		.byte	0x7
 439 0093 CD010000 		.4byte	.LASF12
 440 0097 03       		.uleb128 0x3
 441 0098 99000000 		.4byte	.LASF13
 442 009c 03       		.byte	0x3
 443 009d 18       		.byte	0x18
 444 009e 2C000000 		.4byte	0x2c
 445 00a2 03       		.uleb128 0x3
 446 00a3 22020000 		.4byte	.LASF14
 447 00a7 03       		.byte	0x3
 448 00a8 20       		.byte	0x20
 449 00a9 3E000000 		.4byte	0x3e
 450 00ad 03       		.uleb128 0x3
 451 00ae DA010000 		.4byte	.LASF15
 452 00b2 03       		.byte	0x3
 453 00b3 24       		.byte	0x24
 454 00b4 50000000 		.4byte	0x50
 455 00b8 03       		.uleb128 0x3
 456 00b9 1A020000 		.4byte	.LASF16
 457 00bd 03       		.byte	0x3
 458 00be 2C       		.byte	0x2c
 459 00bf 62000000 		.4byte	0x62
 460 00c3 02       		.uleb128 0x2
 461 00c4 04       		.byte	0x4
 462 00c5 04       		.byte	0x4
 463 00c6 D9000000 		.4byte	.LASF17
 464 00ca 02       		.uleb128 0x2
 465 00cb 08       		.byte	0x8
 466 00cc 04       		.byte	0x4
 467 00cd 62020000 		.4byte	.LASF18
 468 00d1 02       		.uleb128 0x2
 469 00d2 01       		.byte	0x1
 470 00d3 08       		.byte	0x8
 471 00d4 15020000 		.4byte	.LASF19
 472 00d8 02       		.uleb128 0x2
 473 00d9 08       		.byte	0x8
 474 00da 04       		.byte	0x4
 475 00db 38010000 		.4byte	.LASF20
 476 00df 02       		.uleb128 0x2
 477 00e0 04       		.byte	0x4
 478 00e1 07       		.byte	0x7
 479 00e2 1F000000 		.4byte	.LASF21
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 28


 480 00e6 05       		.uleb128 0x5
 481 00e7 90000000 		.4byte	.LASF22
 482 00eb 0C       		.byte	0xc
 483 00ec 04       		.byte	0x4
 484 00ed 0E       		.byte	0xe
 485 00ee 35010000 		.4byte	0x135
 486 00f2 06       		.uleb128 0x6
 487 00f3 6C3300   		.ascii	"l3\000"
 488 00f6 04       		.byte	0x4
 489 00f7 0F       		.byte	0xf
 490 00f8 AD000000 		.4byte	0xad
 491 00fc 00       		.byte	0
 492 00fd 06       		.uleb128 0x6
 493 00fe 6C3200   		.ascii	"l2\000"
 494 0101 04       		.byte	0x4
 495 0102 10       		.byte	0x10
 496 0103 AD000000 		.4byte	0xad
 497 0107 02       		.byte	0x2
 498 0108 06       		.uleb128 0x6
 499 0109 6C3100   		.ascii	"l1\000"
 500 010c 04       		.byte	0x4
 501 010d 11       		.byte	0x11
 502 010e AD000000 		.4byte	0xad
 503 0112 04       		.byte	0x4
 504 0113 06       		.uleb128 0x6
 505 0114 723100   		.ascii	"r1\000"
 506 0117 04       		.byte	0x4
 507 0118 12       		.byte	0x12
 508 0119 AD000000 		.4byte	0xad
 509 011d 06       		.byte	0x6
 510 011e 06       		.uleb128 0x6
 511 011f 723200   		.ascii	"r2\000"
 512 0122 04       		.byte	0x4
 513 0123 13       		.byte	0x13
 514 0124 AD000000 		.4byte	0xad
 515 0128 08       		.byte	0x8
 516 0129 06       		.uleb128 0x6
 517 012a 723300   		.ascii	"r3\000"
 518 012d 04       		.byte	0x4
 519 012e 14       		.byte	0x14
 520 012f AD000000 		.4byte	0xad
 521 0133 0A       		.byte	0xa
 522 0134 00       		.byte	0
 523 0135 05       		.uleb128 0x5
 524 0136 1C010000 		.4byte	.LASF23
 525 013a 06       		.byte	0x6
 526 013b 05       		.byte	0x5
 527 013c 47       		.byte	0x47
 528 013d 66010000 		.4byte	0x166
 529 0141 07       		.uleb128 0x7
 530 0142 28000000 		.4byte	.LASF24
 531 0146 05       		.byte	0x5
 532 0147 49       		.byte	0x49
 533 0148 A2000000 		.4byte	0xa2
 534 014c 00       		.byte	0
 535 014d 07       		.uleb128 0x7
 536 014e 2D000000 		.4byte	.LASF25
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 29


 537 0152 05       		.byte	0x5
 538 0153 4A       		.byte	0x4a
 539 0154 A2000000 		.4byte	0xa2
 540 0158 02       		.byte	0x2
 541 0159 07       		.uleb128 0x7
 542 015a 32000000 		.4byte	.LASF26
 543 015e 05       		.byte	0x5
 544 015f 4B       		.byte	0x4b
 545 0160 A2000000 		.4byte	0xa2
 546 0164 04       		.byte	0x4
 547 0165 00       		.byte	0
 548 0166 08       		.uleb128 0x8
 549 0167 8C020000 		.4byte	.LASF58
 550 016b 01       		.byte	0x1
 551 016c B803     		.2byte	0x3b8
 552 016e 00000000 		.4byte	.LFB85
 553 0172 C4010000 		.4byte	.LFE85-.LFB85
 554 0176 01       		.uleb128 0x1
 555 0177 9C       		.byte	0x9c
 556 0178 AE050000 		.4byte	0x5ae
 557 017c 09       		.uleb128 0x9
 558 017d 3B020000 		.4byte	.LASF27
 559 0181 01       		.byte	0x1
 560 0182 BA03     		.2byte	0x3ba
 561 0184 35010000 		.4byte	0x135
 562 0188 02       		.uleb128 0x2
 563 0189 91       		.byte	0x91
 564 018a 70       		.sleb128 -16
 565 018b 0A       		.uleb128 0xa
 566 018c 84020000 		.4byte	.LASF28
 567 0190 01       		.byte	0x1
 568 0191 BC03     		.2byte	0x3bc
 569 0193 97000000 		.4byte	0x97
 570 0197 00000000 		.4byte	.LLST0
 571 019b 0B       		.uleb128 0xb
 572 019c 12000000 		.4byte	.LBB2
 573 01a0 B2010000 		.4byte	.LBE2-.LBB2
 574 01a4 8D050000 		.4byte	0x58d
 575 01a8 0C       		.uleb128 0xc
 576 01a9 72656600 		.ascii	"ref\000"
 577 01ad 01       		.byte	0x1
 578 01ae C403     		.2byte	0x3c4
 579 01b0 E6000000 		.4byte	0xe6
 580 01b4 02       		.uleb128 0x2
 581 01b5 91       		.byte	0x91
 582 01b6 58       		.sleb128 -40
 583 01b7 0C       		.uleb128 0xc
 584 01b8 64696700 		.ascii	"dig\000"
 585 01bc 01       		.byte	0x1
 586 01bd C503     		.2byte	0x3c5
 587 01bf E6000000 		.4byte	0xe6
 588 01c3 02       		.uleb128 0x2
 589 01c4 91       		.byte	0x91
 590 01c5 64       		.sleb128 -28
 591 01c6 0D       		.uleb128 0xd
 592 01c7 6C656400 		.ascii	"led\000"
 593 01cb 01       		.byte	0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 30


 594 01cc C603     		.2byte	0x3c6
 595 01ce AE050000 		.4byte	0x5ae
 596 01d2 13000000 		.4byte	.LLST1
 597 01d6 0E       		.uleb128 0xe
 598 01d7 A1000000 		.4byte	.LASF29
 599 01db 01       		.byte	0x1
 600 01dc C603     		.2byte	0x3c6
 601 01de AE050000 		.4byte	0x5ae
 602 01e2 01       		.byte	0x1
 603 01e3 0A       		.uleb128 0xa
 604 01e4 A7000000 		.4byte	.LASF30
 605 01e8 01       		.byte	0x1
 606 01e9 C603     		.2byte	0x3c6
 607 01eb AE050000 		.4byte	0x5ae
 608 01ef 33000000 		.4byte	.LLST2
 609 01f3 0E       		.uleb128 0xe
 610 01f4 E3010000 		.4byte	.LASF31
 611 01f8 01       		.byte	0x1
 612 01f9 C603     		.2byte	0x3c6
 613 01fb AE050000 		.4byte	0x5ae
 614 01ff 01       		.byte	0x1
 615 0200 0E       		.uleb128 0xe
 616 0201 BC000000 		.4byte	.LASF32
 617 0205 01       		.byte	0x1
 618 0206 C703     		.2byte	0x3c7
 619 0208 89000000 		.4byte	0x89
 620 020c 00       		.byte	0
 621 020d 0A       		.uleb128 0xa
 622 020e EE010000 		.4byte	.LASF33
 623 0212 01       		.byte	0x1
 624 0213 E103     		.2byte	0x3e1
 625 0215 89000000 		.4byte	0x89
 626 0219 69000000 		.4byte	.LLST3
 627 021d 0F       		.uleb128 0xf
 628 021e 656E6400 		.ascii	"end\000"
 629 0222 01       		.byte	0x1
 630 0223 1304     		.2byte	0x413
 631 0225 89000000 		.4byte	0x89
 632 0229 0B       		.uleb128 0xb
 633 022a BC000000 		.4byte	.LBB3
 634 022e 08010000 		.4byte	.LBE3-.LBB3
 635 0232 DF030000 		.4byte	0x3df
 636 0236 0D       		.uleb128 0xd
 637 0237 723200   		.ascii	"r2\000"
 638 023a 01       		.byte	0x1
 639 023b 0504     		.2byte	0x405
 640 023d 89000000 		.4byte	0x89
 641 0241 87000000 		.4byte	.LLST4
 642 0245 0D       		.uleb128 0xd
 643 0246 7200     		.ascii	"r\000"
 644 0248 01       		.byte	0x1
 645 0249 0604     		.2byte	0x406
 646 024b 89000000 		.4byte	0x89
 647 024f 9A000000 		.4byte	.LLST5
 648 0253 0B       		.uleb128 0xb
 649 0254 C6000000 		.4byte	.LBB4
 650 0258 5A000000 		.4byte	.LBE4-.LBB4
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 31


 651 025c 0F030000 		.4byte	0x30f
 652 0260 0D       		.uleb128 0xd
 653 0261 7200     		.ascii	"r\000"
 654 0263 01       		.byte	0x1
 655 0264 F403     		.2byte	0x3f4
 656 0266 89000000 		.4byte	0x89
 657 026a B8000000 		.4byte	.LLST6
 658 026e 0D       		.uleb128 0xd
 659 026f 723100   		.ascii	"r1\000"
 660 0272 01       		.byte	0x1
 661 0273 F503     		.2byte	0x3f5
 662 0275 89000000 		.4byte	0x89
 663 0279 CB000000 		.4byte	.LLST7
 664 027d 10       		.uleb128 0x10
 665 027e CA000000 		.4byte	.LVL27
 666 0282 C6050000 		.4byte	0x5c6
 667 0286 11       		.uleb128 0x11
 668 0287 D4000000 		.4byte	.LVL28
 669 028b D1050000 		.4byte	0x5d1
 670 028f A6020000 		.4byte	0x2a6
 671 0293 12       		.uleb128 0x12
 672 0294 01       		.uleb128 0x1
 673 0295 50       		.byte	0x50
 674 0296 05       		.uleb128 0x5
 675 0297 03       		.byte	0x3
 676 0298 50000000 		.4byte	.LC7
 677 029c 12       		.uleb128 0x12
 678 029d 01       		.uleb128 0x1
 679 029e 51       		.byte	0x51
 680 029f 05       		.uleb128 0x5
 681 02a0 03       		.byte	0x3
 682 02a1 3C000000 		.4byte	.LC5
 683 02a5 00       		.byte	0
 684 02a6 10       		.uleb128 0x10
 685 02a7 D8000000 		.4byte	.LVL29
 686 02ab DC050000 		.4byte	0x5dc
 687 02af 10       		.uleb128 0x10
 688 02b0 EA000000 		.4byte	.LVL31
 689 02b4 DC050000 		.4byte	0x5dc
 690 02b8 11       		.uleb128 0x11
 691 02b9 08010000 		.4byte	.LVL33
 692 02bd E7050000 		.4byte	0x5e7
 693 02c1 D2020000 		.4byte	0x2d2
 694 02c5 12       		.uleb128 0x12
 695 02c6 01       		.uleb128 0x1
 696 02c7 50       		.byte	0x50
 697 02c8 02       		.uleb128 0x2
 698 02c9 09       		.byte	0x9
 699 02ca C8       		.byte	0xc8
 700 02cb 12       		.uleb128 0x12
 701 02cc 01       		.uleb128 0x1
 702 02cd 51       		.byte	0x51
 703 02ce 02       		.uleb128 0x2
 704 02cf 08       		.byte	0x8
 705 02d0 32       		.byte	0x32
 706 02d1 00       		.byte	0
 707 02d2 11       		.uleb128 0x11
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 32


 708 02d3 0E010000 		.4byte	.LVL34
 709 02d7 F2050000 		.4byte	0x5f2
 710 02db E5020000 		.4byte	0x2e5
 711 02df 12       		.uleb128 0x12
 712 02e0 01       		.uleb128 0x1
 713 02e1 50       		.byte	0x50
 714 02e2 01       		.uleb128 0x1
 715 02e3 30       		.byte	0x30
 716 02e4 00       		.byte	0
 717 02e5 11       		.uleb128 0x11
 718 02e6 18010000 		.4byte	.LVL36
 719 02ea E7050000 		.4byte	0x5e7
 720 02ee FF020000 		.4byte	0x2ff
 721 02f2 12       		.uleb128 0x12
 722 02f3 01       		.uleb128 0x1
 723 02f4 50       		.byte	0x50
 724 02f5 02       		.uleb128 0x2
 725 02f6 08       		.byte	0x8
 726 02f7 32       		.byte	0x32
 727 02f8 12       		.uleb128 0x12
 728 02f9 01       		.uleb128 0x1
 729 02fa 51       		.byte	0x51
 730 02fb 02       		.uleb128 0x2
 731 02fc 09       		.byte	0x9
 732 02fd C8       		.byte	0xc8
 733 02fe 00       		.byte	0
 734 02ff 13       		.uleb128 0x13
 735 0300 1E010000 		.4byte	.LVL37
 736 0304 F2050000 		.4byte	0x5f2
 737 0308 12       		.uleb128 0x12
 738 0309 01       		.uleb128 0x1
 739 030a 50       		.byte	0x50
 740 030b 01       		.uleb128 0x1
 741 030c 30       		.byte	0x30
 742 030d 00       		.byte	0
 743 030e 00       		.byte	0
 744 030f 11       		.uleb128 0x11
 745 0310 2A010000 		.4byte	.LVL39
 746 0314 E7050000 		.4byte	0x5e7
 747 0318 2E030000 		.4byte	0x32e
 748 031c 12       		.uleb128 0x12
 749 031d 01       		.uleb128 0x1
 750 031e 50       		.byte	0x50
 751 031f 02       		.uleb128 0x2
 752 0320 08       		.byte	0x8
 753 0321 32       		.byte	0x32
 754 0322 12       		.uleb128 0x12
 755 0323 01       		.uleb128 0x1
 756 0324 51       		.byte	0x51
 757 0325 02       		.uleb128 0x2
 758 0326 08       		.byte	0x8
 759 0327 32       		.byte	0x32
 760 0328 12       		.uleb128 0x12
 761 0329 01       		.uleb128 0x1
 762 032a 52       		.byte	0x52
 763 032b 01       		.uleb128 0x1
 764 032c 30       		.byte	0x30
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 33


 765 032d 00       		.byte	0
 766 032e 10       		.uleb128 0x10
 767 032f 3E010000 		.4byte	.LVL40
 768 0333 DC050000 		.4byte	0x5dc
 769 0337 10       		.uleb128 0x10
 770 0338 56010000 		.4byte	.LVL42
 771 033c DC050000 		.4byte	0x5dc
 772 0340 11       		.uleb128 0x11
 773 0341 70010000 		.4byte	.LVL45
 774 0345 E7050000 		.4byte	0x5e7
 775 0349 60030000 		.4byte	0x360
 776 034d 12       		.uleb128 0x12
 777 034e 01       		.uleb128 0x1
 778 034f 50       		.byte	0x50
 779 0350 02       		.uleb128 0x2
 780 0351 08       		.byte	0x8
 781 0352 32       		.byte	0x32
 782 0353 12       		.uleb128 0x12
 783 0354 01       		.uleb128 0x1
 784 0355 51       		.byte	0x51
 785 0356 02       		.uleb128 0x2
 786 0357 09       		.byte	0x9
 787 0358 C8       		.byte	0xc8
 788 0359 12       		.uleb128 0x12
 789 035a 01       		.uleb128 0x1
 790 035b 52       		.byte	0x52
 791 035c 02       		.uleb128 0x2
 792 035d 74       		.byte	0x74
 793 035e 00       		.sleb128 0
 794 035f 00       		.byte	0
 795 0360 11       		.uleb128 0x11
 796 0361 76010000 		.4byte	.LVL46
 797 0365 F2050000 		.4byte	0x5f2
 798 0369 73030000 		.4byte	0x373
 799 036d 12       		.uleb128 0x12
 800 036e 01       		.uleb128 0x1
 801 036f 50       		.byte	0x50
 802 0370 01       		.uleb128 0x1
 803 0371 30       		.byte	0x30
 804 0372 00       		.byte	0
 805 0373 11       		.uleb128 0x11
 806 0374 82010000 		.4byte	.LVL49
 807 0378 E7050000 		.4byte	0x5e7
 808 037c 93030000 		.4byte	0x393
 809 0380 12       		.uleb128 0x12
 810 0381 01       		.uleb128 0x1
 811 0382 50       		.byte	0x50
 812 0383 02       		.uleb128 0x2
 813 0384 08       		.byte	0x8
 814 0385 32       		.byte	0x32
 815 0386 12       		.uleb128 0x12
 816 0387 01       		.uleb128 0x1
 817 0388 51       		.byte	0x51
 818 0389 02       		.uleb128 0x2
 819 038a 09       		.byte	0x9
 820 038b C8       		.byte	0xc8
 821 038c 12       		.uleb128 0x12
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 34


 822 038d 01       		.uleb128 0x1
 823 038e 52       		.byte	0x52
 824 038f 02       		.uleb128 0x2
 825 0390 74       		.byte	0x74
 826 0391 00       		.sleb128 0
 827 0392 00       		.byte	0
 828 0393 11       		.uleb128 0x11
 829 0394 88010000 		.4byte	.LVL50
 830 0398 F2050000 		.4byte	0x5f2
 831 039c A6030000 		.4byte	0x3a6
 832 03a0 12       		.uleb128 0x12
 833 03a1 01       		.uleb128 0x1
 834 03a2 50       		.byte	0x50
 835 03a3 01       		.uleb128 0x1
 836 03a4 30       		.byte	0x30
 837 03a5 00       		.byte	0
 838 03a6 11       		.uleb128 0x11
 839 03a7 8E010000 		.4byte	.LVL51
 840 03ab FE050000 		.4byte	0x5fe
 841 03af BA030000 		.4byte	0x3ba
 842 03b3 12       		.uleb128 0x12
 843 03b4 01       		.uleb128 0x1
 844 03b5 50       		.byte	0x50
 845 03b6 02       		.uleb128 0x2
 846 03b7 91       		.byte	0x91
 847 03b8 58       		.sleb128 -40
 848 03b9 00       		.byte	0
 849 03ba 11       		.uleb128 0x11
 850 03bb 94010000 		.4byte	.LVL52
 851 03bf 09060000 		.4byte	0x609
 852 03c3 CE030000 		.4byte	0x3ce
 853 03c7 12       		.uleb128 0x12
 854 03c8 01       		.uleb128 0x1
 855 03c9 50       		.byte	0x50
 856 03ca 02       		.uleb128 0x2
 857 03cb 91       		.byte	0x91
 858 03cc 64       		.sleb128 -28
 859 03cd 00       		.byte	0
 860 03ce 13       		.uleb128 0x13
 861 03cf 9A010000 		.4byte	.LVL53
 862 03d3 14060000 		.4byte	0x614
 863 03d7 12       		.uleb128 0x12
 864 03d8 01       		.uleb128 0x1
 865 03d9 50       		.byte	0x50
 866 03da 02       		.uleb128 0x2
 867 03db 91       		.byte	0x91
 868 03dc 70       		.sleb128 -16
 869 03dd 00       		.byte	0
 870 03de 00       		.byte	0
 871 03df 10       		.uleb128 0x10
 872 03e0 16000000 		.4byte	.LVL2
 873 03e4 1F060000 		.4byte	0x61f
 874 03e8 11       		.uleb128 0x11
 875 03e9 1C000000 		.4byte	.LVL3
 876 03ed 2A060000 		.4byte	0x62a
 877 03f1 FF030000 		.4byte	0x3ff
 878 03f5 12       		.uleb128 0x12
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 35


 879 03f6 01       		.uleb128 0x1
 880 03f7 50       		.byte	0x50
 881 03f8 05       		.uleb128 0x5
 882 03f9 03       		.byte	0x3
 883 03fa 08000000 		.4byte	.LC1
 884 03fe 00       		.byte	0
 885 03ff 10       		.uleb128 0x10
 886 0400 20000000 		.4byte	.LVL4
 887 0404 39060000 		.4byte	0x639
 888 0408 11       		.uleb128 0x11
 889 0409 28000000 		.4byte	.LVL5
 890 040d D1050000 		.4byte	0x5d1
 891 0411 28040000 		.4byte	0x428
 892 0415 12       		.uleb128 0x12
 893 0416 01       		.uleb128 0x1
 894 0417 50       		.byte	0x50
 895 0418 05       		.uleb128 0x5
 896 0419 03       		.byte	0x3
 897 041a 1C000000 		.4byte	.LC3
 898 041e 12       		.uleb128 0x12
 899 041f 01       		.uleb128 0x1
 900 0420 51       		.byte	0x51
 901 0421 05       		.uleb128 0x5
 902 0422 03       		.byte	0x3
 903 0423 14000000 		.4byte	.LC2
 904 0427 00       		.byte	0
 905 0428 10       		.uleb128 0x10
 906 0429 2C000000 		.4byte	.LVL6
 907 042d 44060000 		.4byte	0x644
 908 0431 11       		.uleb128 0x11
 909 0432 32000000 		.4byte	.LVL7
 910 0436 2A060000 		.4byte	0x62a
 911 043a 48040000 		.4byte	0x448
 912 043e 12       		.uleb128 0x12
 913 043f 01       		.uleb128 0x1
 914 0440 50       		.byte	0x50
 915 0441 05       		.uleb128 0x5
 916 0442 03       		.byte	0x3
 917 0443 2C000000 		.4byte	.LC4
 918 0447 00       		.byte	0
 919 0448 10       		.uleb128 0x10
 920 0449 36000000 		.4byte	.LVL8
 921 044d 4F060000 		.4byte	0x64f
 922 0451 11       		.uleb128 0x11
 923 0452 4A000000 		.4byte	.LVL9
 924 0456 5A060000 		.4byte	0x65a
 925 045a 8B040000 		.4byte	0x48b
 926 045e 12       		.uleb128 0x12
 927 045f 01       		.uleb128 0x1
 928 0460 50       		.byte	0x50
 929 0461 03       		.uleb128 0x3
 930 0462 0A       		.byte	0xa
 931 0463 2823     		.2byte	0x2328
 932 0465 12       		.uleb128 0x12
 933 0466 01       		.uleb128 0x1
 934 0467 51       		.byte	0x51
 935 0468 03       		.uleb128 0x3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 36


 936 0469 0A       		.byte	0xa
 937 046a 2823     		.2byte	0x2328
 938 046c 12       		.uleb128 0x12
 939 046d 01       		.uleb128 0x1
 940 046e 52       		.byte	0x52
 941 046f 03       		.uleb128 0x3
 942 0470 0A       		.byte	0xa
 943 0471 F82A     		.2byte	0x2af8
 944 0473 12       		.uleb128 0x12
 945 0474 01       		.uleb128 0x1
 946 0475 53       		.byte	0x53
 947 0476 03       		.uleb128 0x3
 948 0477 0A       		.byte	0xa
 949 0478 F82A     		.2byte	0x2af8
 950 047a 12       		.uleb128 0x12
 951 047b 02       		.uleb128 0x2
 952 047c 7D       		.byte	0x7d
 953 047d 00       		.sleb128 0
 954 047e 03       		.uleb128 0x3
 955 047f 0A       		.byte	0xa
 956 0480 2823     		.2byte	0x2328
 957 0482 12       		.uleb128 0x12
 958 0483 02       		.uleb128 0x2
 959 0484 7D       		.byte	0x7d
 960 0485 04       		.sleb128 4
 961 0486 03       		.uleb128 0x3
 962 0487 0A       		.byte	0xa
 963 0488 2823     		.2byte	0x2328
 964 048a 00       		.byte	0
 965 048b 11       		.uleb128 0x11
 966 048c 50000000 		.4byte	.LVL10
 967 0490 F2050000 		.4byte	0x5f2
 968 0494 9F040000 		.4byte	0x49f
 969 0498 12       		.uleb128 0x12
 970 0499 01       		.uleb128 0x1
 971 049a 50       		.byte	0x50
 972 049b 02       		.uleb128 0x2
 973 049c 08       		.byte	0x8
 974 049d C8       		.byte	0xc8
 975 049e 00       		.byte	0
 976 049f 11       		.uleb128 0x11
 977 04a0 5A000000 		.4byte	.LVL12
 978 04a4 FE050000 		.4byte	0x5fe
 979 04a8 B3040000 		.4byte	0x4b3
 980 04ac 12       		.uleb128 0x12
 981 04ad 01       		.uleb128 0x1
 982 04ae 50       		.byte	0x50
 983 04af 02       		.uleb128 0x2
 984 04b0 91       		.byte	0x91
 985 04b1 58       		.sleb128 -40
 986 04b2 00       		.byte	0
 987 04b3 11       		.uleb128 0x11
 988 04b4 60000000 		.4byte	.LVL13
 989 04b8 09060000 		.4byte	0x609
 990 04bc C7040000 		.4byte	0x4c7
 991 04c0 12       		.uleb128 0x12
 992 04c1 01       		.uleb128 0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 37


 993 04c2 50       		.byte	0x50
 994 04c3 02       		.uleb128 0x2
 995 04c4 91       		.byte	0x91
 996 04c5 64       		.sleb128 -28
 997 04c6 00       		.byte	0
 998 04c7 11       		.uleb128 0x11
 999 04c8 7A000000 		.4byte	.LVL14
 1000 04cc E7050000 		.4byte	0x5e7
 1001 04d0 E7040000 		.4byte	0x4e7
 1002 04d4 12       		.uleb128 0x12
 1003 04d5 01       		.uleb128 0x1
 1004 04d6 50       		.byte	0x50
 1005 04d7 02       		.uleb128 0x2
 1006 04d8 08       		.byte	0x8
 1007 04d9 32       		.byte	0x32
 1008 04da 12       		.uleb128 0x12
 1009 04db 01       		.uleb128 0x1
 1010 04dc 51       		.byte	0x51
 1011 04dd 02       		.uleb128 0x2
 1012 04de 08       		.byte	0x8
 1013 04df 32       		.byte	0x32
 1014 04e0 12       		.uleb128 0x12
 1015 04e1 01       		.uleb128 0x1
 1016 04e2 52       		.byte	0x52
 1017 04e3 02       		.uleb128 0x2
 1018 04e4 08       		.byte	0x8
 1019 04e5 32       		.byte	0x32
 1020 04e6 00       		.byte	0
 1021 04e7 11       		.uleb128 0x11
 1022 04e8 82000000 		.4byte	.LVL15
 1023 04ec 65060000 		.4byte	0x665
 1024 04f0 01050000 		.4byte	0x501
 1025 04f4 12       		.uleb128 0x12
 1026 04f5 01       		.uleb128 0x1
 1027 04f6 50       		.byte	0x50
 1028 04f7 02       		.uleb128 0x2
 1029 04f8 08       		.byte	0x8
 1030 04f9 3C       		.byte	0x3c
 1031 04fa 12       		.uleb128 0x12
 1032 04fb 01       		.uleb128 0x1
 1033 04fc 51       		.byte	0x51
 1034 04fd 02       		.uleb128 0x2
 1035 04fe 08       		.byte	0x8
 1036 04ff 50       		.byte	0x50
 1037 0500 00       		.byte	0
 1038 0501 11       		.uleb128 0x11
 1039 0502 8C000000 		.4byte	.LVL16
 1040 0506 70060000 		.4byte	0x670
 1041 050a 19050000 		.4byte	0x519
 1042 050e 12       		.uleb128 0x12
 1043 050f 01       		.uleb128 0x1
 1044 0510 50       		.byte	0x50
 1045 0511 01       		.uleb128 0x1
 1046 0512 30       		.byte	0x30
 1047 0513 12       		.uleb128 0x12
 1048 0514 01       		.uleb128 0x1
 1049 0515 51       		.byte	0x51
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 38


 1050 0516 01       		.uleb128 0x1
 1051 0517 30       		.byte	0x30
 1052 0518 00       		.byte	0
 1053 0519 11       		.uleb128 0x11
 1054 051a 9A000000 		.4byte	.LVL18
 1055 051e D1050000 		.4byte	0x5d1
 1056 0522 39050000 		.4byte	0x539
 1057 0526 12       		.uleb128 0x12
 1058 0527 01       		.uleb128 0x1
 1059 0528 50       		.byte	0x50
 1060 0529 05       		.uleb128 0x5
 1061 052a 03       		.byte	0x3
 1062 052b 1C000000 		.4byte	.LC3
 1063 052f 12       		.uleb128 0x12
 1064 0530 01       		.uleb128 0x1
 1065 0531 51       		.byte	0x51
 1066 0532 05       		.uleb128 0x5
 1067 0533 03       		.byte	0x3
 1068 0534 14000000 		.4byte	.LC2
 1069 0538 00       		.byte	0
 1070 0539 10       		.uleb128 0x10
 1071 053a 9E000000 		.4byte	.LVL19
 1072 053e 7B060000 		.4byte	0x67b
 1073 0542 10       		.uleb128 0x10
 1074 0543 A2000000 		.4byte	.LVL20
 1075 0547 86060000 		.4byte	0x686
 1076 054b 10       		.uleb128 0x10
 1077 054c A6000000 		.4byte	.LVL21
 1078 0550 91060000 		.4byte	0x691
 1079 0554 10       		.uleb128 0x10
 1080 0555 AA000000 		.4byte	.LVL22
 1081 0559 C6050000 		.4byte	0x5c6
 1082 055d 11       		.uleb128 0x11
 1083 055e B4000000 		.4byte	.LVL24
 1084 0562 D1050000 		.4byte	0x5d1
 1085 0566 7D050000 		.4byte	0x57d
 1086 056a 12       		.uleb128 0x12
 1087 056b 01       		.uleb128 0x1
 1088 056c 50       		.byte	0x50
 1089 056d 05       		.uleb128 0x5
 1090 056e 03       		.byte	0x3
 1091 056f 40000000 		.4byte	.LC6
 1092 0573 12       		.uleb128 0x12
 1093 0574 01       		.uleb128 0x1
 1094 0575 51       		.byte	0x51
 1095 0576 05       		.uleb128 0x5
 1096 0577 03       		.byte	0x3
 1097 0578 3C000000 		.4byte	.LC5
 1098 057c 00       		.byte	0
 1099 057d 13       		.uleb128 0x13
 1100 057e BA000000 		.4byte	.LVL25
 1101 0582 9C060000 		.4byte	0x69c
 1102 0586 12       		.uleb128 0x12
 1103 0587 01       		.uleb128 0x1
 1104 0588 50       		.byte	0x50
 1105 0589 01       		.uleb128 0x1
 1106 058a 31       		.byte	0x31
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 39


 1107 058b 00       		.byte	0
 1108 058c 00       		.byte	0
 1109 058d 11       		.uleb128 0x11
 1110 058e 0A000000 		.4byte	.LVL0
 1111 0592 2A060000 		.4byte	0x62a
 1112 0596 A4050000 		.4byte	0x5a4
 1113 059a 12       		.uleb128 0x12
 1114 059b 01       		.uleb128 0x1
 1115 059c 50       		.byte	0x50
 1116 059d 05       		.uleb128 0x5
 1117 059e 03       		.byte	0x3
 1118 059f 00000000 		.4byte	.LC0
 1119 05a3 00       		.byte	0
 1120 05a4 10       		.uleb128 0x10
 1121 05a5 0E000000 		.4byte	.LVL1
 1122 05a9 A7060000 		.4byte	0x6a7
 1123 05ad 00       		.byte	0
 1124 05ae 02       		.uleb128 0x2
 1125 05af 01       		.byte	0x1
 1126 05b0 02       		.byte	0x2
 1127 05b1 2A020000 		.4byte	.LASF34
 1128 05b5 14       		.uleb128 0x14
 1129 05b6 C6020000 		.4byte	.LASF59
 1130 05ba 0F       		.byte	0xf
 1131 05bb 1207     		.2byte	0x712
 1132 05bd C1050000 		.4byte	0x5c1
 1133 05c1 15       		.uleb128 0x15
 1134 05c2 B8000000 		.4byte	0xb8
 1135 05c6 16       		.uleb128 0x16
 1136 05c7 0A010000 		.4byte	.LASF35
 1137 05cb 0A010000 		.4byte	.LASF35
 1138 05cf 06       		.byte	0x6
 1139 05d0 B6       		.byte	0xb6
 1140 05d1 16       		.uleb128 0x16
 1141 05d2 30020000 		.4byte	.LASF36
 1142 05d6 30020000 		.4byte	.LASF36
 1143 05da 07       		.byte	0x7
 1144 05db 07       		.byte	0x7
 1145 05dc 16       		.uleb128 0x16
 1146 05dd C2000000 		.4byte	.LASF37
 1147 05e1 C2000000 		.4byte	.LASF37
 1148 05e5 08       		.byte	0x8
 1149 05e6 88       		.byte	0x88
 1150 05e7 16       		.uleb128 0x16
 1151 05e8 B1000000 		.4byte	.LASF38
 1152 05ec B1000000 		.4byte	.LASF38
 1153 05f0 09       		.byte	0x9
 1154 05f1 12       		.byte	0x12
 1155 05f2 17       		.uleb128 0x17
 1156 05f3 B9010000 		.4byte	.LASF39
 1157 05f7 B9010000 		.4byte	.LASF39
 1158 05fb 0A       		.byte	0xa
 1159 05fc ED02     		.2byte	0x2ed
 1160 05fe 16       		.uleb128 0x16
 1161 05ff 9C020000 		.4byte	.LASF40
 1162 0603 9C020000 		.4byte	.LASF40
 1163 0607 04       		.byte	0x4
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 40


 1164 0608 18       		.byte	0x18
 1165 0609 16       		.uleb128 0x16
 1166 060a ED000000 		.4byte	.LASF41
 1167 060e ED000000 		.4byte	.LASF41
 1168 0612 04       		.byte	0x4
 1169 0613 19       		.byte	0x19
 1170 0614 16       		.uleb128 0x16
 1171 0615 44010000 		.4byte	.LASF42
 1172 0619 44010000 		.4byte	.LASF42
 1173 061d 05       		.byte	0x5
 1174 061e 51       		.byte	0x51
 1175 061f 16       		.uleb128 0x16
 1176 0620 2F010000 		.4byte	.LASF43
 1177 0624 2F010000 		.4byte	.LASF43
 1178 0628 0B       		.byte	0xb
 1179 0629 11       		.byte	0x11
 1180 062a 18       		.uleb128 0x18
 1181 062b E9010000 		.4byte	.LASF60
 1182 062f 75020000 		.4byte	.LASF61
 1183 0633 10       		.byte	0x10
 1184 0634 00       		.byte	0
 1185 0635 E9010000 		.4byte	.LASF60
 1186 0639 16       		.uleb128 0x16
 1187 063a 69020000 		.4byte	.LASF44
 1188 063e 69020000 		.4byte	.LASF44
 1189 0642 09       		.byte	0x9
 1190 0643 0B       		.byte	0xb
 1191 0644 16       		.uleb128 0x16
 1192 0645 C4010000 		.4byte	.LASF45
 1193 0649 C4010000 		.4byte	.LASF45
 1194 064d 0B       		.byte	0xb
 1195 064e 18       		.byte	0x18
 1196 064f 16       		.uleb128 0x16
 1197 0650 C7000000 		.4byte	.LASF46
 1198 0654 C7000000 		.4byte	.LASF46
 1199 0658 04       		.byte	0x4
 1200 0659 17       		.byte	0x17
 1201 065a 16       		.uleb128 0x16
 1202 065b 6B010000 		.4byte	.LASF47
 1203 065f 6B010000 		.4byte	.LASF47
 1204 0663 04       		.byte	0x4
 1205 0664 1A       		.byte	0x1a
 1206 0665 16       		.uleb128 0x16
 1207 0666 00000000 		.4byte	.LASF48
 1208 066a 00000000 		.4byte	.LASF48
 1209 066e 0C       		.byte	0xc
 1210 066f 05       		.byte	0x5
 1211 0670 16       		.uleb128 0x16
 1212 0671 07020000 		.4byte	.LASF49
 1213 0675 07020000 		.4byte	.LASF49
 1214 0679 09       		.byte	0x9
 1215 067a 0F       		.byte	0xf
 1216 067b 16       		.uleb128 0x16
 1217 067c 55010000 		.4byte	.LASF50
 1218 0680 55010000 		.4byte	.LASF50
 1219 0684 0B       		.byte	0xb
 1220 0685 1B       		.byte	0x1b
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 41


 1221 0686 16       		.uleb128 0x16
 1222 0687 05000000 		.4byte	.LASF51
 1223 068b 05000000 		.4byte	.LASF51
 1224 068f 06       		.byte	0x6
 1225 0690 B0       		.byte	0xb0
 1226 0691 16       		.uleb128 0x16
 1227 0692 B7020000 		.4byte	.LASF52
 1228 0696 B7020000 		.4byte	.LASF52
 1229 069a 06       		.byte	0x6
 1230 069b AE       		.byte	0xae
 1231 069c 16       		.uleb128 0x16
 1232 069d 91010000 		.4byte	.LASF53
 1233 06a1 91010000 		.4byte	.LASF53
 1234 06a5 0D       		.byte	0xd
 1235 06a6 26       		.byte	0x26
 1236 06a7 16       		.uleb128 0x16
 1237 06a8 40020000 		.4byte	.LASF54
 1238 06ac 40020000 		.4byte	.LASF54
 1239 06b0 0E       		.byte	0xe
 1240 06b1 29       		.byte	0x29
 1241 06b2 00       		.byte	0
 1242              		.section	.debug_abbrev,"",%progbits
 1243              	.Ldebug_abbrev0:
 1244 0000 01       		.uleb128 0x1
 1245 0001 11       		.uleb128 0x11
 1246 0002 01       		.byte	0x1
 1247 0003 25       		.uleb128 0x25
 1248 0004 0E       		.uleb128 0xe
 1249 0005 13       		.uleb128 0x13
 1250 0006 0B       		.uleb128 0xb
 1251 0007 03       		.uleb128 0x3
 1252 0008 0E       		.uleb128 0xe
 1253 0009 1B       		.uleb128 0x1b
 1254 000a 0E       		.uleb128 0xe
 1255 000b 55       		.uleb128 0x55
 1256 000c 17       		.uleb128 0x17
 1257 000d 11       		.uleb128 0x11
 1258 000e 01       		.uleb128 0x1
 1259 000f 10       		.uleb128 0x10
 1260 0010 17       		.uleb128 0x17
 1261 0011 00       		.byte	0
 1262 0012 00       		.byte	0
 1263 0013 02       		.uleb128 0x2
 1264 0014 24       		.uleb128 0x24
 1265 0015 00       		.byte	0
 1266 0016 0B       		.uleb128 0xb
 1267 0017 0B       		.uleb128 0xb
 1268 0018 3E       		.uleb128 0x3e
 1269 0019 0B       		.uleb128 0xb
 1270 001a 03       		.uleb128 0x3
 1271 001b 0E       		.uleb128 0xe
 1272 001c 00       		.byte	0
 1273 001d 00       		.byte	0
 1274 001e 03       		.uleb128 0x3
 1275 001f 16       		.uleb128 0x16
 1276 0020 00       		.byte	0
 1277 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 42


 1278 0022 0E       		.uleb128 0xe
 1279 0023 3A       		.uleb128 0x3a
 1280 0024 0B       		.uleb128 0xb
 1281 0025 3B       		.uleb128 0x3b
 1282 0026 0B       		.uleb128 0xb
 1283 0027 49       		.uleb128 0x49
 1284 0028 13       		.uleb128 0x13
 1285 0029 00       		.byte	0
 1286 002a 00       		.byte	0
 1287 002b 04       		.uleb128 0x4
 1288 002c 24       		.uleb128 0x24
 1289 002d 00       		.byte	0
 1290 002e 0B       		.uleb128 0xb
 1291 002f 0B       		.uleb128 0xb
 1292 0030 3E       		.uleb128 0x3e
 1293 0031 0B       		.uleb128 0xb
 1294 0032 03       		.uleb128 0x3
 1295 0033 08       		.uleb128 0x8
 1296 0034 00       		.byte	0
 1297 0035 00       		.byte	0
 1298 0036 05       		.uleb128 0x5
 1299 0037 13       		.uleb128 0x13
 1300 0038 01       		.byte	0x1
 1301 0039 03       		.uleb128 0x3
 1302 003a 0E       		.uleb128 0xe
 1303 003b 0B       		.uleb128 0xb
 1304 003c 0B       		.uleb128 0xb
 1305 003d 3A       		.uleb128 0x3a
 1306 003e 0B       		.uleb128 0xb
 1307 003f 3B       		.uleb128 0x3b
 1308 0040 0B       		.uleb128 0xb
 1309 0041 01       		.uleb128 0x1
 1310 0042 13       		.uleb128 0x13
 1311 0043 00       		.byte	0
 1312 0044 00       		.byte	0
 1313 0045 06       		.uleb128 0x6
 1314 0046 0D       		.uleb128 0xd
 1315 0047 00       		.byte	0
 1316 0048 03       		.uleb128 0x3
 1317 0049 08       		.uleb128 0x8
 1318 004a 3A       		.uleb128 0x3a
 1319 004b 0B       		.uleb128 0xb
 1320 004c 3B       		.uleb128 0x3b
 1321 004d 0B       		.uleb128 0xb
 1322 004e 49       		.uleb128 0x49
 1323 004f 13       		.uleb128 0x13
 1324 0050 38       		.uleb128 0x38
 1325 0051 0B       		.uleb128 0xb
 1326 0052 00       		.byte	0
 1327 0053 00       		.byte	0
 1328 0054 07       		.uleb128 0x7
 1329 0055 0D       		.uleb128 0xd
 1330 0056 00       		.byte	0
 1331 0057 03       		.uleb128 0x3
 1332 0058 0E       		.uleb128 0xe
 1333 0059 3A       		.uleb128 0x3a
 1334 005a 0B       		.uleb128 0xb
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 43


 1335 005b 3B       		.uleb128 0x3b
 1336 005c 0B       		.uleb128 0xb
 1337 005d 49       		.uleb128 0x49
 1338 005e 13       		.uleb128 0x13
 1339 005f 38       		.uleb128 0x38
 1340 0060 0B       		.uleb128 0xb
 1341 0061 00       		.byte	0
 1342 0062 00       		.byte	0
 1343 0063 08       		.uleb128 0x8
 1344 0064 2E       		.uleb128 0x2e
 1345 0065 01       		.byte	0x1
 1346 0066 3F       		.uleb128 0x3f
 1347 0067 19       		.uleb128 0x19
 1348 0068 03       		.uleb128 0x3
 1349 0069 0E       		.uleb128 0xe
 1350 006a 3A       		.uleb128 0x3a
 1351 006b 0B       		.uleb128 0xb
 1352 006c 3B       		.uleb128 0x3b
 1353 006d 05       		.uleb128 0x5
 1354 006e 27       		.uleb128 0x27
 1355 006f 19       		.uleb128 0x19
 1356 0070 8701     		.uleb128 0x87
 1357 0072 19       		.uleb128 0x19
 1358 0073 11       		.uleb128 0x11
 1359 0074 01       		.uleb128 0x1
 1360 0075 12       		.uleb128 0x12
 1361 0076 06       		.uleb128 0x6
 1362 0077 40       		.uleb128 0x40
 1363 0078 18       		.uleb128 0x18
 1364 0079 9742     		.uleb128 0x2117
 1365 007b 19       		.uleb128 0x19
 1366 007c 01       		.uleb128 0x1
 1367 007d 13       		.uleb128 0x13
 1368 007e 00       		.byte	0
 1369 007f 00       		.byte	0
 1370 0080 09       		.uleb128 0x9
 1371 0081 34       		.uleb128 0x34
 1372 0082 00       		.byte	0
 1373 0083 03       		.uleb128 0x3
 1374 0084 0E       		.uleb128 0xe
 1375 0085 3A       		.uleb128 0x3a
 1376 0086 0B       		.uleb128 0xb
 1377 0087 3B       		.uleb128 0x3b
 1378 0088 05       		.uleb128 0x5
 1379 0089 49       		.uleb128 0x49
 1380 008a 13       		.uleb128 0x13
 1381 008b 02       		.uleb128 0x2
 1382 008c 18       		.uleb128 0x18
 1383 008d 00       		.byte	0
 1384 008e 00       		.byte	0
 1385 008f 0A       		.uleb128 0xa
 1386 0090 34       		.uleb128 0x34
 1387 0091 00       		.byte	0
 1388 0092 03       		.uleb128 0x3
 1389 0093 0E       		.uleb128 0xe
 1390 0094 3A       		.uleb128 0x3a
 1391 0095 0B       		.uleb128 0xb
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 44


 1392 0096 3B       		.uleb128 0x3b
 1393 0097 05       		.uleb128 0x5
 1394 0098 49       		.uleb128 0x49
 1395 0099 13       		.uleb128 0x13
 1396 009a 02       		.uleb128 0x2
 1397 009b 17       		.uleb128 0x17
 1398 009c 00       		.byte	0
 1399 009d 00       		.byte	0
 1400 009e 0B       		.uleb128 0xb
 1401 009f 0B       		.uleb128 0xb
 1402 00a0 01       		.byte	0x1
 1403 00a1 11       		.uleb128 0x11
 1404 00a2 01       		.uleb128 0x1
 1405 00a3 12       		.uleb128 0x12
 1406 00a4 06       		.uleb128 0x6
 1407 00a5 01       		.uleb128 0x1
 1408 00a6 13       		.uleb128 0x13
 1409 00a7 00       		.byte	0
 1410 00a8 00       		.byte	0
 1411 00a9 0C       		.uleb128 0xc
 1412 00aa 34       		.uleb128 0x34
 1413 00ab 00       		.byte	0
 1414 00ac 03       		.uleb128 0x3
 1415 00ad 08       		.uleb128 0x8
 1416 00ae 3A       		.uleb128 0x3a
 1417 00af 0B       		.uleb128 0xb
 1418 00b0 3B       		.uleb128 0x3b
 1419 00b1 05       		.uleb128 0x5
 1420 00b2 49       		.uleb128 0x49
 1421 00b3 13       		.uleb128 0x13
 1422 00b4 02       		.uleb128 0x2
 1423 00b5 18       		.uleb128 0x18
 1424 00b6 00       		.byte	0
 1425 00b7 00       		.byte	0
 1426 00b8 0D       		.uleb128 0xd
 1427 00b9 34       		.uleb128 0x34
 1428 00ba 00       		.byte	0
 1429 00bb 03       		.uleb128 0x3
 1430 00bc 08       		.uleb128 0x8
 1431 00bd 3A       		.uleb128 0x3a
 1432 00be 0B       		.uleb128 0xb
 1433 00bf 3B       		.uleb128 0x3b
 1434 00c0 05       		.uleb128 0x5
 1435 00c1 49       		.uleb128 0x49
 1436 00c2 13       		.uleb128 0x13
 1437 00c3 02       		.uleb128 0x2
 1438 00c4 17       		.uleb128 0x17
 1439 00c5 00       		.byte	0
 1440 00c6 00       		.byte	0
 1441 00c7 0E       		.uleb128 0xe
 1442 00c8 34       		.uleb128 0x34
 1443 00c9 00       		.byte	0
 1444 00ca 03       		.uleb128 0x3
 1445 00cb 0E       		.uleb128 0xe
 1446 00cc 3A       		.uleb128 0x3a
 1447 00cd 0B       		.uleb128 0xb
 1448 00ce 3B       		.uleb128 0x3b
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 45


 1449 00cf 05       		.uleb128 0x5
 1450 00d0 49       		.uleb128 0x49
 1451 00d1 13       		.uleb128 0x13
 1452 00d2 1C       		.uleb128 0x1c
 1453 00d3 0B       		.uleb128 0xb
 1454 00d4 00       		.byte	0
 1455 00d5 00       		.byte	0
 1456 00d6 0F       		.uleb128 0xf
 1457 00d7 34       		.uleb128 0x34
 1458 00d8 00       		.byte	0
 1459 00d9 03       		.uleb128 0x3
 1460 00da 08       		.uleb128 0x8
 1461 00db 3A       		.uleb128 0x3a
 1462 00dc 0B       		.uleb128 0xb
 1463 00dd 3B       		.uleb128 0x3b
 1464 00de 05       		.uleb128 0x5
 1465 00df 49       		.uleb128 0x49
 1466 00e0 13       		.uleb128 0x13
 1467 00e1 00       		.byte	0
 1468 00e2 00       		.byte	0
 1469 00e3 10       		.uleb128 0x10
 1470 00e4 898201   		.uleb128 0x4109
 1471 00e7 00       		.byte	0
 1472 00e8 11       		.uleb128 0x11
 1473 00e9 01       		.uleb128 0x1
 1474 00ea 31       		.uleb128 0x31
 1475 00eb 13       		.uleb128 0x13
 1476 00ec 00       		.byte	0
 1477 00ed 00       		.byte	0
 1478 00ee 11       		.uleb128 0x11
 1479 00ef 898201   		.uleb128 0x4109
 1480 00f2 01       		.byte	0x1
 1481 00f3 11       		.uleb128 0x11
 1482 00f4 01       		.uleb128 0x1
 1483 00f5 31       		.uleb128 0x31
 1484 00f6 13       		.uleb128 0x13
 1485 00f7 01       		.uleb128 0x1
 1486 00f8 13       		.uleb128 0x13
 1487 00f9 00       		.byte	0
 1488 00fa 00       		.byte	0
 1489 00fb 12       		.uleb128 0x12
 1490 00fc 8A8201   		.uleb128 0x410a
 1491 00ff 00       		.byte	0
 1492 0100 02       		.uleb128 0x2
 1493 0101 18       		.uleb128 0x18
 1494 0102 9142     		.uleb128 0x2111
 1495 0104 18       		.uleb128 0x18
 1496 0105 00       		.byte	0
 1497 0106 00       		.byte	0
 1498 0107 13       		.uleb128 0x13
 1499 0108 898201   		.uleb128 0x4109
 1500 010b 01       		.byte	0x1
 1501 010c 11       		.uleb128 0x11
 1502 010d 01       		.uleb128 0x1
 1503 010e 31       		.uleb128 0x31
 1504 010f 13       		.uleb128 0x13
 1505 0110 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 46


 1506 0111 00       		.byte	0
 1507 0112 14       		.uleb128 0x14
 1508 0113 34       		.uleb128 0x34
 1509 0114 00       		.byte	0
 1510 0115 03       		.uleb128 0x3
 1511 0116 0E       		.uleb128 0xe
 1512 0117 3A       		.uleb128 0x3a
 1513 0118 0B       		.uleb128 0xb
 1514 0119 3B       		.uleb128 0x3b
 1515 011a 05       		.uleb128 0x5
 1516 011b 49       		.uleb128 0x49
 1517 011c 13       		.uleb128 0x13
 1518 011d 3F       		.uleb128 0x3f
 1519 011e 19       		.uleb128 0x19
 1520 011f 3C       		.uleb128 0x3c
 1521 0120 19       		.uleb128 0x19
 1522 0121 00       		.byte	0
 1523 0122 00       		.byte	0
 1524 0123 15       		.uleb128 0x15
 1525 0124 35       		.uleb128 0x35
 1526 0125 00       		.byte	0
 1527 0126 49       		.uleb128 0x49
 1528 0127 13       		.uleb128 0x13
 1529 0128 00       		.byte	0
 1530 0129 00       		.byte	0
 1531 012a 16       		.uleb128 0x16
 1532 012b 2E       		.uleb128 0x2e
 1533 012c 00       		.byte	0
 1534 012d 3F       		.uleb128 0x3f
 1535 012e 19       		.uleb128 0x19
 1536 012f 3C       		.uleb128 0x3c
 1537 0130 19       		.uleb128 0x19
 1538 0131 6E       		.uleb128 0x6e
 1539 0132 0E       		.uleb128 0xe
 1540 0133 03       		.uleb128 0x3
 1541 0134 0E       		.uleb128 0xe
 1542 0135 3A       		.uleb128 0x3a
 1543 0136 0B       		.uleb128 0xb
 1544 0137 3B       		.uleb128 0x3b
 1545 0138 0B       		.uleb128 0xb
 1546 0139 00       		.byte	0
 1547 013a 00       		.byte	0
 1548 013b 17       		.uleb128 0x17
 1549 013c 2E       		.uleb128 0x2e
 1550 013d 00       		.byte	0
 1551 013e 3F       		.uleb128 0x3f
 1552 013f 19       		.uleb128 0x19
 1553 0140 3C       		.uleb128 0x3c
 1554 0141 19       		.uleb128 0x19
 1555 0142 6E       		.uleb128 0x6e
 1556 0143 0E       		.uleb128 0xe
 1557 0144 03       		.uleb128 0x3
 1558 0145 0E       		.uleb128 0xe
 1559 0146 3A       		.uleb128 0x3a
 1560 0147 0B       		.uleb128 0xb
 1561 0148 3B       		.uleb128 0x3b
 1562 0149 05       		.uleb128 0x5
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 47


 1563 014a 00       		.byte	0
 1564 014b 00       		.byte	0
 1565 014c 18       		.uleb128 0x18
 1566 014d 2E       		.uleb128 0x2e
 1567 014e 00       		.byte	0
 1568 014f 3F       		.uleb128 0x3f
 1569 0150 19       		.uleb128 0x19
 1570 0151 3C       		.uleb128 0x3c
 1571 0152 19       		.uleb128 0x19
 1572 0153 6E       		.uleb128 0x6e
 1573 0154 0E       		.uleb128 0xe
 1574 0155 03       		.uleb128 0x3
 1575 0156 0E       		.uleb128 0xe
 1576 0157 3A       		.uleb128 0x3a
 1577 0158 0B       		.uleb128 0xb
 1578 0159 3B       		.uleb128 0x3b
 1579 015a 0B       		.uleb128 0xb
 1580 015b 6E       		.uleb128 0x6e
 1581 015c 0E       		.uleb128 0xe
 1582 015d 00       		.byte	0
 1583 015e 00       		.byte	0
 1584 015f 00       		.byte	0
 1585              		.section	.debug_loc,"",%progbits
 1586              	.Ldebug_loc0:
 1587              	.LLST0:
 1588 0000 0E000000 		.4byte	.LVL1
 1589 0004 15000000 		.4byte	.LVL2-1
 1590 0008 0100     		.2byte	0x1
 1591 000a 50       		.byte	0x50
 1592 000b 00000000 		.4byte	0
 1593 000f 00000000 		.4byte	0
 1594              	.LLST1:
 1595 0013 1C000000 		.4byte	.LVL3
 1596 0017 B4000000 		.4byte	.LVL24
 1597 001b 0200     		.2byte	0x2
 1598 001d 30       		.byte	0x30
 1599 001e 9F       		.byte	0x9f
 1600 001f B4000000 		.4byte	.LVL24
 1601 0023 C4010000 		.4byte	.LFE85
 1602 0027 0200     		.2byte	0x2
 1603 0029 31       		.byte	0x31
 1604 002a 9F       		.byte	0x9f
 1605 002b 00000000 		.4byte	0
 1606 002f 00000000 		.4byte	0
 1607              	.LLST2:
 1608 0033 1C000000 		.4byte	.LVL3
 1609 0037 54000000 		.4byte	.LVL11
 1610 003b 0200     		.2byte	0x2
 1611 003d 31       		.byte	0x31
 1612 003e 9F       		.byte	0x9f
 1613 003f 54000000 		.4byte	.LVL11
 1614 0043 8C000000 		.4byte	.LVL16
 1615 0047 0100     		.2byte	0x1
 1616 0049 54       		.byte	0x54
 1617 004a 8C000000 		.4byte	.LVL16
 1618 004e 8E000000 		.4byte	.LVL17
 1619 0052 0200     		.2byte	0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 48


 1620 0054 30       		.byte	0x30
 1621 0055 9F       		.byte	0x9f
 1622 0056 8E000000 		.4byte	.LVL17
 1623 005a BC000000 		.4byte	.LVL26
 1624 005e 0100     		.2byte	0x1
 1625 0060 54       		.byte	0x54
 1626 0061 00000000 		.4byte	0
 1627 0065 00000000 		.4byte	0
 1628              	.LLST3:
 1629 0069 AA000000 		.4byte	.LVL22
 1630 006d B0000000 		.4byte	.LVL23
 1631 0071 0100     		.2byte	0x1
 1632 0073 50       		.byte	0x50
 1633 0074 B0000000 		.4byte	.LVL23
 1634 0078 B3000000 		.4byte	.LVL24-1
 1635 007c 0100     		.2byte	0x1
 1636 007e 52       		.byte	0x52
 1637 007f 00000000 		.4byte	0
 1638 0083 00000000 		.4byte	0
 1639              	.LLST4:
 1640 0087 52010000 		.4byte	.LVL41
 1641 008b 88010000 		.4byte	.LVL50
 1642 008f 0100     		.2byte	0x1
 1643 0091 54       		.byte	0x54
 1644 0092 00000000 		.4byte	0
 1645 0096 00000000 		.4byte	0
 1646              	.LLST5:
 1647 009a 64010000 		.4byte	.LVL43
 1648 009e 6C010000 		.4byte	.LVL44
 1649 00a2 0100     		.2byte	0x1
 1650 00a4 50       		.byte	0x50
 1651 00a5 78010000 		.4byte	.LVL47
 1652 00a9 7E010000 		.4byte	.LVL48
 1653 00ad 0100     		.2byte	0x1
 1654 00af 50       		.byte	0x50
 1655 00b0 00000000 		.4byte	0
 1656 00b4 00000000 		.4byte	0
 1657              	.LLST6:
 1658 00b8 E6000000 		.4byte	.LVL30
 1659 00bc 20010000 		.4byte	.LVL38
 1660 00c0 0100     		.2byte	0x1
 1661 00c2 54       		.byte	0x54
 1662 00c3 00000000 		.4byte	0
 1663 00c7 00000000 		.4byte	0
 1664              	.LLST7:
 1665 00cb FE000000 		.4byte	.LVL32
 1666 00cf 07010000 		.4byte	.LVL33-1
 1667 00d3 0100     		.2byte	0x1
 1668 00d5 52       		.byte	0x52
 1669 00d6 10010000 		.4byte	.LVL35
 1670 00da 17010000 		.4byte	.LVL36-1
 1671 00de 0100     		.2byte	0x1
 1672 00e0 52       		.byte	0x52
 1673 00e1 00000000 		.4byte	0
 1674 00e5 00000000 		.4byte	0
 1675              		.section	.debug_aranges,"",%progbits
 1676 0000 1C000000 		.4byte	0x1c
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 49


 1677 0004 0200     		.2byte	0x2
 1678 0006 00000000 		.4byte	.Ldebug_info0
 1679 000a 04       		.byte	0x4
 1680 000b 00       		.byte	0
 1681 000c 0000     		.2byte	0
 1682 000e 0000     		.2byte	0
 1683 0010 00000000 		.4byte	.LFB85
 1684 0014 C4010000 		.4byte	.LFE85-.LFB85
 1685 0018 00000000 		.4byte	0
 1686 001c 00000000 		.4byte	0
 1687              		.section	.debug_ranges,"",%progbits
 1688              	.Ldebug_ranges0:
 1689 0000 00000000 		.4byte	.LFB85
 1690 0004 C4010000 		.4byte	.LFE85
 1691 0008 00000000 		.4byte	0
 1692 000c 00000000 		.4byte	0
 1693              		.section	.debug_line,"",%progbits
 1694              	.Ldebug_line0:
 1695 0000 CB020000 		.section	.debug_str,"MS",%progbits,1
 1695      02006402 
 1695      00000201 
 1695      FB0E0D00 
 1695      01010101 
 1696              	.LASF48:
 1697 0000 42656570 		.ascii	"Beep\000"
 1697      00
 1698              	.LASF51:
 1699 0005 43795379 		.ascii	"CySysTickEnable\000"
 1699      73546963 
 1699      6B456E61 
 1699      626C6500 
 1700              	.LASF4:
 1701 0015 73686F72 		.ascii	"short int\000"
 1701      7420696E 
 1701      7400
 1702              	.LASF21:
 1703 001f 73697A65 		.ascii	"sizetype\000"
 1703      74797065 
 1703      00
 1704              	.LASF24:
 1705 0028 61636358 		.ascii	"accX\000"
 1705      00
 1706              	.LASF25:
 1707 002d 61636359 		.ascii	"accY\000"
 1707      00
 1708              	.LASF26:
 1709 0032 6163635A 		.ascii	"accZ\000"
 1709      00
 1710              	.LASF5:
 1711 0037 5F5F7569 		.ascii	"__uint16_t\000"
 1711      6E743136 
 1711      5F7400
 1712              	.LASF57:
 1713 0042 433A5C55 		.ascii	"C:\\Users\\ilyap\\Documents\\PSoC Creator\\Zumo_tan"
 1713      73657273 
 1713      5C696C79 
 1713      61705C44 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 50


 1713      6F63756D 
 1714 0070 6B5C5A75 		.ascii	"k\\Zumo_robot\\ZumoBot_Tank.cydsn\000"
 1714      6D6F5F72 
 1714      6F626F74 
 1714      5C5A756D 
 1714      6F426F74 
 1715              	.LASF22:
 1716 0090 73656E73 		.ascii	"sensors_\000"
 1716      6F72735F 
 1716      00
 1717              	.LASF13:
 1718 0099 75696E74 		.ascii	"uint8_t\000"
 1718      385F7400 
 1719              	.LASF29:
 1720 00a1 6C6F6F70 		.ascii	"loop1\000"
 1720      3100
 1721              	.LASF30:
 1722 00a7 73746172 		.ascii	"startline\000"
 1722      746C696E 
 1722      6500
 1723              	.LASF38:
 1724 00b1 6D6F746F 		.ascii	"motor_turn\000"
 1724      725F7475 
 1724      726E00
 1725              	.LASF32:
 1726 00bc 636F756E 		.ascii	"count\000"
 1726      7400
 1727              	.LASF37:
 1728 00c2 72616E64 		.ascii	"rand\000"
 1728      00
 1729              	.LASF46:
 1730 00c7 7265666C 		.ascii	"reflectance_start\000"
 1730      65637461 
 1730      6E63655F 
 1730      73746172 
 1730      7400
 1731              	.LASF17:
 1732 00d9 666C6F61 		.ascii	"float\000"
 1732      7400
 1733              	.LASF10:
 1734 00df 6C6F6E67 		.ascii	"long long int\000"
 1734      206C6F6E 
 1734      6720696E 
 1734      7400
 1735              	.LASF41:
 1736 00ed 7265666C 		.ascii	"reflectance_digital\000"
 1736      65637461 
 1736      6E63655F 
 1736      64696769 
 1736      74616C00 
 1737              	.LASF8:
 1738 0101 6C6F6E67 		.ascii	"long int\000"
 1738      20696E74 
 1738      00
 1739              	.LASF35:
 1740 010a 43795379 		.ascii	"CySysTickGetValue\000"
 1740      73546963 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 51


 1740      6B476574 
 1740      56616C75 
 1740      6500
 1741              	.LASF23:
 1742 011c 61636344 		.ascii	"accData_\000"
 1742      6174615F 
 1742      00
 1743              	.LASF2:
 1744 0125 5F5F7569 		.ascii	"__uint8_t\000"
 1744      6E74385F 
 1744      7400
 1745              	.LASF43:
 1746 012f 49525F53 		.ascii	"IR_Start\000"
 1746      74617274 
 1746      00
 1747              	.LASF20:
 1748 0138 6C6F6E67 		.ascii	"long double\000"
 1748      20646F75 
 1748      626C6500 
 1749              	.LASF42:
 1750 0144 4C534D33 		.ascii	"LSM303D_Read_Acc\000"
 1750      3033445F 
 1750      52656164 
 1750      5F416363 
 1750      00
 1751              	.LASF50:
 1752 0155 49525F77 		.ascii	"IR_wait\000"
 1752      61697400 
 1753              	.LASF1:
 1754 015d 756E7369 		.ascii	"unsigned char\000"
 1754      676E6564 
 1754      20636861 
 1754      7200
 1755              	.LASF47:
 1756 016b 7265666C 		.ascii	"reflectance_set_threshold\000"
 1756      65637461 
 1756      6E63655F 
 1756      7365745F 
 1756      74687265 
 1757              	.LASF0:
 1758 0185 7369676E 		.ascii	"signed char\000"
 1758      65642063 
 1758      68617200 
 1759              	.LASF53:
 1760 0191 42617474 		.ascii	"BatteryLed_Write\000"
 1760      6572794C 
 1760      65645F57 
 1760      72697465 
 1760      00
 1761              	.LASF11:
 1762 01a2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1762      206C6F6E 
 1762      6720756E 
 1762      7369676E 
 1762      65642069 
 1763              	.LASF39:
 1764 01b9 76546173 		.ascii	"vTaskDelay\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 52


 1764      6B44656C 
 1764      617900
 1765              	.LASF45:
 1766 01c4 49525F66 		.ascii	"IR_flush\000"
 1766      6C757368 
 1766      00
 1767              	.LASF12:
 1768 01cd 756E7369 		.ascii	"unsigned int\000"
 1768      676E6564 
 1768      20696E74 
 1768      00
 1769              	.LASF15:
 1770 01da 75696E74 		.ascii	"uint16_t\000"
 1770      31365F74 
 1770      00
 1771              	.LASF31:
 1772 01e3 6C6F6F70 		.ascii	"loop2\000"
 1772      3200
 1773              	.LASF60:
 1774 01e9 70757473 		.ascii	"puts\000"
 1774      00
 1775              	.LASF33:
 1776 01ee 73746172 		.ascii	"start\000"
 1776      7400
 1777              	.LASF6:
 1778 01f4 73686F72 		.ascii	"short unsigned int\000"
 1778      7420756E 
 1778      7369676E 
 1778      65642069 
 1778      6E7400
 1779              	.LASF49:
 1780 0207 6D6F746F 		.ascii	"motor_forward\000"
 1780      725F666F 
 1780      72776172 
 1780      6400
 1781              	.LASF19:
 1782 0215 63686172 		.ascii	"char\000"
 1782      00
 1783              	.LASF16:
 1784 021a 696E7433 		.ascii	"int32_t\000"
 1784      325F7400 
 1785              	.LASF14:
 1786 0222 696E7431 		.ascii	"int16_t\000"
 1786      365F7400 
 1787              	.LASF34:
 1788 022a 5F426F6F 		.ascii	"_Bool\000"
 1788      6C00
 1789              	.LASF36:
 1790 0230 7072696E 		.ascii	"print_mqtt\000"
 1790      745F6D71 
 1790      747400
 1791              	.LASF27:
 1792 023b 64617461 		.ascii	"data\000"
 1792      00
 1793              	.LASF54:
 1794 0240 5357315F 		.ascii	"SW1_Read\000"
 1794      52656164 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 53


 1794      00
 1795              	.LASF56:
 1796 0249 6D61696E 		.ascii	"main.c\000"
 1796      2E6300
 1797              	.LASF9:
 1798 0250 6C6F6E67 		.ascii	"long unsigned int\000"
 1798      20756E73 
 1798      69676E65 
 1798      6420696E 
 1798      7400
 1799              	.LASF18:
 1800 0262 646F7562 		.ascii	"double\000"
 1800      6C6500
 1801              	.LASF44:
 1802 0269 6D6F746F 		.ascii	"motor_start\000"
 1802      725F7374 
 1802      61727400 
 1803              	.LASF61:
 1804 0275 5F5F6275 		.ascii	"__builtin_puts\000"
 1804      696C7469 
 1804      6E5F7075 
 1804      747300
 1805              	.LASF28:
 1806 0284 62757474 		.ascii	"button_\000"
 1806      6F6E5F00 
 1807              	.LASF58:
 1808 028c 7A6D6169 		.ascii	"zmain\000"
 1808      6E00
 1809              	.LASF7:
 1810 0292 5F5F696E 		.ascii	"__int32_t\000"
 1810      7433325F 
 1810      7400
 1811              	.LASF40:
 1812 029c 7265666C 		.ascii	"reflectance_read\000"
 1812      65637461 
 1812      6E63655F 
 1812      72656164 
 1812      00
 1813              	.LASF3:
 1814 02ad 5F5F696E 		.ascii	"__int16_t\000"
 1814      7431365F 
 1814      7400
 1815              	.LASF52:
 1816 02b7 43795379 		.ascii	"CySysTickStart\000"
 1816      73546963 
 1816      6B537461 
 1816      727400
 1817              	.LASF59:
 1818 02c6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1818      52784275 
 1818      66666572 
 1818      00
 1819              	.LASF55:
 1820 02d3 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1820      43313120 
 1820      352E342E 
 1820      31203230 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccrjCv7N.s 			page 54


 1820      31363036 
 1821 0306 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1821      20726576 
 1821      6973696F 
 1821      6E203233 
 1821      37373135 
 1822 0339 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1822      66756E63 
 1822      74696F6E 
 1822      2D736563 
 1822      74696F6E 
 1823              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
