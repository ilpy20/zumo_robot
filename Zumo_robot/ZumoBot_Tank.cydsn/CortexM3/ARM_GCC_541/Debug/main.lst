ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.zmain,"ax",%progbits
  20              		.align	2
  21              		.global	zmain
  22              		.thumb
  23              		.thumb_func
  24              		.type	zmain, %function
  25              	zmain:
  26              	.LFB85:
  27              		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        **** * @mainpage ZumoBot Project
   3:main.c        **** * @brief    You can make your own ZumoBot with various sensors.
   4:main.c        **** * @details  <br><br>
   5:main.c        ****     <p>
   6:main.c        ****     <B>General</B><br>
   7:main.c        ****     You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress
   8:main.c        ****     library has basic methods of various sensors and communications so that you can make what you w
   9:main.c        ****     <br><br>
  10:main.c        ****     </p>
  11:main.c        ****     
  12:main.c        ****     <p>
  13:main.c        ****     <B>Sensors</B><br>
  14:main.c        ****     &nbsp;Included: <br>
  15:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
  16:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
  17:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
  18:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Motors
  19:main.c        ****     &nbsp;Wii nunchuck<br>
  20:main.c        ****     &nbsp;TSOP-2236: IR Receiver<br>
  21:main.c        ****     &nbsp;HC-SR04: Ultrasonic sensor<br>
  22:main.c        ****     &nbsp;APDS-9301: Ambient light sensor<br>
  23:main.c        ****     &nbsp;IR LED <br><br><br>
  24:main.c        ****     </p>
  25:main.c        ****     
  26:main.c        ****     <p>
  27:main.c        ****     <B>Communication</B><br>
  28:main.c        ****     I2C, UART, Serial<br>
  29:main.c        ****     </p>
  30:main.c        **** */
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 2


  31:main.c        **** 
  32:main.c        **** #include <project.h>
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdlib.h>
  35:main.c        **** #include "FreeRTOS.h"
  36:main.c        **** #include "task.h"
  37:main.c        **** #include "Motor.h"
  38:main.c        **** #include "Ultra.h"
  39:main.c        **** #include "Nunchuk.h"
  40:main.c        **** #include "Reflectance.h"
  41:main.c        **** #include "Gyro.h"
  42:main.c        **** #include "Accel_magnet.h"
  43:main.c        **** #include "LSM303D.h"
  44:main.c        **** #include "IR.h"
  45:main.c        **** #include "Beep.h"
  46:main.c        **** #include "mqtt_sender.h"
  47:main.c        **** #include <time.h>
  48:main.c        **** #include <sys/time.h>
  49:main.c        **** #include "serial1.h"
  50:main.c        **** #include <unistd.h>
  51:main.c        **** /**
  52:main.c        ****  * @file    main.c
  53:main.c        ****  * @brief   
  54:main.c        ****  * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp
  55:main.c        **** */
  56:main.c        **** 
  57:main.c        **** #if 0
  58:main.c        **** //template
  59:main.c        **** void zmain(void){
  60:main.c        ****     
  61:main.c        ****     while(true)
  62:main.c        ****     {
  63:main.c        ****         BatteryLed_Write(!SW1_Read());
  64:main.c        ****         vTaskDelay(100);
  65:main.c        ****     }
  66:main.c        **** }
  67:main.c        **** #endif
  68:main.c        **** 
  69:main.c        **** #if 0
  70:main.c        **** // Beep light test
  71:main.c        **** void zmain(void)
  72:main.c        **** {
  73:main.c        ****     while(true)
  74:main.c        ****     {
  75:main.c        ****         if ((SW1_Read() == 0)){
  76:main.c        ****             for(int i = 0; i < 3; i++){
  77:main.c        ****                 BatteryLed_Write(1);
  78:main.c        ****                 Beep(750, 30);
  79:main.c        ****                 vTaskDelay(500);
  80:main.c        ****                 BatteryLed_Write(0);
  81:main.c        ****                 vTaskDelay(500);
  82:main.c        ****             }
  83:main.c        ****             for(int i = 0; i<3; i++){
  84:main.c        ****                 BatteryLed_Write(1);
  85:main.c        ****                 Beep(750, 30);
  86:main.c        ****                 vTaskDelay(1000);
  87:main.c        ****                 BatteryLed_Write(0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 3


  88:main.c        ****                 vTaskDelay(500);
  89:main.c        ****             }
  90:main.c        ****             for(int i = 0; i < 3; i++){
  91:main.c        ****                 BatteryLed_Write(1);
  92:main.c        ****                 Beep(750, 30);
  93:main.c        ****                 vTaskDelay(500);
  94:main.c        ****                 BatteryLed_Write(0);
  95:main.c        ****                 vTaskDelay(500);
  96:main.c        ****             }
  97:main.c        ****         }
  98:main.c        ****     }
  99:main.c        ****     
 100:main.c        ****     
 101:main.c        ****  }   
 102:main.c        **** #endif
 103:main.c        **** 
 104:main.c        **** #if 0
 105:main.c        **** // Name and age
 106:main.c        **** void zmain(void)
 107:main.c        **** {
 108:main.c        ****     TickType_t start;
 109:main.c        ****     TickType_t end;
 110:main.c        ****     char name[32];
 111:main.c        ****     int age;
 112:main.c        ****     
 113:main.c        ****     
 114:main.c        ****     printf("\n\n");
 115:main.c        ****     
 116:main.c        ****     printf("Enter your name: ");
 117:main.c        ****     //fflush(stdout);
 118:main.c        ****     start = xTaskGetTickCount();
 119:main.c        ****     scanf("%s", name);
 120:main.c        ****     printf("Enter your age: ");
 121:main.c        ****     //fflush(stdout);
 122:main.c        ****     scanf("%d", &age);
 123:main.c        ****     end = xTaskGetTickCount();
 124:main.c        ****     int time_long = end - start;
 125:main.c        ****     //printf("You are [%s], age = %d\n", name, age);
 126:main.c        ****     if (age <= 21){
 127:main.c        ****         if(time_long < 3000){
 128:main.c        ****             printf("\nSuper fast dude!");
 129:main.c        ****         }
 130:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 131:main.c        ****             printf("\nSo mediocre.");
 132:main.c        ****         }
 133:main.c        ****         else{
 134:main.c        ****             printf("\nMy granny is faster than you!");
 135:main.c        ****         }
 136:main.c        ****     }
 137:main.c        ****     else if((age >= 22)&&(age<=50)){
 138:main.c        ****         if(time_long < 3000){
 139:main.c        ****             printf("\nBe quick or be dead");
 140:main.c        ****         }
 141:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 142:main.c        ****             printf("\nYou're so average.");
 143:main.c        ****         }
 144:main.c        ****         else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 4


 145:main.c        ****             printf("\nHave you been smoking something illegal?");
 146:main.c        ****         }
 147:main.c        ****     }
 148:main.c        ****     else{
 149:main.c        ****         if(time_long <= 3000){
 150:main.c        ****             printf("\nStill going strong");
 151:main.c        ****         }
 152:main.c        ****         else if((time_long >= 4000)&&(time_long <=5000)){
 153:main.c        ****             printf("\nYou are doing ok for your age.");
 154:main.c        ****         }
 155:main.c        ****         else{
 156:main.c        ****             printf("\nDo they still allow you to drive?");
 157:main.c        ****         }
 158:main.c        ****     }
 159:main.c        ****     while(true)
 160:main.c        ****     {
 161:main.c        ****         BatteryLed_Write(!SW1_Read());
 162:main.c        ****         vTaskDelay(100);
 163:main.c        ****     }
 164:main.c        ****  }   
 165:main.c        **** #endif
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** #if 0
 169:main.c        **** //battery level//
 170:main.c        **** void zmain(void)
 171:main.c        **** {
 172:main.c        **** 	ADC_Battery_Start();   	 
 173:main.c        **** 
 174:main.c        **** 	int16 adcresult =0;
 175:main.c        **** 	float volts = 0.0;
 176:main.c        **** 
 177:main.c        **** 	printf("\nBoot\n");
 178:main.c        **** 
 179:main.c        **** 	//BatteryLed_Write(1); // Switch led on
 180:main.c        **** 	//BatteryLed_Write(0); // Switch led off
 181:main.c        **** 	//uint8 button;
 182:main.c        **** 	//button = SW1_Read(); // read SW1 on pSoC board
 183:main.c        **** 	// SW1_Read() returns zero when button is pressed
 184:main.c        **** 	// SW1_Read() returns one when button is not pressed
 185:main.c        **** 
 186:main.c        **** 	while(true)
 187:main.c        **** 	{
 188:main.c        ****     	char msg[80];
 189:main.c        ****     	ADC_Battery_StartConvert(); // start sampling
 190:main.c        ****     	if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for ADC converted val
 191:main.c        ****         	adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
 192:main.c        ****         	volts=(adcresult*5/4095)*(30/20);
 193:main.c        ****         	// convert value to Volts
 194:main.c        ****         	// you need to implement the conversion
 195:main.c        ****        	 
 196:main.c        ****         	// Print both ADC results and converted value
 197:main.c        ****         	printf("%d %f\r\n",adcresult, volts);
 198:main.c        ****        	 
 199:main.c        ****     	if (volts<4){
 200:main.c        ****         	while(SW1_Read()){
 201:main.c        ****             	BatteryLed_Write(1);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 5


 202:main.c        ****             	vTaskDelay(500);
 203:main.c        ****             	BatteryLed_Write(0);
 204:main.c        ****             	vTaskDelay(500);
 205:main.c        ****         	}
 206:main.c        ****     	}
 207:main.c        ****     	}
 208:main.c        ****     	vTaskDelay(500);
 209:main.c        **** 	}
 210:main.c        ****  }  
 211:main.c        **** 
 212:main.c        ****    
 213:main.c        **** #endif
 214:main.c        **** 
 215:main.c        **** #if 0
 216:main.c        **** // button
 217:main.c        **** void zmain(void)
 218:main.c        **** {
 219:main.c        ****     while(true) {
 220:main.c        ****         printf("Press button within 5 seconds!\n");
 221:main.c        ****         int i = 50;
 222:main.c        ****         while(i > 0) {
 223:main.c        ****             if(SW1_Read() == 0) {
 224:main.c        ****                 break;
 225:main.c        ****             }
 226:main.c        ****             vTaskDelay(100);
 227:main.c        ****             --i;
 228:main.c        ****         }
 229:main.c        ****         if(i > 0) {
 230:main.c        ****             printf("Good work\n");
 231:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait until button is released
 232:main.c        ****         }
 233:main.c        ****         else {
 234:main.c        ****             printf("You didn't press the button\n");
 235:main.c        ****         }
 236:main.c        ****     }
 237:main.c        **** }
 238:main.c        **** #endif
 239:main.c        **** 
 240:main.c        **** #if 0
 241:main.c        **** // button
 242:main.c        **** void zmain(void)
 243:main.c        **** {
 244:main.c        ****     printf("\nBoot\n");
 245:main.c        **** 
 246:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 247:main.c        ****     BatteryLed_Write(0); // Switch led off 
 248:main.c        ****     
 249:main.c        ****     //uint8 button;
 250:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 251:main.c        ****     // SW1_Read() returns zero when button is pressed
 252:main.c        ****     // SW1_Read() returns one when button is not pressed
 253:main.c        ****     
 254:main.c        ****     bool led = false;
 255:main.c        ****     
 256:main.c        ****     while(true)
 257:main.c        ****     {
 258:main.c        ****         // toggle led state when button is pressed
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 6


 259:main.c        ****         if(SW1_Read() == 0) {
 260:main.c        ****             led = !led;
 261:main.c        ****             BatteryLed_Write(led);
 262:main.c        ****             if(led) printf("Led is ON\n");
 263:main.c        ****             else printf("Led is OFF\n");
 264:main.c        ****             Beep(1000, 150);
 265:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait while button is being pressed
 266:main.c        ****         }        
 267:main.c        ****     }
 268:main.c        ****  }   
 269:main.c        **** #endif
 270:main.c        **** 
 271:main.c        **** #if 0
 272:main.c        ****     void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);
 273:main.c        ****     
 274:main.c        **** void zmain(void)
 275:main.c        **** {
 276:main.c        ****     Ultra_Start();
 277:main.c        ****     motor_start(0,0);
 278:main.c        ****     motor_forward(0,0);
 279:main.c        ****     
 280:main.c        ****     vTaskDelay(3000);
 281:main.c        ****     
 282:main.c        ****     while(true){
 283:main.c        ****     int distance = Ultra_GetDistance();
 284:main.c        ****     
 285:main.c        ****     if(distance <= 10 && distance !=0){
 286:main.c        ****         motor_backward(50,500);
 287:main.c        ****         Beep(150, 200);
 288:main.c        ****         motor_turn(150,150, 500);
 289:main.c        ****         motor_forward(0,0);
 290:main.c        ****      }
 291:main.c        ****     motor_turn(200,100,50);
 292:main.c        ****     }   
 293:main.c        **** }
 294:main.c        **** #endif
 295:main.c        **** 
 296:main.c        **** #if 0
 297:main.c        **** //ultrasonic sensor//
 298:main.c        **** void zmain(void)
 299:main.c        **** {
 300:main.c        ****     Ultra_Start();                          // Ultra Sonic Start function
 301:main.c        ****     
 302:main.c        ****     while(true) {
 303:main.c        ****         int d = Ultra_GetDistance();
 304:main.c        ****         // Print the detected distance (centimeters)
 305:main.c        ****         printf("distance = %d\r\n", d);
 306:main.c        ****         vTaskDelay(200);
 307:main.c        ****     }
 308:main.c        **** }   
 309:main.c        **** #endif
 310:main.c        **** 
 311:main.c        **** #if 0
 312:main.c        **** //IR receiverm - how to wait for IR remote commands
 313:main.c        **** void zmain(void)
 314:main.c        **** {
 315:main.c        ****     uint8_t button_;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 7


 316:main.c        ****     printf("\nStart\n");
 317:main.c        ****     
 318:main.c        ****     while(true){
 319:main.c        ****         button_ = SW1_Read();
 320:main.c        ****         if(button_==0){
 321:main.c        ****             IR_Start();
 322:main.c        ****             printf("\n\nIR test\n");
 323:main.c        ****             struct sensors_ ref;
 324:main.c        ****             struct sensors_ dig;
 325:main.c        ****             bool led = false,loop = true, startline= true;
 326:main.c        ****             int count =0;
 327:main.c        ****             motor_start();              // enable motor controller 
 328:main.c        ****             IR_flush(); // clear IR receive buffer
 329:main.c        ****             printf("Buffer cleared\n");
 330:main.c        ****             
 331:main.c        ****             reflectance_start();
 332:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 333:main.c        ****             vTaskDelay(200);
 334:main.c        ****                 while(startline){
 335:main.c        ****                     // read raw sensor values
 336:main.c        ****                     reflectance_read(&ref);
 337:main.c        ****                     reflectance_digital(&dig); 
 338:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 339:main.c        ****                         motor_turn(50,50,50);       // motor forward
 340:main.c        ****                         Beep(60,80);
 341:main.c        ****                     }
 342:main.c        ****                     else{
 343:main.c        ****                         motor_forward(0,0);       // Stop motors
 344:main.c        ****                         startline = false;
 345:main.c        ****                     }
 346:main.c        ****                 }
 347:main.c        ****             IR_wait();  // wait for IR command
 348:main.c        ****             led = !led;
 349:main.c        ****             BatteryLed_Write(led);   
 350:main.c        ****             
 351:main.c        ****             // Toggle led when IR signal is received
 352:main.c        ****             while(loop)
 353:main.c        ****             {   
 354:main.c        ****                 if(led){
 355:main.c        ****                     // read raw sensor values
 356:main.c        ****                     reflectance_read(&ref);
 357:main.c        ****                     reflectance_digital(&dig); 
 358:main.c        ****                     
 359:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 360:main.c        ****                         motor_turn(50,50,50);       // motor forward
 361:main.c        ****                         vTaskDelay(50);
 362:main.c        ****                         count++;
 363:main.c        ****                         printf("count %d \n",count);
 364:main.c        ****                         if(count >= 7){
 365:main.c        ****                             motor_forward(0,0);       // Stop motors
 366:main.c        ****                             loop = false;
 367:main.c        ****                         }
 368:main.c        ****                     }
 369:main.c        ****                     else{
 370:main.c        ****                          motor_turn(50,50,50);       // motor forward
 371:main.c        ****                         Beep(100,100);
 372:main.c        ****                     }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 8


 373:main.c        ****                 }
 374:main.c        ****                 else {
 375:main.c        ****                     printf("Led is OFF\n");
 376:main.c        ****                     loop = false;
 377:main.c        ****                 }
 378:main.c        ****                
 379:main.c        ****             }    
 380:main.c        ****         }
 381:main.c        ****     }
 382:main.c        ****  }   
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        **** 
 386:main.c        **** #if 0
 387:main.c        **** //IR receiverm - how to wait for IR remote commands
 388:main.c        **** void zmain(void)
 389:main.c        **** {
 390:main.c        ****     uint8_t button_;
 391:main.c        ****     printf("\nStart\n");
 392:main.c        ****     
 393:main.c        ****     while(true){
 394:main.c        ****         button_ = SW1_Read();
 395:main.c        ****         if(button_==0){
 396:main.c        ****             IR_Start();
 397:main.c        ****             printf("\n\nIR test\n");
 398:main.c        ****             struct sensors_ ref;
 399:main.c        ****             struct sensors_ dig;
 400:main.c        ****             bool led = false,loop = true, startline= true/*, crossline= true*/;
 401:main.c        ****             int count =0;
 402:main.c        ****             motor_start();              // enable motor controller 
 403:main.c        ****             IR_flush(); // clear IR receive buffer
 404:main.c        ****             printf("Buffer cleared\n");
 405:main.c        ****             
 406:main.c        ****             reflectance_start();
 407:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 408:main.c        ****             vTaskDelay(200);
 409:main.c        ****                 while(startline){
 410:main.c        ****                     // read raw sensor values
 411:main.c        ****                     reflectance_read(&ref);
 412:main.c        ****                     reflectance_digital(&dig); 
 413:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 414:main.c        ****                         motor_turn(50,50,0);       // motor forward
 415:main.c        ****                         //Beep(60,80);
 416:main.c        ****                     }
 417:main.c        ****                     else{
 418:main.c        ****                         motor_forward(0,0);       // Stop motors
 419:main.c        ****                         startline = false;
 420:main.c        ****                     }
 421:main.c        ****                 }
 422:main.c        ****             IR_wait();  // wait for IR command
 423:main.c        ****             led = !led;
 424:main.c        ****             BatteryLed_Write(led);   
 425:main.c        ****             
 426:main.c        ****             // Toggle led when IR signal is received
 427:main.c        ****             while(loop)
 428:main.c        ****             {   
 429:main.c        ****                 if(led){
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 9


 430:main.c        ****                     //do {
 431:main.c        ****                         // read raw sensor values
 432:main.c        ****                     //reflectance_read(&ref);
 433:main.c        ****                     reflectance_digital(&dig); 
 434:main.c        ****                     
 435:main.c        ****                    
 436:main.c        ****                         /*if(dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r3 == 1 && dig.r2 == 
 437:main.c        ****                             motor_forward(0,0);
 438:main.c        ****                             count++;
 439:main.c        ****                             if(count==1){
 440:main.c        ****                                 motor_turn(50,50,50);       // motor forward
 441:main.c        ****                             }
 442:main.c        ****                             if (count==2){
 443:main.c        ****                                 motor_turn_left(10,100,500);
 444:main.c        ****                             }
 445:main.c        ****                             if (count<=4){
 446:main.c        ****                                 motor_turn_right(100,10,500);
 447:main.c        ****                             }
 448:main.c        ****                             if (count==5){
 449:main.c        ****                                 motor_forward(0,0);       // Stop motors
 450:main.c        ****                                 led = false;
 451:main.c        ****                                 BatteryLed_Write(led);
 452:main.c        ****                             }
 453:main.c        ****                         } */
 454:main.c        ****                         if(dig.r2 == 1 && dig.r1 == 1){
 455:main.c        ****                             //count++;
 456:main.c        ****                             motor_turn(100,10,0);       // motor turn left
 457:main.c        ****                             //Beep(20,20);
 458:main.c        ****                             vTaskDelay(0);
 459:main.c        ****                             
 460:main.c        ****                             printf("count %d \n",count);
 461:main.c        ****                         }
 462:main.c        ****                         if(dig.l2 == 1 && dig.l1 == 1){
 463:main.c        ****                             //count++;
 464:main.c        ****                             motor_turn(10,100,0);       // motor turn right
 465:main.c        ****                            // Beep(20,20);
 466:main.c        ****                             vTaskDelay(0);
 467:main.c        ****                             
 468:main.c        ****                             printf("count %d \n",count);
 469:main.c        ****                         }
 470:main.c        ****                        // printf("count %d \n",count);
 471:main.c        ****                         if (dig.l1 == 1 && dig.r1 == 1){
 472:main.c        ****                             
 473:main.c        ****                             motor_turn(50,50,0);       // motor forward
 474:main.c        ****                             vTaskDelay(0);
 475:main.c        ****                             //Beep(50,50);
 476:main.c        ****                             //count++;
 477:main.c        ****                             printf("count %d \n",count);
 478:main.c        ****                         }
 479:main.c        ****                    
 480:main.c        ****                 }
 481:main.c        ****                 else {
 482:main.c        ****                     printf("Led is OFF\n");
 483:main.c        ****                     loop = false;
 484:main.c        ****                 }
 485:main.c        ****                
 486:main.c        ****             }    
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 10


 487:main.c        ****         }
 488:main.c        ****     }
 489:main.c        ****  }  
 490:main.c        **** #endif
 491:main.c        **** 
 492:main.c        **** #if 0
 493:main.c        **** //IR receiverm - how to wait for IR remote commands
 494:main.c        **** void zmain(void)
 495:main.c        **** {
 496:main.c        ****     //IR receiverm - how to wait for IR remote commands
 497:main.c        **** void zmain(void);
 498:main.c        **** 
 499:main.c        ****     uint8_t button_;
 500:main.c        ****     printf("\nStart\n");
 501:main.c        **** 
 502:main.c        ****     while(true){
 503:main.c        ****         button_ = SW1_Read();
 504:main.c        ****         if(button_==0){
 505:main.c        ****             IR_Start();
 506:main.c        ****             printf("\n\nIR test\n");
 507:main.c        ****             struct sensors_ ref;
 508:main.c        ****             struct sensors_ dig;
 509:main.c        ****             bool led = false,loop = true, startline= true;
 510:main.c        ****             int count =0;
 511:main.c        ****             motor_start();              // enable motor controller 
 512:main.c        ****             IR_flush(); // clear IR receive buffer
 513:main.c        ****             printf("Buffer cleared\n");
 514:main.c        **** 
 515:main.c        ****             reflectance_start();
 516:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 517:main.c        ****             vTaskDelay(200);
 518:main.c        ****                 while(startline){
 519:main.c        ****                     // read raw sensor values
 520:main.c        ****                     reflectance_read(&ref);
 521:main.c        ****                     reflectance_digital(&dig); 
 522:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 523:main.c        ****                         motor_turn(50,50,50);       // motor forward
 524:main.c        ****                         Beep(60,80);
 525:main.c        ****                     }
 526:main.c        **** 
 527:main.c        ****                     else{
 528:main.c        ****                         motor_forward(0,0);       // Stop motors
 529:main.c        ****                         startline = false;
 530:main.c        ****                     }
 531:main.c        ****                 }
 532:main.c        ****             IR_wait();  // wait for IR command
 533:main.c        ****             led = !led;
 534:main.c        ****             BatteryLed_Write(led);   
 535:main.c        **** 
 536:main.c        ****             // Toggle led when IR signal is received
 537:main.c        ****             while(loop)
 538:main.c        ****             {   
 539:main.c        ****                 if(led){
 540:main.c        ****                     // read raw sensor values
 541:main.c        ****                     reflectance_read(&ref);
 542:main.c        ****                     reflectance_digital(&dig); 
 543:main.c        **** 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 11


 544:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1){
 545:main.c        ****                         count++;
 546:main.c        ****                         printf("\nStart\n");
 547:main.c        ****                         printf("count %d \n",count);
 548:main.c        **** 
 549:main.c        **** 
 550:main.c        ****                         while (dig.r3 == 1 && dig.l3 == 1){
 551:main.c        ****                          motor_turn(50,49,0);
 552:main.c        ****                         reflectance_digital(&dig);
 553:main.c        ****                         }
 554:main.c        ****                         if(count >= 2){
 555:main.c        ****                             motor_forward(210,0);       // Stop motors
 556:main.c        ****                         }
 557:main.c        ****                     }
 558:main.c        **** 
 559:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 1){
 560:main.c        ****                         motor_turn(210,210,0);   //goes forward lul
 561:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 562:main.c        ****                     }
 563:main.c        ****                     else if (dig.l1 == 0 && dig.r1 == 1){
 564:main.c        ****                         motor_turn(210,0,0);  //turns right lul
 565:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 566:main.c        ****                     }
 567:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 0){
 568:main.c        ****                         motor_turn(0,210,0);   ///should turn left, right lul??   
 569:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 570:main.c        ****                     }
 571:main.c        ****                     else if (dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.l2 == 
 572:main.c        ****                         motor_turn(0,0,100000);   ///should stop, right lul??   
 573:main.c        **** 
 574:main.c        **** 
 575:main.c        ****                         }
 576:main.c        ****                     }
 577:main.c        ****                 }
 578:main.c        **** 
 579:main.c        **** 
 580:main.c        ****             }    
 581:main.c        ****         }
 582:main.c        **** 
 583:main.c        **** }   
 584:main.c        **** #endif
 585:main.c        **** 
 586:main.c        **** 
 587:main.c        **** #if 0
 588:main.c        **** //reflectance
 589:main.c        **** void zmain(void)
 590:main.c        **** {
 591:main.c        ****     struct sensors_ ref;
 592:main.c        ****     struct sensors_ dig;
 593:main.c        **** 
 594:main.c        ****     reflectance_start();
 595:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 596:main.c        ****     
 597:main.c        **** 
 598:main.c        ****     while(true)
 599:main.c        ****     {
 600:main.c        ****         // read raw sensor values
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 12


 601:main.c        ****         reflectance_read(&ref);
 602:main.c        ****         // print out each period of reflectance sensors
 603:main.c        ****         printf("%5d %5d %5d %5d %5d %5d\r\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3);     
 604:main.c        ****         
 605:main.c        ****         // read digital values that are based on threshold. 0 = white, 1 = black
 606:main.c        ****         // when blackness value is over threshold the sensors reads 1, otherwise 0
 607:main.c        ****         reflectance_digital(&dig); 
 608:main.c        ****         //print out 0 or 1 according to results of reflectance period
 609:main.c        ****         printf("%5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3);    
 610:main.c        ****         
 611:main.c        ****         vTaskDelay(200);
 612:main.c        ****     }
 613:main.c        **** }   
 614:main.c        **** #endif
 615:main.c        **** 
 616:main.c        **** 
 617:main.c        **** #if 0
 618:main.c        **** //motor
 619:main.c        **** void zmain(void)
 620:main.c        **** {
 621:main.c        ****     struct sensors_ ref;
 622:main.c        ****     struct sensors_ dig;
 623:main.c        **** 
 624:main.c        ****     reflectance_start();
 625:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 626:main.c        ****     
 627:main.c        ****     reflectance_digital(&dig);
 628:main.c        ****     
 629:main.c        ****     motor_start();              // enable motor controller
 630:main.c        ****     motor_forward(0,0);         // set speed to zero to stop motors
 631:main.c        **** 
 632:main.c        ****     vTaskDelay(3000);
 633:main.c        ****     
 634:main.c        ****     if(dig.l3, dig.l2, dig.l1){
 635:main.c        ****         
 636:main.c        ****     }
 637:main.c        ****     motor_forward(100,2000);     // moving forward
 638:main.c        ****     motor_turn(200,50,2000);     // turn
 639:main.c        ****     motor_turn(50,200,2000);     // turn
 640:main.c        ****     motor_backward(100,2000);    // moving backward
 641:main.c        ****      
 642:main.c        ****     motor_forward(0,0);         // stop motors
 643:main.c        **** 
 644:main.c        ****     motor_stop();               // disable motor controller
 645:main.c        ****     
 646:main.c        ****     while(true)
 647:main.c        ****     {
 648:main.c        ****         vTaskDelay(100);
 649:main.c        ****     }
 650:main.c        **** }
 651:main.c        **** #endif
 652:main.c        **** 
 653:main.c        **** #if 0
 654:main.c        **** /* Example of how to use te Accelerometer!!!*/
 655:main.c        **** void zmain(void)
 656:main.c        **** {
 657:main.c        ****     struct accData_ data;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 13


 658:main.c        ****     
 659:main.c        ****     printf("Accelerometer test...\n");
 660:main.c        **** 
 661:main.c        ****     if(!LSM303D_Start()){
 662:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 663:main.c        ****         vTaskSuspend(NULL);
 664:main.c        ****     }
 665:main.c        ****     else {
 666:main.c        ****         printf("Device Ok...\n");
 667:main.c        ****     }
 668:main.c        ****     motor_start();              // enable motor controller
 669:main.c        ****     motor_forward(0,0);
 670:main.c        ****     srand(time(NULL));   // Initialization, should only be called once.
 671:main.c        ****     int r=0, counter=0;
 672:main.c        ****     while(true)
 673:main.c        ****     {
 674:main.c        ****         LSM303D_Read_Acc(&data);
 675:main.c        ****        
 676:main.c        ****         motor_forward(200,20);
 677:main.c        ****         //vTaskDelay(200);
 678:main.c        ****         if (counter == 0) r = rand() % 2;
 679:main.c        ****         if (counter > 19){
 680:main.c        ****             counter = 0;
 681:main.c        ****             r = rand() % 2;
 682:main.c        ****         }// Returns a pseudo-random integer between 0 and RAND_MAX.
 683:main.c        ****             if(r == 0){
 684:main.c        ****                 motor_turn(200,50,5);
 685:main.c        ****                 vTaskDelay(0);
 686:main.c        ****                 //motor_forward(0,0);
 687:main.c        ****             }
 688:main.c        ****             else if(r == 1){
 689:main.c        ****                 motor_turn(50,200,5);
 690:main.c        ****                 vTaskDelay(0);
 691:main.c        ****                 //motor_forward(0,0);
 692:main.c        ****             }
 693:main.c        ****             else {
 694:main.c        ****                 motor_forward(200,20);
 695:main.c        ****                 vTaskDelay(0);
 696:main.c        ****             }
 697:main.c        ****         LSM303D_Read_Acc(&data);
 698:main.c        ****         if((data.accX<-4000)){
 699:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 700:main.c        ****             if(r == 0){
 701:main.c        ****                 motor_backward(80,50);
 702:main.c        ****                 motor_turn(200,50,500);
 703:main.c        ****                 vTaskDelay(0);
 704:main.c        ****                 //motor_forward(0,0);
 705:main.c        ****             }
 706:main.c        ****             else{
 707:main.c        ****                 motor_backward(80,50);
 708:main.c        ****                 motor_turn(50,200,500);
 709:main.c        ****                 vTaskDelay(0);
 710:main.c        ****                 //motor_forward(0,0);
 711:main.c        ****             }
 712:main.c        ****             motor_forward(100,100);
 713:main.c        ****         }
 714:main.c        ****         counter++;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 14


 715:main.c        ****         printf("%8d %8d %8d\n",data.accX, data.accY, data.accZ);
 716:main.c        ****         vTaskDelay(0);
 717:main.c        ****     }
 718:main.c        ****  }   
 719:main.c        **** #endif    
 720:main.c        **** 
 721:main.c        **** #if 0
 722:main.c        **** // MQTT test
 723:main.c        **** void zmain(void)
 724:main.c        **** {
 725:main.c        ****     int ctr = 0;
 726:main.c        **** 
 727:main.c        ****     printf("\nBoot\n");
 728:main.c        ****     send_mqtt("Zumo01/debug", "Boot");
 729:main.c        **** 
 730:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 731:main.c        ****     BatteryLed_Write(0); // Switch led off 
 732:main.c        **** 
 733:main.c        ****     while(true)
 734:main.c        ****     {
 735:main.c        ****         printf("Ctr: %d, Button: %d\n", ctr, SW1_Read());
 736:main.c        ****         print_mqtt("Zumo01/debug", "Ctr: %d, Button: %d", ctr, SW1_Read());
 737:main.c        **** 
 738:main.c        ****         vTaskDelay(1000);
 739:main.c        ****         ctr++;
 740:main.c        ****     }
 741:main.c        ****  }   
 742:main.c        **** #endif
 743:main.c        **** 
 744:main.c        **** #if 0
 745:main.c        **** 
 746:main.c        ****     
 747:main.c        **** void zmain(void)
 748:main.c        **** {
 749:main.c        ****     Ultra_Start();
 750:main.c        ****     motor_start(0,0);
 751:main.c        ****     motor_forward(0,0);
 752:main.c        ****     
 753:main.c        ****     vTaskDelay(3000);
 754:main.c        ****     
 755:main.c        ****     while(true){
 756:main.c        ****         int distance = Ultra_GetDistance();
 757:main.c        ****     
 758:main.c        ****         if(distance <= 10 && distance !=0){
 759:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 760:main.c        ****             if(r == 0){
 761:main.c        ****                 motor_turn(50,200,500);
 762:main.c        ****                 vTaskDelay(0);
 763:main.c        ****                 print_mqtt("Zumo006/turn", "left");
 764:main.c        ****                 //motor_forward(0,0);
 765:main.c        ****             }
 766:main.c        ****             else{
 767:main.c        ****                 motor_turn(200,50,500);
 768:main.c        ****                 vTaskDelay(0);
 769:main.c        ****                 print_mqtt("Zumo006/turn", "right");
 770:main.c        ****                 //motor_forward(0,0);
 771:main.c        ****             }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 15


 772:main.c        ****             motor_forward(100,100);
 773:main.c        ****         }
 774:main.c        ****         
 775:main.c        ****     }   
 776:main.c        **** }
 777:main.c        **** #endif
 778:main.c        **** 
 779:main.c        **** #if 0
 780:main.c        **** //IR receiverm - how to wait for IR remote commands
 781:main.c        **** void zmain(void)
 782:main.c        **** {
 783:main.c        ****     RTC_Start(); // start real time clock
 784:main.c        ****     
 785:main.c        ****     RTC_TIME_DATE now;
 786:main.c        **** 
 787:main.c        ****     time_t myTime;
 788:main.c        ****     struct tm * timeinfo;
 789:main.c        ****     time( &myTime );
 790:main.c        ****     timeinfo = localtime( &myTime );
 791:main.c        ****     
 792:main.c        ****     // set current time
 793:main.c        ****     now.Hour = timeinfo->tm_hour;
 794:main.c        ****     now.Min = timeinfo->tm_min;
 795:main.c        ****     now.Sec = timeinfo->tm_sec6;
 796:main.c        ****     now.DayOfMonth = timeinfo->tm_mday;
 797:main.c        ****     now.Month = timeinfo->tm_mon+1;
 798:main.c        ****     now.Year = timeinfo->tm_year+1900;
 799:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 800:main.c        ****     
 801:main.c        ****     uint8_t button_;
 802:main.c        ****     printf("\nStart\n");
 803:main.c        ****     
 804:main.c        ****     while(true){
 805:main.c        ****         button_ = SW1_Read();
 806:main.c        ****         if(button_==0){
 807:main.c        ****             IR_Start();
 808:main.c        ****             printf("\n\nIR test\n");
 809:main.c        ****             struct sensors_ ref;
 810:main.c        ****             struct sensors_ dig;
 811:main.c        ****             bool led = false,loop = true, startline= true;
 812:main.c        ****             int count =0;
 813:main.c        ****             motor_start();              // enable motor controller 
 814:main.c        ****             IR_flush(); // clear IR receive buffer
 815:main.c        ****             printf("Buffer cleared\n");
 816:main.c        ****             
 817:main.c        ****             reflectance_start();
 818:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 819:main.c        ****             vTaskDelay(200);
 820:main.c        ****                 while(startline){
 821:main.c        ****                     // read raw sensor values
 822:main.c        ****                     reflectance_read(&ref);
 823:main.c        ****                     reflectance_digital(&dig); 
 824:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 825:main.c        ****                         motor_turn(50,50,50);       // motor forward
 826:main.c        ****                         Beep(60,80);
 827:main.c        ****                     }
 828:main.c        ****                     else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 16


 829:main.c        ****                         motor_forward(0,0);       // Stop motors
 830:main.c        ****                         startline = false;
 831:main.c        ****                     }
 832:main.c        ****                 }
 833:main.c        ****             IR_wait();  // wait for IR command
 834:main.c        ****             led = !led;
 835:main.c        ****             BatteryLed_Write(led);   
 836:main.c        ****             
 837:main.c        ****             // Toggle led when IR signal is received
 838:main.c        ****             while(loop)
 839:main.c        ****             {   
 840:main.c        ****                 if(led){
 841:main.c        ****                     // read raw sensor values
 842:main.c        ****                     reflectance_read(&ref);
 843:main.c        ****                     reflectance_digital(&dig); 
 844:main.c        ****                     
 845:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 846:main.c        ****                         motor_turn(50,50,50);       // motor forward
 847:main.c        ****                         motor_forward(0,0);       // Stop motors
 848:main.c        ****                         vTaskDelay(50);
 849:main.c        ****                         count++;
 850:main.c        ****                         printf("count %d \n",count);
 851:main.c        ****                         printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 852:main.c        ****                         print_mqtt("Zumo006/lap", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 853:main.c        ****                         /*if(count >= 7){
 854:main.c        ****                             motor_forward(0,0);       // Stop motors
 855:main.c        ****                             loop = false;
 856:main.c        ****                         }
 857:main.c        ****                     }
 858:main.c        ****                     else{
 859:main.c        ****                          motor_turn(50,50,50);       // motor forward
 860:main.c        ****                         Beep(100,100);
 861:main.c        ****                     }
 862:main.c        ****                 }
 863:main.c        ****                 else {
 864:main.c        ****                     printf("Led is OFF\n");
 865:main.c        ****                     loop = false;
 866:main.c        ****                 }
 867:main.c        ****                
 868:main.c        ****             }    
 869:main.c        ****         }
 870:main.c        ****     }
 871:main.c        ****  }
 872:main.c        **** #endif
 873:main.c        **** 
 874:main.c        **** #if 0
 875:main.c        **** void zmain(void)
 876:main.c        **** {    
 877:main.c        ****     struct accData_ data;
 878:main.c        ****     struct sensors_ ref;
 879:main.c        ****     struct sensors_ dig;
 880:main.c        ****     
 881:main.c        ****     printf("MQTT and sensor test...\n");
 882:main.c        **** 
 883:main.c        ****     if(!LSM303D_Start()){
 884:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 885:main.c        ****         vTaskSuspend(NULL);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 17


 886:main.c        ****     }
 887:main.c        ****     else {
 888:main.c        ****         printf("Accelerometer Ok...\n");
 889:main.c        ****     }
 890:main.c        ****     
 891:main.c        ****     int ctr = 0;
 892:main.c        ****     reflectance_start();
 893:main.c        ****     while(true)
 894:main.c        ****     {
 895:main.c        ****         LSM303D_Read_Acc(&data);
 896:main.c        ****         // send data when we detect a hit and at 10 second intervals
 897:main.c        ****         if(data.accX > 1500 || ++ctr > 1000) {
 898:main.c        ****             printf("Acc: %8d %8d %8d\n",data.accX, data.accY, data.accZ);
 899:main.c        ****             print_mqtt("Zumo01/acc", "%d,%d,%d", data.accX, data.accY, data.accZ);
 900:main.c        ****             reflectance_read(&ref);
 901:main.c        ****             printf("Ref: %8d %8d %8d %8d %8d %8d\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3
 902:main.c        ****             print_mqtt("Zumo01/ref", "%d,%d,%d,%d,%d,%d", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, r
 903:main.c        ****             reflectance_digital(&dig);
 904:main.c        ****             printf("Dig: %8d %8d %8d %8d %8d %8d\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3
 905:main.c        ****             print_mqtt("Zumo01/dig", "%d,%d,%d,%d,%d,%d", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, d
 906:main.c        ****             ctr = 0;
 907:main.c        ****         }
 908:main.c        ****         vTaskDelay(10);
 909:main.c        ****     }
 910:main.c        ****  }   
 911:main.c        **** 
 912:main.c        **** #endif
 913:main.c        **** 
 914:main.c        **** #if 0
 915:main.c        **** void zmain(void)
 916:main.c        **** {    
 917:main.c        ****     RTC_Start(); // start real time clock
 918:main.c        ****     
 919:main.c        ****     RTC_TIME_DATE now;
 920:main.c        **** 
 921:main.c        ****     // set current time
 922:main.c        ****     now.Hour = 12;
 923:main.c        ****     now.Min = 34;
 924:main.c        ****     now.Sec = 56;
 925:main.c        ****     now.DayOfMonth = 25;
 926:main.c        ****     now.Month = 9;
 927:main.c        ****     now.Year = 2018;
 928:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 929:main.c        **** 
 930:main.c        ****     while(true)
 931:main.c        ****     {
 932:main.c        ****         if(SW1_Read() == 0) {
 933:main.c        ****             // read the current time
 934:main.c        ****             RTC_DisableInt(); /* Disable Interrupt of RTC Component */
 935:main.c        ****             now = *RTC_ReadTime(); /* copy the current time to a local variable */
 936:main.c        ****             RTC_EnableInt(); /* Enable Interrupt of RTC Component */
 937:main.c        **** 
 938:main.c        ****             // print the current time
 939:main.c        ****             printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 940:main.c        ****             print_mqtt("Zumo006/time", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 941:main.c        ****             
 942:main.c        ****             // wait until button is released
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 18


 943:main.c        ****             while(SW1_Read() == 0) vTaskDelay(50);
 944:main.c        ****         }
 945:main.c        ****         vTaskDelay(50);
 946:main.c        ****     }
 947:main.c        ****  }   
 948:main.c        **** #endif
 949:main.c        **** 
 950:main.c        **** #if 1
 951:main.c        **** //main project
 952:main.c        **** void zmain(void)
 953:main.c        **** {
  28              		.loc 1 953 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 8AB0     		sub	sp, sp, #40
  37              		.cfi_def_cfa_offset 48
 954:main.c        ****     struct accData_ data;
 955:main.c        ****     
 956:main.c        ****     uint8_t button_;
 957:main.c        ****     printf("\nStart\n");
  38              		.loc 1 957 0
  39 0004 3F48     		ldr	r0, .L11
  40 0006 FFF7FEFF 		bl	puts
  41              	.LVL0:
  42              	.L2:
 958:main.c        ****     
 959:main.c        ****     while(true){
 960:main.c        ****         button_ = SW1_Read();
  43              		.loc 1 960 0
  44 000a FFF7FEFF 		bl	SW1_Read
  45              	.LVL1:
 961:main.c        ****         if(button_==0){
  46              		.loc 1 961 0
  47 000e 0028     		cmp	r0, #0
  48 0010 FBD1     		bne	.L2
  49              	.LBB2:
 962:main.c        ****             IR_Start();
  50              		.loc 1 962 0
  51 0012 FFF7FEFF 		bl	IR_Start
  52              	.LVL2:
 963:main.c        ****             printf("\n\nIR test\n");
  53              		.loc 1 963 0
  54 0016 3C48     		ldr	r0, .L11+4
  55 0018 FFF7FEFF 		bl	puts
  56              	.LVL3:
 964:main.c        ****             struct sensors_ ref;
 965:main.c        ****             struct sensors_ dig;
 966:main.c        ****             bool led = false,loop = true, startline= true;
 967:main.c        ****             int count =0;
 968:main.c        ****             motor_start();              // enable motor controller
  57              		.loc 1 968 0
  58 001c FFF7FEFF 		bl	motor_start
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 19


  59              	.LVL4:
 969:main.c        ****             print_mqtt("Zumo006/ready","line");
  60              		.loc 1 969 0
  61 0020 3A49     		ldr	r1, .L11+8
  62 0022 3B48     		ldr	r0, .L11+12
  63 0024 FFF7FEFF 		bl	print_mqtt
  64              	.LVL5:
 970:main.c        ****             IR_flush(); // clear IR receive buffer
  65              		.loc 1 970 0
  66 0028 FFF7FEFF 		bl	IR_flush
  67              	.LVL6:
 971:main.c        ****             printf("Buffer cleared\n");
  68              		.loc 1 971 0
  69 002c 3948     		ldr	r0, .L11+16
  70 002e FFF7FEFF 		bl	puts
  71              	.LVL7:
 972:main.c        ****             
 973:main.c        ****             reflectance_start();
  72              		.loc 1 973 0
  73 0032 FFF7FEFF 		bl	reflectance_start
  74              	.LVL8:
 974:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
  75              		.loc 1 974 0
  76 0036 42F22830 		movw	r0, #9000
  77 003a 0190     		str	r0, [sp, #4]
  78 003c 0090     		str	r0, [sp]
  79 003e 42F6F823 		movw	r3, #11000
  80 0042 1A46     		mov	r2, r3
  81 0044 0146     		mov	r1, r0
  82 0046 FFF7FEFF 		bl	reflectance_set_threshold
  83              	.LVL9:
 975:main.c        ****             vTaskDelay(200);
  84              		.loc 1 975 0
  85 004a C820     		movs	r0, #200
  86 004c FFF7FEFF 		bl	vTaskDelay
  87              	.LVL10:
 966:main.c        ****             int count =0;
  88              		.loc 1 966 0
  89 0050 0124     		movs	r4, #1
 976:main.c        ****                 while(startline){
  90              		.loc 1 976 0
  91 0052 1CE0     		b	.L3
  92              	.LVL11:
  93              	.L6:
 977:main.c        ****                     // read raw sensor values
 978:main.c        ****                     reflectance_read(&ref);
  94              		.loc 1 978 0
  95 0054 02A8     		add	r0, sp, #8
  96 0056 FFF7FEFF 		bl	reflectance_read
  97              	.LVL12:
 979:main.c        ****                     reflectance_digital(&dig); 
  98              		.loc 1 979 0
  99 005a 05A8     		add	r0, sp, #20
 100 005c FFF7FEFF 		bl	reflectance_digital
 101              	.LVL13:
 980:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 102              		.loc 1 980 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 20


 103 0060 BDF81430 		ldrh	r3, [sp, #20]
 104 0064 012B     		cmp	r3, #1
 105 0066 0DD0     		beq	.L4
 106              		.loc 1 980 0 is_stmt 0 discriminator 1
 107 0068 BDF81E30 		ldrh	r3, [sp, #30]
 108 006c 012B     		cmp	r3, #1
 109 006e 09D0     		beq	.L4
 981:main.c        ****                         motor_turn(50,50,50);       // motor forward
 110              		.loc 1 981 0 is_stmt 1
 111 0070 3222     		movs	r2, #50
 112 0072 1146     		mov	r1, r2
 113 0074 1046     		mov	r0, r2
 114 0076 FFF7FEFF 		bl	motor_turn
 115              	.LVL14:
 982:main.c        ****                         Beep(60,80);
 116              		.loc 1 982 0
 117 007a 5021     		movs	r1, #80
 118 007c 3C20     		movs	r0, #60
 119 007e FFF7FEFF 		bl	Beep
 120              	.LVL15:
 121 0082 04E0     		b	.L3
 122              	.L4:
 983:main.c        ****                     }
 984:main.c        ****                     else{
 985:main.c        ****                         motor_forward(0,0);       // Stop motors
 123              		.loc 1 985 0
 124 0084 0021     		movs	r1, #0
 125 0086 0846     		mov	r0, r1
 126 0088 FFF7FEFF 		bl	motor_forward
 127              	.LVL16:
 986:main.c        ****                         startline = false;
 128              		.loc 1 986 0
 129 008c 0024     		movs	r4, #0
 130              	.LVL17:
 131              	.L3:
 976:main.c        ****                     // read raw sensor values
 132              		.loc 1 976 0
 133 008e 002C     		cmp	r4, #0
 134 0090 E0D1     		bne	.L6
 987:main.c        ****                     }
 988:main.c        ****                 }
 989:main.c        ****             print_mqtt("Zumo006/ready","line");
 135              		.loc 1 989 0
 136 0092 1E49     		ldr	r1, .L11+8
 137 0094 1E48     		ldr	r0, .L11+12
 138 0096 FFF7FEFF 		bl	print_mqtt
 139              	.LVL18:
 990:main.c        ****             IR_wait();  // wait for IR command
 140              		.loc 1 990 0
 141 009a FFF7FEFF 		bl	IR_wait
 142              	.LVL19:
 991:main.c        ****             CySysTickEnable();
 143              		.loc 1 991 0
 144 009e FFF7FEFF 		bl	CySysTickEnable
 145              	.LVL20:
 992:main.c        ****             CySysTickStart();
 146              		.loc 1 992 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 21


 147 00a2 FFF7FEFF 		bl	CySysTickStart
 148              	.LVL21:
 993:main.c        ****             int start = CySysTickGetValue();
 149              		.loc 1 993 0
 150 00a6 FFF7FEFF 		bl	CySysTickGetValue
 151              	.LVL22:
 994:main.c        ****             print_mqtt("Zumo006/start","%d", start);
 152              		.loc 1 994 0
 153 00aa 0246     		mov	r2, r0
 154 00ac 1A49     		ldr	r1, .L11+20
 155 00ae 1B48     		ldr	r0, .L11+24
 156              	.LVL23:
 157 00b0 FFF7FEFF 		bl	print_mqtt
 158              	.LVL24:
 995:main.c        ****             led = !led;
 996:main.c        ****             BatteryLed_Write(led);   
 159              		.loc 1 996 0
 160 00b4 0120     		movs	r0, #1
 161 00b6 FFF7FEFF 		bl	BatteryLed_Write
 162              	.LVL25:
 997:main.c        ****             
 998:main.c        ****             // Toggle led when IR signal is received
 999:main.c        ****             while(loop)
 163              		.loc 1 999 0
 164 00ba 18E0     		b	.L7
 165              	.L9:
1000:main.c        ****             {   
1001:main.c        ****                 if(led){
1002:main.c        ****                     // read raw sensor values
1003:main.c        ****                     reflectance_read(&ref);
1004:main.c        ****                     reflectance_digital(&dig); 
1005:main.c        **** 
1006:main.c        ****                     LSM303D_Read_Acc(&data);
1007:main.c        ****                     do{
1008:main.c        ****                         motor_turn(50,50,0);
 166              		.loc 1 1008 0
 167 00bc 0022     		movs	r2, #0
 168 00be 3221     		movs	r1, #50
 169 00c0 0846     		mov	r0, r1
 170 00c2 FFF7FEFF 		bl	motor_turn
 171              	.LVL26:
1009:main.c        ****                         if(data.accX<-4000){
 172              		.loc 1 1009 0
 173 00c6 BDF92030 		ldrsh	r3, [sp, #32]
 174 00ca 13F57A6F 		cmn	r3, #4000
 175 00ce 06DA     		bge	.L8
1010:main.c        ****                             print_mqtt("Zumo006/hit","%d", CySysTickGetValue());
 176              		.loc 1 1010 0
 177 00d0 FFF7FEFF 		bl	CySysTickGetValue
 178              	.LVL27:
 179 00d4 0246     		mov	r2, r0
 180 00d6 1049     		ldr	r1, .L11+20
 181 00d8 1148     		ldr	r0, .L11+28
 182 00da FFF7FEFF 		bl	print_mqtt
 183              	.LVL28:
 184              	.L8:
1011:main.c        ****                         }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 22


1012:main.c        ****                         
1013:main.c        ****                     }while(dig.l3 != 1 && dig.r3 != 1);
 185              		.loc 1 1013 0
 186 00de BDF81430 		ldrh	r3, [sp, #20]
 187 00e2 012B     		cmp	r3, #1
 188 00e4 03D0     		beq	.L7
 189              		.loc 1 1013 0 is_stmt 0 discriminator 1
 190 00e6 BDF81E30 		ldrh	r3, [sp, #30]
 191 00ea 012B     		cmp	r3, #1
 192 00ec E6D1     		bne	.L9
 193              	.L7:
1003:main.c        ****                     reflectance_digital(&dig); 
 194              		.loc 1 1003 0 is_stmt 1
 195 00ee 02A8     		add	r0, sp, #8
 196 00f0 FFF7FEFF 		bl	reflectance_read
 197              	.LVL29:
1004:main.c        **** 
 198              		.loc 1 1004 0
 199 00f4 05A8     		add	r0, sp, #20
 200 00f6 FFF7FEFF 		bl	reflectance_digital
 201              	.LVL30:
1006:main.c        ****                     do{
 202              		.loc 1 1006 0
 203 00fa 08A8     		add	r0, sp, #32
 204 00fc FFF7FEFF 		bl	LSM303D_Read_Acc
 205              	.LVL31:
 206 0100 DCE7     		b	.L9
 207              	.L12:
 208 0102 00BF     		.align	2
 209              	.L11:
 210 0104 00000000 		.word	.LC0
 211 0108 08000000 		.word	.LC1
 212 010c 14000000 		.word	.LC2
 213 0110 1C000000 		.word	.LC3
 214 0114 2C000000 		.word	.LC4
 215 0118 3C000000 		.word	.LC5
 216 011c 40000000 		.word	.LC6
 217 0120 50000000 		.word	.LC7
 218              	.LBE2:
 219              		.cfi_endproc
 220              	.LFE85:
 221              		.size	zmain, .-zmain
 222              		.section	.rodata.str1.4,"aMS",%progbits,1
 223              		.align	2
 224              	.LC0:
 225 0000 0A537461 		.ascii	"\012Start\000"
 225      727400
 226 0007 00       		.space	1
 227              	.LC1:
 228 0008 0A0A4952 		.ascii	"\012\012IR test\000"
 228      20746573 
 228      7400
 229 0012 0000     		.space	2
 230              	.LC2:
 231 0014 6C696E65 		.ascii	"line\000"
 231      00
 232 0019 000000   		.space	3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 23


 233              	.LC3:
 234 001c 5A756D6F 		.ascii	"Zumo006/ready\000"
 234      3030362F 
 234      72656164 
 234      7900
 235 002a 0000     		.space	2
 236              	.LC4:
 237 002c 42756666 		.ascii	"Buffer cleared\000"
 237      65722063 
 237      6C656172 
 237      656400
 238 003b 00       		.space	1
 239              	.LC5:
 240 003c 256400   		.ascii	"%d\000"
 241 003f 00       		.space	1
 242              	.LC6:
 243 0040 5A756D6F 		.ascii	"Zumo006/start\000"
 243      3030362F 
 243      73746172 
 243      7400
 244 004e 0000     		.space	2
 245              	.LC7:
 246 0050 5A756D6F 		.ascii	"Zumo006/hit\000"
 246      3030362F 
 246      68697400 
 247              		.text
 248              	.Letext0:
 249              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 250              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 251              		.file 4 ".\\ZumoLibrary/Reflectance.h"
 252              		.file 5 ".\\ZumoLibrary/LSM303D.h"
 253              		.file 6 ".\\ZumoLibrary/IR.h"
 254              		.file 7 ".\\ZumoLibrary/Motor.h"
 255              		.file 8 ".\\ZumoLibrary/mqtt_sender.h"
 256              		.file 9 "..\\FreeRTOS\\Source\\include/task.h"
 257              		.file 10 ".\\ZumoLibrary/Beep.h"
 258              		.file 11 "Generated_Source\\PSoC5/CyLib.h"
 259              		.file 12 "Generated_Source\\PSoC5/BatteryLed.h"
 260              		.file 13 "Generated_Source\\PSoC5/SW1.h"
 261              		.file 14 "Generated_Source\\PSoC5/core_cm3.h"
 262              		.file 15 "<built-in>"
 263              		.section	.debug_info,"",%progbits
 264              	.Ldebug_info0:
 265 0000 65050000 		.4byte	0x565
 266 0004 0400     		.2byte	0x4
 267 0006 00000000 		.4byte	.Ldebug_abbrev0
 268 000a 04       		.byte	0x4
 269 000b 01       		.uleb128 0x1
 270 000c C7020000 		.4byte	.LASF53
 271 0010 0C       		.byte	0xc
 272 0011 38020000 		.4byte	.LASF54
 273 0015 42000000 		.4byte	.LASF55
 274 0019 00000000 		.4byte	.Ldebug_ranges0+0
 275 001d 00000000 		.4byte	0
 276 0021 00000000 		.4byte	.Ldebug_line0
 277 0025 02       		.uleb128 0x2
 278 0026 01       		.byte	0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 24


 279 0027 06       		.byte	0x6
 280 0028 7A010000 		.4byte	.LASF0
 281 002c 03       		.uleb128 0x3
 282 002d 1A010000 		.4byte	.LASF2
 283 0031 02       		.byte	0x2
 284 0032 1D       		.byte	0x1d
 285 0033 37000000 		.4byte	0x37
 286 0037 02       		.uleb128 0x2
 287 0038 01       		.byte	0x1
 288 0039 08       		.byte	0x8
 289 003a 52010000 		.4byte	.LASF1
 290 003e 03       		.uleb128 0x3
 291 003f 9C020000 		.4byte	.LASF3
 292 0043 02       		.byte	0x2
 293 0044 29       		.byte	0x29
 294 0045 49000000 		.4byte	0x49
 295 0049 02       		.uleb128 0x2
 296 004a 02       		.byte	0x2
 297 004b 05       		.byte	0x5
 298 004c 15000000 		.4byte	.LASF4
 299 0050 03       		.uleb128 0x3
 300 0051 37000000 		.4byte	.LASF5
 301 0055 02       		.byte	0x2
 302 0056 2B       		.byte	0x2b
 303 0057 5B000000 		.4byte	0x5b
 304 005b 02       		.uleb128 0x2
 305 005c 02       		.byte	0x2
 306 005d 07       		.byte	0x7
 307 005e E3010000 		.4byte	.LASF6
 308 0062 03       		.uleb128 0x3
 309 0063 81020000 		.4byte	.LASF7
 310 0067 02       		.byte	0x2
 311 0068 3F       		.byte	0x3f
 312 0069 6D000000 		.4byte	0x6d
 313 006d 02       		.uleb128 0x2
 314 006e 04       		.byte	0x4
 315 006f 05       		.byte	0x5
 316 0070 F6000000 		.4byte	.LASF8
 317 0074 02       		.uleb128 0x2
 318 0075 04       		.byte	0x4
 319 0076 07       		.byte	0x7
 320 0077 3F020000 		.4byte	.LASF9
 321 007b 02       		.uleb128 0x2
 322 007c 08       		.byte	0x8
 323 007d 05       		.byte	0x5
 324 007e D4000000 		.4byte	.LASF10
 325 0082 02       		.uleb128 0x2
 326 0083 08       		.byte	0x8
 327 0084 07       		.byte	0x7
 328 0085 97010000 		.4byte	.LASF11
 329 0089 04       		.uleb128 0x4
 330 008a 04       		.byte	0x4
 331 008b 05       		.byte	0x5
 332 008c 696E7400 		.ascii	"int\000"
 333 0090 02       		.uleb128 0x2
 334 0091 04       		.byte	0x4
 335 0092 07       		.byte	0x7
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 25


 336 0093 C2010000 		.4byte	.LASF12
 337 0097 03       		.uleb128 0x3
 338 0098 99000000 		.4byte	.LASF13
 339 009c 03       		.byte	0x3
 340 009d 18       		.byte	0x18
 341 009e 2C000000 		.4byte	0x2c
 342 00a2 03       		.uleb128 0x3
 343 00a3 11020000 		.4byte	.LASF14
 344 00a7 03       		.byte	0x3
 345 00a8 20       		.byte	0x20
 346 00a9 3E000000 		.4byte	0x3e
 347 00ad 03       		.uleb128 0x3
 348 00ae CF010000 		.4byte	.LASF15
 349 00b2 03       		.byte	0x3
 350 00b3 24       		.byte	0x24
 351 00b4 50000000 		.4byte	0x50
 352 00b8 03       		.uleb128 0x3
 353 00b9 09020000 		.4byte	.LASF16
 354 00bd 03       		.byte	0x3
 355 00be 2C       		.byte	0x2c
 356 00bf 62000000 		.4byte	0x62
 357 00c3 02       		.uleb128 0x2
 358 00c4 04       		.byte	0x4
 359 00c5 04       		.byte	0x4
 360 00c6 CE000000 		.4byte	.LASF17
 361 00ca 02       		.uleb128 0x2
 362 00cb 08       		.byte	0x8
 363 00cc 04       		.byte	0x4
 364 00cd 51020000 		.4byte	.LASF18
 365 00d1 02       		.uleb128 0x2
 366 00d2 01       		.byte	0x1
 367 00d3 08       		.byte	0x8
 368 00d4 04020000 		.4byte	.LASF19
 369 00d8 02       		.uleb128 0x2
 370 00d9 08       		.byte	0x8
 371 00da 04       		.byte	0x4
 372 00db 2D010000 		.4byte	.LASF20
 373 00df 02       		.uleb128 0x2
 374 00e0 04       		.byte	0x4
 375 00e1 07       		.byte	0x7
 376 00e2 1F000000 		.4byte	.LASF21
 377 00e6 05       		.uleb128 0x5
 378 00e7 90000000 		.4byte	.LASF22
 379 00eb 0C       		.byte	0xc
 380 00ec 04       		.byte	0x4
 381 00ed 0E       		.byte	0xe
 382 00ee 35010000 		.4byte	0x135
 383 00f2 06       		.uleb128 0x6
 384 00f3 6C3300   		.ascii	"l3\000"
 385 00f6 04       		.byte	0x4
 386 00f7 0F       		.byte	0xf
 387 00f8 AD000000 		.4byte	0xad
 388 00fc 00       		.byte	0
 389 00fd 06       		.uleb128 0x6
 390 00fe 6C3200   		.ascii	"l2\000"
 391 0101 04       		.byte	0x4
 392 0102 10       		.byte	0x10
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 26


 393 0103 AD000000 		.4byte	0xad
 394 0107 02       		.byte	0x2
 395 0108 06       		.uleb128 0x6
 396 0109 6C3100   		.ascii	"l1\000"
 397 010c 04       		.byte	0x4
 398 010d 11       		.byte	0x11
 399 010e AD000000 		.4byte	0xad
 400 0112 04       		.byte	0x4
 401 0113 06       		.uleb128 0x6
 402 0114 723100   		.ascii	"r1\000"
 403 0117 04       		.byte	0x4
 404 0118 12       		.byte	0x12
 405 0119 AD000000 		.4byte	0xad
 406 011d 06       		.byte	0x6
 407 011e 06       		.uleb128 0x6
 408 011f 723200   		.ascii	"r2\000"
 409 0122 04       		.byte	0x4
 410 0123 13       		.byte	0x13
 411 0124 AD000000 		.4byte	0xad
 412 0128 08       		.byte	0x8
 413 0129 06       		.uleb128 0x6
 414 012a 723300   		.ascii	"r3\000"
 415 012d 04       		.byte	0x4
 416 012e 14       		.byte	0x14
 417 012f AD000000 		.4byte	0xad
 418 0133 0A       		.byte	0xa
 419 0134 00       		.byte	0
 420 0135 05       		.uleb128 0x5
 421 0136 11010000 		.4byte	.LASF23
 422 013a 06       		.byte	0x6
 423 013b 05       		.byte	0x5
 424 013c 47       		.byte	0x47
 425 013d 66010000 		.4byte	0x166
 426 0141 07       		.uleb128 0x7
 427 0142 28000000 		.4byte	.LASF24
 428 0146 05       		.byte	0x5
 429 0147 49       		.byte	0x49
 430 0148 A2000000 		.4byte	0xa2
 431 014c 00       		.byte	0
 432 014d 07       		.uleb128 0x7
 433 014e 2D000000 		.4byte	.LASF25
 434 0152 05       		.byte	0x5
 435 0153 4A       		.byte	0x4a
 436 0154 A2000000 		.4byte	0xa2
 437 0158 02       		.byte	0x2
 438 0159 07       		.uleb128 0x7
 439 015a 32000000 		.4byte	.LASF26
 440 015e 05       		.byte	0x5
 441 015f 4B       		.byte	0x4b
 442 0160 A2000000 		.4byte	0xa2
 443 0164 04       		.byte	0x4
 444 0165 00       		.byte	0
 445 0166 08       		.uleb128 0x8
 446 0167 7B020000 		.4byte	.LASF56
 447 016b 01       		.byte	0x1
 448 016c B803     		.2byte	0x3b8
 449 016e 00000000 		.4byte	.LFB85
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 27


 450 0172 24010000 		.4byte	.LFE85-.LFB85
 451 0176 01       		.uleb128 0x1
 452 0177 9C       		.byte	0x9c
 453 0178 6F040000 		.4byte	0x46f
 454 017c 09       		.uleb128 0x9
 455 017d 2A020000 		.4byte	.LASF27
 456 0181 01       		.byte	0x1
 457 0182 BA03     		.2byte	0x3ba
 458 0184 35010000 		.4byte	0x135
 459 0188 02       		.uleb128 0x2
 460 0189 91       		.byte	0x91
 461 018a 70       		.sleb128 -16
 462 018b 0A       		.uleb128 0xa
 463 018c 73020000 		.4byte	.LASF28
 464 0190 01       		.byte	0x1
 465 0191 BC03     		.2byte	0x3bc
 466 0193 97000000 		.4byte	0x97
 467 0197 00000000 		.4byte	.LLST0
 468 019b 0B       		.uleb128 0xb
 469 019c 12000000 		.4byte	.LBB2
 470 01a0 12010000 		.4byte	.LBE2-.LBB2
 471 01a4 4E040000 		.4byte	0x44e
 472 01a8 0C       		.uleb128 0xc
 473 01a9 72656600 		.ascii	"ref\000"
 474 01ad 01       		.byte	0x1
 475 01ae C403     		.2byte	0x3c4
 476 01b0 E6000000 		.4byte	0xe6
 477 01b4 02       		.uleb128 0x2
 478 01b5 91       		.byte	0x91
 479 01b6 58       		.sleb128 -40
 480 01b7 0C       		.uleb128 0xc
 481 01b8 64696700 		.ascii	"dig\000"
 482 01bc 01       		.byte	0x1
 483 01bd C503     		.2byte	0x3c5
 484 01bf E6000000 		.4byte	0xe6
 485 01c3 02       		.uleb128 0x2
 486 01c4 91       		.byte	0x91
 487 01c5 64       		.sleb128 -28
 488 01c6 0D       		.uleb128 0xd
 489 01c7 6C656400 		.ascii	"led\000"
 490 01cb 01       		.byte	0x1
 491 01cc C603     		.2byte	0x3c6
 492 01ce 6F040000 		.4byte	0x46f
 493 01d2 13000000 		.4byte	.LLST1
 494 01d6 0E       		.uleb128 0xe
 495 01d7 B5020000 		.4byte	.LASF29
 496 01db 01       		.byte	0x1
 497 01dc C603     		.2byte	0x3c6
 498 01de 6F040000 		.4byte	0x46f
 499 01e2 01       		.byte	0x1
 500 01e3 0A       		.uleb128 0xa
 501 01e4 A1000000 		.4byte	.LASF30
 502 01e8 01       		.byte	0x1
 503 01e9 C603     		.2byte	0x3c6
 504 01eb 6F040000 		.4byte	0x46f
 505 01ef 33000000 		.4byte	.LLST2
 506 01f3 0E       		.uleb128 0xe
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 28


 507 01f4 B6000000 		.4byte	.LASF31
 508 01f8 01       		.byte	0x1
 509 01f9 C703     		.2byte	0x3c7
 510 01fb 89000000 		.4byte	0x89
 511 01ff 00       		.byte	0
 512 0200 0A       		.uleb128 0xa
 513 0201 DD010000 		.4byte	.LASF32
 514 0205 01       		.byte	0x1
 515 0206 E103     		.2byte	0x3e1
 516 0208 89000000 		.4byte	0x89
 517 020c 69000000 		.4byte	.LLST3
 518 0210 0F       		.uleb128 0xf
 519 0211 656E6400 		.ascii	"end\000"
 520 0215 01       		.byte	0x1
 521 0216 FB03     		.2byte	0x3fb
 522 0218 89000000 		.4byte	0x89
 523 021c 10       		.uleb128 0x10
 524 021d 16000000 		.4byte	.LVL2
 525 0221 87040000 		.4byte	0x487
 526 0225 11       		.uleb128 0x11
 527 0226 1C000000 		.4byte	.LVL3
 528 022a 92040000 		.4byte	0x492
 529 022e 3C020000 		.4byte	0x23c
 530 0232 12       		.uleb128 0x12
 531 0233 01       		.uleb128 0x1
 532 0234 50       		.byte	0x50
 533 0235 05       		.uleb128 0x5
 534 0236 03       		.byte	0x3
 535 0237 08000000 		.4byte	.LC1
 536 023b 00       		.byte	0
 537 023c 10       		.uleb128 0x10
 538 023d 20000000 		.4byte	.LVL4
 539 0241 A1040000 		.4byte	0x4a1
 540 0245 11       		.uleb128 0x11
 541 0246 28000000 		.4byte	.LVL5
 542 024a AC040000 		.4byte	0x4ac
 543 024e 65020000 		.4byte	0x265
 544 0252 12       		.uleb128 0x12
 545 0253 01       		.uleb128 0x1
 546 0254 50       		.byte	0x50
 547 0255 05       		.uleb128 0x5
 548 0256 03       		.byte	0x3
 549 0257 1C000000 		.4byte	.LC3
 550 025b 12       		.uleb128 0x12
 551 025c 01       		.uleb128 0x1
 552 025d 51       		.byte	0x51
 553 025e 05       		.uleb128 0x5
 554 025f 03       		.byte	0x3
 555 0260 14000000 		.4byte	.LC2
 556 0264 00       		.byte	0
 557 0265 10       		.uleb128 0x10
 558 0266 2C000000 		.4byte	.LVL6
 559 026a B7040000 		.4byte	0x4b7
 560 026e 11       		.uleb128 0x11
 561 026f 32000000 		.4byte	.LVL7
 562 0273 92040000 		.4byte	0x492
 563 0277 85020000 		.4byte	0x285
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 29


 564 027b 12       		.uleb128 0x12
 565 027c 01       		.uleb128 0x1
 566 027d 50       		.byte	0x50
 567 027e 05       		.uleb128 0x5
 568 027f 03       		.byte	0x3
 569 0280 2C000000 		.4byte	.LC4
 570 0284 00       		.byte	0
 571 0285 10       		.uleb128 0x10
 572 0286 36000000 		.4byte	.LVL8
 573 028a C2040000 		.4byte	0x4c2
 574 028e 11       		.uleb128 0x11
 575 028f 4A000000 		.4byte	.LVL9
 576 0293 CD040000 		.4byte	0x4cd
 577 0297 C8020000 		.4byte	0x2c8
 578 029b 12       		.uleb128 0x12
 579 029c 01       		.uleb128 0x1
 580 029d 50       		.byte	0x50
 581 029e 03       		.uleb128 0x3
 582 029f 0A       		.byte	0xa
 583 02a0 2823     		.2byte	0x2328
 584 02a2 12       		.uleb128 0x12
 585 02a3 01       		.uleb128 0x1
 586 02a4 51       		.byte	0x51
 587 02a5 03       		.uleb128 0x3
 588 02a6 0A       		.byte	0xa
 589 02a7 2823     		.2byte	0x2328
 590 02a9 12       		.uleb128 0x12
 591 02aa 01       		.uleb128 0x1
 592 02ab 52       		.byte	0x52
 593 02ac 03       		.uleb128 0x3
 594 02ad 0A       		.byte	0xa
 595 02ae F82A     		.2byte	0x2af8
 596 02b0 12       		.uleb128 0x12
 597 02b1 01       		.uleb128 0x1
 598 02b2 53       		.byte	0x53
 599 02b3 03       		.uleb128 0x3
 600 02b4 0A       		.byte	0xa
 601 02b5 F82A     		.2byte	0x2af8
 602 02b7 12       		.uleb128 0x12
 603 02b8 02       		.uleb128 0x2
 604 02b9 7D       		.byte	0x7d
 605 02ba 00       		.sleb128 0
 606 02bb 03       		.uleb128 0x3
 607 02bc 0A       		.byte	0xa
 608 02bd 2823     		.2byte	0x2328
 609 02bf 12       		.uleb128 0x12
 610 02c0 02       		.uleb128 0x2
 611 02c1 7D       		.byte	0x7d
 612 02c2 04       		.sleb128 4
 613 02c3 03       		.uleb128 0x3
 614 02c4 0A       		.byte	0xa
 615 02c5 2823     		.2byte	0x2328
 616 02c7 00       		.byte	0
 617 02c8 11       		.uleb128 0x11
 618 02c9 50000000 		.4byte	.LVL10
 619 02cd D8040000 		.4byte	0x4d8
 620 02d1 DC020000 		.4byte	0x2dc
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 30


 621 02d5 12       		.uleb128 0x12
 622 02d6 01       		.uleb128 0x1
 623 02d7 50       		.byte	0x50
 624 02d8 02       		.uleb128 0x2
 625 02d9 08       		.byte	0x8
 626 02da C8       		.byte	0xc8
 627 02db 00       		.byte	0
 628 02dc 11       		.uleb128 0x11
 629 02dd 5A000000 		.4byte	.LVL12
 630 02e1 E4040000 		.4byte	0x4e4
 631 02e5 F0020000 		.4byte	0x2f0
 632 02e9 12       		.uleb128 0x12
 633 02ea 01       		.uleb128 0x1
 634 02eb 50       		.byte	0x50
 635 02ec 02       		.uleb128 0x2
 636 02ed 91       		.byte	0x91
 637 02ee 58       		.sleb128 -40
 638 02ef 00       		.byte	0
 639 02f0 11       		.uleb128 0x11
 640 02f1 60000000 		.4byte	.LVL13
 641 02f5 EF040000 		.4byte	0x4ef
 642 02f9 04030000 		.4byte	0x304
 643 02fd 12       		.uleb128 0x12
 644 02fe 01       		.uleb128 0x1
 645 02ff 50       		.byte	0x50
 646 0300 02       		.uleb128 0x2
 647 0301 91       		.byte	0x91
 648 0302 64       		.sleb128 -28
 649 0303 00       		.byte	0
 650 0304 11       		.uleb128 0x11
 651 0305 7A000000 		.4byte	.LVL14
 652 0309 FA040000 		.4byte	0x4fa
 653 030d 24030000 		.4byte	0x324
 654 0311 12       		.uleb128 0x12
 655 0312 01       		.uleb128 0x1
 656 0313 50       		.byte	0x50
 657 0314 02       		.uleb128 0x2
 658 0315 08       		.byte	0x8
 659 0316 32       		.byte	0x32
 660 0317 12       		.uleb128 0x12
 661 0318 01       		.uleb128 0x1
 662 0319 51       		.byte	0x51
 663 031a 02       		.uleb128 0x2
 664 031b 08       		.byte	0x8
 665 031c 32       		.byte	0x32
 666 031d 12       		.uleb128 0x12
 667 031e 01       		.uleb128 0x1
 668 031f 52       		.byte	0x52
 669 0320 02       		.uleb128 0x2
 670 0321 08       		.byte	0x8
 671 0322 32       		.byte	0x32
 672 0323 00       		.byte	0
 673 0324 11       		.uleb128 0x11
 674 0325 82000000 		.4byte	.LVL15
 675 0329 05050000 		.4byte	0x505
 676 032d 3E030000 		.4byte	0x33e
 677 0331 12       		.uleb128 0x12
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 31


 678 0332 01       		.uleb128 0x1
 679 0333 50       		.byte	0x50
 680 0334 02       		.uleb128 0x2
 681 0335 08       		.byte	0x8
 682 0336 3C       		.byte	0x3c
 683 0337 12       		.uleb128 0x12
 684 0338 01       		.uleb128 0x1
 685 0339 51       		.byte	0x51
 686 033a 02       		.uleb128 0x2
 687 033b 08       		.byte	0x8
 688 033c 50       		.byte	0x50
 689 033d 00       		.byte	0
 690 033e 11       		.uleb128 0x11
 691 033f 8C000000 		.4byte	.LVL16
 692 0343 10050000 		.4byte	0x510
 693 0347 56030000 		.4byte	0x356
 694 034b 12       		.uleb128 0x12
 695 034c 01       		.uleb128 0x1
 696 034d 50       		.byte	0x50
 697 034e 01       		.uleb128 0x1
 698 034f 30       		.byte	0x30
 699 0350 12       		.uleb128 0x12
 700 0351 01       		.uleb128 0x1
 701 0352 51       		.byte	0x51
 702 0353 01       		.uleb128 0x1
 703 0354 30       		.byte	0x30
 704 0355 00       		.byte	0
 705 0356 11       		.uleb128 0x11
 706 0357 9A000000 		.4byte	.LVL18
 707 035b AC040000 		.4byte	0x4ac
 708 035f 76030000 		.4byte	0x376
 709 0363 12       		.uleb128 0x12
 710 0364 01       		.uleb128 0x1
 711 0365 50       		.byte	0x50
 712 0366 05       		.uleb128 0x5
 713 0367 03       		.byte	0x3
 714 0368 1C000000 		.4byte	.LC3
 715 036c 12       		.uleb128 0x12
 716 036d 01       		.uleb128 0x1
 717 036e 51       		.byte	0x51
 718 036f 05       		.uleb128 0x5
 719 0370 03       		.byte	0x3
 720 0371 14000000 		.4byte	.LC2
 721 0375 00       		.byte	0
 722 0376 10       		.uleb128 0x10
 723 0377 9E000000 		.4byte	.LVL19
 724 037b 1B050000 		.4byte	0x51b
 725 037f 10       		.uleb128 0x10
 726 0380 A2000000 		.4byte	.LVL20
 727 0384 26050000 		.4byte	0x526
 728 0388 10       		.uleb128 0x10
 729 0389 A6000000 		.4byte	.LVL21
 730 038d 31050000 		.4byte	0x531
 731 0391 10       		.uleb128 0x10
 732 0392 AA000000 		.4byte	.LVL22
 733 0396 3C050000 		.4byte	0x53c
 734 039a 11       		.uleb128 0x11
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 32


 735 039b B4000000 		.4byte	.LVL24
 736 039f AC040000 		.4byte	0x4ac
 737 03a3 BA030000 		.4byte	0x3ba
 738 03a7 12       		.uleb128 0x12
 739 03a8 01       		.uleb128 0x1
 740 03a9 50       		.byte	0x50
 741 03aa 05       		.uleb128 0x5
 742 03ab 03       		.byte	0x3
 743 03ac 40000000 		.4byte	.LC6
 744 03b0 12       		.uleb128 0x12
 745 03b1 01       		.uleb128 0x1
 746 03b2 51       		.byte	0x51
 747 03b3 05       		.uleb128 0x5
 748 03b4 03       		.byte	0x3
 749 03b5 3C000000 		.4byte	.LC5
 750 03b9 00       		.byte	0
 751 03ba 11       		.uleb128 0x11
 752 03bb BA000000 		.4byte	.LVL25
 753 03bf 47050000 		.4byte	0x547
 754 03c3 CD030000 		.4byte	0x3cd
 755 03c7 12       		.uleb128 0x12
 756 03c8 01       		.uleb128 0x1
 757 03c9 50       		.byte	0x50
 758 03ca 01       		.uleb128 0x1
 759 03cb 31       		.byte	0x31
 760 03cc 00       		.byte	0
 761 03cd 11       		.uleb128 0x11
 762 03ce C6000000 		.4byte	.LVL26
 763 03d2 FA040000 		.4byte	0x4fa
 764 03d6 EC030000 		.4byte	0x3ec
 765 03da 12       		.uleb128 0x12
 766 03db 01       		.uleb128 0x1
 767 03dc 50       		.byte	0x50
 768 03dd 02       		.uleb128 0x2
 769 03de 08       		.byte	0x8
 770 03df 32       		.byte	0x32
 771 03e0 12       		.uleb128 0x12
 772 03e1 01       		.uleb128 0x1
 773 03e2 51       		.byte	0x51
 774 03e3 02       		.uleb128 0x2
 775 03e4 08       		.byte	0x8
 776 03e5 32       		.byte	0x32
 777 03e6 12       		.uleb128 0x12
 778 03e7 01       		.uleb128 0x1
 779 03e8 52       		.byte	0x52
 780 03e9 01       		.uleb128 0x1
 781 03ea 30       		.byte	0x30
 782 03eb 00       		.byte	0
 783 03ec 10       		.uleb128 0x10
 784 03ed D4000000 		.4byte	.LVL27
 785 03f1 3C050000 		.4byte	0x53c
 786 03f5 11       		.uleb128 0x11
 787 03f6 DE000000 		.4byte	.LVL28
 788 03fa AC040000 		.4byte	0x4ac
 789 03fe 15040000 		.4byte	0x415
 790 0402 12       		.uleb128 0x12
 791 0403 01       		.uleb128 0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 33


 792 0404 50       		.byte	0x50
 793 0405 05       		.uleb128 0x5
 794 0406 03       		.byte	0x3
 795 0407 50000000 		.4byte	.LC7
 796 040b 12       		.uleb128 0x12
 797 040c 01       		.uleb128 0x1
 798 040d 51       		.byte	0x51
 799 040e 05       		.uleb128 0x5
 800 040f 03       		.byte	0x3
 801 0410 3C000000 		.4byte	.LC5
 802 0414 00       		.byte	0
 803 0415 11       		.uleb128 0x11
 804 0416 F4000000 		.4byte	.LVL29
 805 041a E4040000 		.4byte	0x4e4
 806 041e 29040000 		.4byte	0x429
 807 0422 12       		.uleb128 0x12
 808 0423 01       		.uleb128 0x1
 809 0424 50       		.byte	0x50
 810 0425 02       		.uleb128 0x2
 811 0426 91       		.byte	0x91
 812 0427 58       		.sleb128 -40
 813 0428 00       		.byte	0
 814 0429 11       		.uleb128 0x11
 815 042a FA000000 		.4byte	.LVL30
 816 042e EF040000 		.4byte	0x4ef
 817 0432 3D040000 		.4byte	0x43d
 818 0436 12       		.uleb128 0x12
 819 0437 01       		.uleb128 0x1
 820 0438 50       		.byte	0x50
 821 0439 02       		.uleb128 0x2
 822 043a 91       		.byte	0x91
 823 043b 64       		.sleb128 -28
 824 043c 00       		.byte	0
 825 043d 13       		.uleb128 0x13
 826 043e 00010000 		.4byte	.LVL31
 827 0442 52050000 		.4byte	0x552
 828 0446 12       		.uleb128 0x12
 829 0447 01       		.uleb128 0x1
 830 0448 50       		.byte	0x50
 831 0449 02       		.uleb128 0x2
 832 044a 91       		.byte	0x91
 833 044b 70       		.sleb128 -16
 834 044c 00       		.byte	0
 835 044d 00       		.byte	0
 836 044e 11       		.uleb128 0x11
 837 044f 0A000000 		.4byte	.LVL0
 838 0453 92040000 		.4byte	0x492
 839 0457 65040000 		.4byte	0x465
 840 045b 12       		.uleb128 0x12
 841 045c 01       		.uleb128 0x1
 842 045d 50       		.byte	0x50
 843 045e 05       		.uleb128 0x5
 844 045f 03       		.byte	0x3
 845 0460 00000000 		.4byte	.LC0
 846 0464 00       		.byte	0
 847 0465 10       		.uleb128 0x10
 848 0466 0E000000 		.4byte	.LVL1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 34


 849 046a 5D050000 		.4byte	0x55d
 850 046e 00       		.byte	0
 851 046f 02       		.uleb128 0x2
 852 0470 01       		.byte	0x1
 853 0471 02       		.byte	0x2
 854 0472 19020000 		.4byte	.LASF33
 855 0476 14       		.uleb128 0x14
 856 0477 BA020000 		.4byte	.LASF57
 857 047b 0E       		.byte	0xe
 858 047c 1207     		.2byte	0x712
 859 047e 82040000 		.4byte	0x482
 860 0482 15       		.uleb128 0x15
 861 0483 B8000000 		.4byte	0xb8
 862 0487 16       		.uleb128 0x16
 863 0488 24010000 		.4byte	.LASF34
 864 048c 24010000 		.4byte	.LASF34
 865 0490 06       		.byte	0x6
 866 0491 11       		.byte	0x11
 867 0492 17       		.uleb128 0x17
 868 0493 D8010000 		.4byte	.LASF58
 869 0497 64020000 		.4byte	.LASF59
 870 049b 0F       		.byte	0xf
 871 049c 00       		.byte	0
 872 049d D8010000 		.4byte	.LASF58
 873 04a1 16       		.uleb128 0x16
 874 04a2 58020000 		.4byte	.LASF35
 875 04a6 58020000 		.4byte	.LASF35
 876 04aa 07       		.byte	0x7
 877 04ab 0B       		.byte	0xb
 878 04ac 16       		.uleb128 0x16
 879 04ad 1F020000 		.4byte	.LASF36
 880 04b1 1F020000 		.4byte	.LASF36
 881 04b5 08       		.byte	0x8
 882 04b6 07       		.byte	0x7
 883 04b7 16       		.uleb128 0x16
 884 04b8 B9010000 		.4byte	.LASF37
 885 04bc B9010000 		.4byte	.LASF37
 886 04c0 06       		.byte	0x6
 887 04c1 18       		.byte	0x18
 888 04c2 16       		.uleb128 0x16
 889 04c3 BC000000 		.4byte	.LASF38
 890 04c7 BC000000 		.4byte	.LASF38
 891 04cb 04       		.byte	0x4
 892 04cc 17       		.byte	0x17
 893 04cd 16       		.uleb128 0x16
 894 04ce 60010000 		.4byte	.LASF39
 895 04d2 60010000 		.4byte	.LASF39
 896 04d6 04       		.byte	0x4
 897 04d7 1A       		.byte	0x1a
 898 04d8 18       		.uleb128 0x18
 899 04d9 AE010000 		.4byte	.LASF40
 900 04dd AE010000 		.4byte	.LASF40
 901 04e1 09       		.byte	0x9
 902 04e2 ED02     		.2byte	0x2ed
 903 04e4 16       		.uleb128 0x16
 904 04e5 8B020000 		.4byte	.LASF41
 905 04e9 8B020000 		.4byte	.LASF41
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 35


 906 04ed 04       		.byte	0x4
 907 04ee 18       		.byte	0x18
 908 04ef 16       		.uleb128 0x16
 909 04f0 E2000000 		.4byte	.LASF42
 910 04f4 E2000000 		.4byte	.LASF42
 911 04f8 04       		.byte	0x4
 912 04f9 19       		.byte	0x19
 913 04fa 16       		.uleb128 0x16
 914 04fb AB000000 		.4byte	.LASF43
 915 04ff AB000000 		.4byte	.LASF43
 916 0503 07       		.byte	0x7
 917 0504 12       		.byte	0x12
 918 0505 16       		.uleb128 0x16
 919 0506 00000000 		.4byte	.LASF44
 920 050a 00000000 		.4byte	.LASF44
 921 050e 0A       		.byte	0xa
 922 050f 05       		.byte	0x5
 923 0510 16       		.uleb128 0x16
 924 0511 F6010000 		.4byte	.LASF45
 925 0515 F6010000 		.4byte	.LASF45
 926 0519 07       		.byte	0x7
 927 051a 0F       		.byte	0xf
 928 051b 16       		.uleb128 0x16
 929 051c 4A010000 		.4byte	.LASF46
 930 0520 4A010000 		.4byte	.LASF46
 931 0524 06       		.byte	0x6
 932 0525 1B       		.byte	0x1b
 933 0526 16       		.uleb128 0x16
 934 0527 05000000 		.4byte	.LASF47
 935 052b 05000000 		.4byte	.LASF47
 936 052f 0B       		.byte	0xb
 937 0530 B0       		.byte	0xb0
 938 0531 16       		.uleb128 0x16
 939 0532 A6020000 		.4byte	.LASF48
 940 0536 A6020000 		.4byte	.LASF48
 941 053a 0B       		.byte	0xb
 942 053b AE       		.byte	0xae
 943 053c 16       		.uleb128 0x16
 944 053d FF000000 		.4byte	.LASF49
 945 0541 FF000000 		.4byte	.LASF49
 946 0545 0B       		.byte	0xb
 947 0546 B6       		.byte	0xb6
 948 0547 16       		.uleb128 0x16
 949 0548 86010000 		.4byte	.LASF50
 950 054c 86010000 		.4byte	.LASF50
 951 0550 0C       		.byte	0xc
 952 0551 26       		.byte	0x26
 953 0552 16       		.uleb128 0x16
 954 0553 39010000 		.4byte	.LASF51
 955 0557 39010000 		.4byte	.LASF51
 956 055b 05       		.byte	0x5
 957 055c 51       		.byte	0x51
 958 055d 16       		.uleb128 0x16
 959 055e 2F020000 		.4byte	.LASF52
 960 0562 2F020000 		.4byte	.LASF52
 961 0566 0D       		.byte	0xd
 962 0567 29       		.byte	0x29
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 36


 963 0568 00       		.byte	0
 964              		.section	.debug_abbrev,"",%progbits
 965              	.Ldebug_abbrev0:
 966 0000 01       		.uleb128 0x1
 967 0001 11       		.uleb128 0x11
 968 0002 01       		.byte	0x1
 969 0003 25       		.uleb128 0x25
 970 0004 0E       		.uleb128 0xe
 971 0005 13       		.uleb128 0x13
 972 0006 0B       		.uleb128 0xb
 973 0007 03       		.uleb128 0x3
 974 0008 0E       		.uleb128 0xe
 975 0009 1B       		.uleb128 0x1b
 976 000a 0E       		.uleb128 0xe
 977 000b 55       		.uleb128 0x55
 978 000c 17       		.uleb128 0x17
 979 000d 11       		.uleb128 0x11
 980 000e 01       		.uleb128 0x1
 981 000f 10       		.uleb128 0x10
 982 0010 17       		.uleb128 0x17
 983 0011 00       		.byte	0
 984 0012 00       		.byte	0
 985 0013 02       		.uleb128 0x2
 986 0014 24       		.uleb128 0x24
 987 0015 00       		.byte	0
 988 0016 0B       		.uleb128 0xb
 989 0017 0B       		.uleb128 0xb
 990 0018 3E       		.uleb128 0x3e
 991 0019 0B       		.uleb128 0xb
 992 001a 03       		.uleb128 0x3
 993 001b 0E       		.uleb128 0xe
 994 001c 00       		.byte	0
 995 001d 00       		.byte	0
 996 001e 03       		.uleb128 0x3
 997 001f 16       		.uleb128 0x16
 998 0020 00       		.byte	0
 999 0021 03       		.uleb128 0x3
 1000 0022 0E       		.uleb128 0xe
 1001 0023 3A       		.uleb128 0x3a
 1002 0024 0B       		.uleb128 0xb
 1003 0025 3B       		.uleb128 0x3b
 1004 0026 0B       		.uleb128 0xb
 1005 0027 49       		.uleb128 0x49
 1006 0028 13       		.uleb128 0x13
 1007 0029 00       		.byte	0
 1008 002a 00       		.byte	0
 1009 002b 04       		.uleb128 0x4
 1010 002c 24       		.uleb128 0x24
 1011 002d 00       		.byte	0
 1012 002e 0B       		.uleb128 0xb
 1013 002f 0B       		.uleb128 0xb
 1014 0030 3E       		.uleb128 0x3e
 1015 0031 0B       		.uleb128 0xb
 1016 0032 03       		.uleb128 0x3
 1017 0033 08       		.uleb128 0x8
 1018 0034 00       		.byte	0
 1019 0035 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 37


 1020 0036 05       		.uleb128 0x5
 1021 0037 13       		.uleb128 0x13
 1022 0038 01       		.byte	0x1
 1023 0039 03       		.uleb128 0x3
 1024 003a 0E       		.uleb128 0xe
 1025 003b 0B       		.uleb128 0xb
 1026 003c 0B       		.uleb128 0xb
 1027 003d 3A       		.uleb128 0x3a
 1028 003e 0B       		.uleb128 0xb
 1029 003f 3B       		.uleb128 0x3b
 1030 0040 0B       		.uleb128 0xb
 1031 0041 01       		.uleb128 0x1
 1032 0042 13       		.uleb128 0x13
 1033 0043 00       		.byte	0
 1034 0044 00       		.byte	0
 1035 0045 06       		.uleb128 0x6
 1036 0046 0D       		.uleb128 0xd
 1037 0047 00       		.byte	0
 1038 0048 03       		.uleb128 0x3
 1039 0049 08       		.uleb128 0x8
 1040 004a 3A       		.uleb128 0x3a
 1041 004b 0B       		.uleb128 0xb
 1042 004c 3B       		.uleb128 0x3b
 1043 004d 0B       		.uleb128 0xb
 1044 004e 49       		.uleb128 0x49
 1045 004f 13       		.uleb128 0x13
 1046 0050 38       		.uleb128 0x38
 1047 0051 0B       		.uleb128 0xb
 1048 0052 00       		.byte	0
 1049 0053 00       		.byte	0
 1050 0054 07       		.uleb128 0x7
 1051 0055 0D       		.uleb128 0xd
 1052 0056 00       		.byte	0
 1053 0057 03       		.uleb128 0x3
 1054 0058 0E       		.uleb128 0xe
 1055 0059 3A       		.uleb128 0x3a
 1056 005a 0B       		.uleb128 0xb
 1057 005b 3B       		.uleb128 0x3b
 1058 005c 0B       		.uleb128 0xb
 1059 005d 49       		.uleb128 0x49
 1060 005e 13       		.uleb128 0x13
 1061 005f 38       		.uleb128 0x38
 1062 0060 0B       		.uleb128 0xb
 1063 0061 00       		.byte	0
 1064 0062 00       		.byte	0
 1065 0063 08       		.uleb128 0x8
 1066 0064 2E       		.uleb128 0x2e
 1067 0065 01       		.byte	0x1
 1068 0066 3F       		.uleb128 0x3f
 1069 0067 19       		.uleb128 0x19
 1070 0068 03       		.uleb128 0x3
 1071 0069 0E       		.uleb128 0xe
 1072 006a 3A       		.uleb128 0x3a
 1073 006b 0B       		.uleb128 0xb
 1074 006c 3B       		.uleb128 0x3b
 1075 006d 05       		.uleb128 0x5
 1076 006e 27       		.uleb128 0x27
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 38


 1077 006f 19       		.uleb128 0x19
 1078 0070 8701     		.uleb128 0x87
 1079 0072 19       		.uleb128 0x19
 1080 0073 11       		.uleb128 0x11
 1081 0074 01       		.uleb128 0x1
 1082 0075 12       		.uleb128 0x12
 1083 0076 06       		.uleb128 0x6
 1084 0077 40       		.uleb128 0x40
 1085 0078 18       		.uleb128 0x18
 1086 0079 9742     		.uleb128 0x2117
 1087 007b 19       		.uleb128 0x19
 1088 007c 01       		.uleb128 0x1
 1089 007d 13       		.uleb128 0x13
 1090 007e 00       		.byte	0
 1091 007f 00       		.byte	0
 1092 0080 09       		.uleb128 0x9
 1093 0081 34       		.uleb128 0x34
 1094 0082 00       		.byte	0
 1095 0083 03       		.uleb128 0x3
 1096 0084 0E       		.uleb128 0xe
 1097 0085 3A       		.uleb128 0x3a
 1098 0086 0B       		.uleb128 0xb
 1099 0087 3B       		.uleb128 0x3b
 1100 0088 05       		.uleb128 0x5
 1101 0089 49       		.uleb128 0x49
 1102 008a 13       		.uleb128 0x13
 1103 008b 02       		.uleb128 0x2
 1104 008c 18       		.uleb128 0x18
 1105 008d 00       		.byte	0
 1106 008e 00       		.byte	0
 1107 008f 0A       		.uleb128 0xa
 1108 0090 34       		.uleb128 0x34
 1109 0091 00       		.byte	0
 1110 0092 03       		.uleb128 0x3
 1111 0093 0E       		.uleb128 0xe
 1112 0094 3A       		.uleb128 0x3a
 1113 0095 0B       		.uleb128 0xb
 1114 0096 3B       		.uleb128 0x3b
 1115 0097 05       		.uleb128 0x5
 1116 0098 49       		.uleb128 0x49
 1117 0099 13       		.uleb128 0x13
 1118 009a 02       		.uleb128 0x2
 1119 009b 17       		.uleb128 0x17
 1120 009c 00       		.byte	0
 1121 009d 00       		.byte	0
 1122 009e 0B       		.uleb128 0xb
 1123 009f 0B       		.uleb128 0xb
 1124 00a0 01       		.byte	0x1
 1125 00a1 11       		.uleb128 0x11
 1126 00a2 01       		.uleb128 0x1
 1127 00a3 12       		.uleb128 0x12
 1128 00a4 06       		.uleb128 0x6
 1129 00a5 01       		.uleb128 0x1
 1130 00a6 13       		.uleb128 0x13
 1131 00a7 00       		.byte	0
 1132 00a8 00       		.byte	0
 1133 00a9 0C       		.uleb128 0xc
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 39


 1134 00aa 34       		.uleb128 0x34
 1135 00ab 00       		.byte	0
 1136 00ac 03       		.uleb128 0x3
 1137 00ad 08       		.uleb128 0x8
 1138 00ae 3A       		.uleb128 0x3a
 1139 00af 0B       		.uleb128 0xb
 1140 00b0 3B       		.uleb128 0x3b
 1141 00b1 05       		.uleb128 0x5
 1142 00b2 49       		.uleb128 0x49
 1143 00b3 13       		.uleb128 0x13
 1144 00b4 02       		.uleb128 0x2
 1145 00b5 18       		.uleb128 0x18
 1146 00b6 00       		.byte	0
 1147 00b7 00       		.byte	0
 1148 00b8 0D       		.uleb128 0xd
 1149 00b9 34       		.uleb128 0x34
 1150 00ba 00       		.byte	0
 1151 00bb 03       		.uleb128 0x3
 1152 00bc 08       		.uleb128 0x8
 1153 00bd 3A       		.uleb128 0x3a
 1154 00be 0B       		.uleb128 0xb
 1155 00bf 3B       		.uleb128 0x3b
 1156 00c0 05       		.uleb128 0x5
 1157 00c1 49       		.uleb128 0x49
 1158 00c2 13       		.uleb128 0x13
 1159 00c3 02       		.uleb128 0x2
 1160 00c4 17       		.uleb128 0x17
 1161 00c5 00       		.byte	0
 1162 00c6 00       		.byte	0
 1163 00c7 0E       		.uleb128 0xe
 1164 00c8 34       		.uleb128 0x34
 1165 00c9 00       		.byte	0
 1166 00ca 03       		.uleb128 0x3
 1167 00cb 0E       		.uleb128 0xe
 1168 00cc 3A       		.uleb128 0x3a
 1169 00cd 0B       		.uleb128 0xb
 1170 00ce 3B       		.uleb128 0x3b
 1171 00cf 05       		.uleb128 0x5
 1172 00d0 49       		.uleb128 0x49
 1173 00d1 13       		.uleb128 0x13
 1174 00d2 1C       		.uleb128 0x1c
 1175 00d3 0B       		.uleb128 0xb
 1176 00d4 00       		.byte	0
 1177 00d5 00       		.byte	0
 1178 00d6 0F       		.uleb128 0xf
 1179 00d7 34       		.uleb128 0x34
 1180 00d8 00       		.byte	0
 1181 00d9 03       		.uleb128 0x3
 1182 00da 08       		.uleb128 0x8
 1183 00db 3A       		.uleb128 0x3a
 1184 00dc 0B       		.uleb128 0xb
 1185 00dd 3B       		.uleb128 0x3b
 1186 00de 05       		.uleb128 0x5
 1187 00df 49       		.uleb128 0x49
 1188 00e0 13       		.uleb128 0x13
 1189 00e1 00       		.byte	0
 1190 00e2 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 40


 1191 00e3 10       		.uleb128 0x10
 1192 00e4 898201   		.uleb128 0x4109
 1193 00e7 00       		.byte	0
 1194 00e8 11       		.uleb128 0x11
 1195 00e9 01       		.uleb128 0x1
 1196 00ea 31       		.uleb128 0x31
 1197 00eb 13       		.uleb128 0x13
 1198 00ec 00       		.byte	0
 1199 00ed 00       		.byte	0
 1200 00ee 11       		.uleb128 0x11
 1201 00ef 898201   		.uleb128 0x4109
 1202 00f2 01       		.byte	0x1
 1203 00f3 11       		.uleb128 0x11
 1204 00f4 01       		.uleb128 0x1
 1205 00f5 31       		.uleb128 0x31
 1206 00f6 13       		.uleb128 0x13
 1207 00f7 01       		.uleb128 0x1
 1208 00f8 13       		.uleb128 0x13
 1209 00f9 00       		.byte	0
 1210 00fa 00       		.byte	0
 1211 00fb 12       		.uleb128 0x12
 1212 00fc 8A8201   		.uleb128 0x410a
 1213 00ff 00       		.byte	0
 1214 0100 02       		.uleb128 0x2
 1215 0101 18       		.uleb128 0x18
 1216 0102 9142     		.uleb128 0x2111
 1217 0104 18       		.uleb128 0x18
 1218 0105 00       		.byte	0
 1219 0106 00       		.byte	0
 1220 0107 13       		.uleb128 0x13
 1221 0108 898201   		.uleb128 0x4109
 1222 010b 01       		.byte	0x1
 1223 010c 11       		.uleb128 0x11
 1224 010d 01       		.uleb128 0x1
 1225 010e 31       		.uleb128 0x31
 1226 010f 13       		.uleb128 0x13
 1227 0110 00       		.byte	0
 1228 0111 00       		.byte	0
 1229 0112 14       		.uleb128 0x14
 1230 0113 34       		.uleb128 0x34
 1231 0114 00       		.byte	0
 1232 0115 03       		.uleb128 0x3
 1233 0116 0E       		.uleb128 0xe
 1234 0117 3A       		.uleb128 0x3a
 1235 0118 0B       		.uleb128 0xb
 1236 0119 3B       		.uleb128 0x3b
 1237 011a 05       		.uleb128 0x5
 1238 011b 49       		.uleb128 0x49
 1239 011c 13       		.uleb128 0x13
 1240 011d 3F       		.uleb128 0x3f
 1241 011e 19       		.uleb128 0x19
 1242 011f 3C       		.uleb128 0x3c
 1243 0120 19       		.uleb128 0x19
 1244 0121 00       		.byte	0
 1245 0122 00       		.byte	0
 1246 0123 15       		.uleb128 0x15
 1247 0124 35       		.uleb128 0x35
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 41


 1248 0125 00       		.byte	0
 1249 0126 49       		.uleb128 0x49
 1250 0127 13       		.uleb128 0x13
 1251 0128 00       		.byte	0
 1252 0129 00       		.byte	0
 1253 012a 16       		.uleb128 0x16
 1254 012b 2E       		.uleb128 0x2e
 1255 012c 00       		.byte	0
 1256 012d 3F       		.uleb128 0x3f
 1257 012e 19       		.uleb128 0x19
 1258 012f 3C       		.uleb128 0x3c
 1259 0130 19       		.uleb128 0x19
 1260 0131 6E       		.uleb128 0x6e
 1261 0132 0E       		.uleb128 0xe
 1262 0133 03       		.uleb128 0x3
 1263 0134 0E       		.uleb128 0xe
 1264 0135 3A       		.uleb128 0x3a
 1265 0136 0B       		.uleb128 0xb
 1266 0137 3B       		.uleb128 0x3b
 1267 0138 0B       		.uleb128 0xb
 1268 0139 00       		.byte	0
 1269 013a 00       		.byte	0
 1270 013b 17       		.uleb128 0x17
 1271 013c 2E       		.uleb128 0x2e
 1272 013d 00       		.byte	0
 1273 013e 3F       		.uleb128 0x3f
 1274 013f 19       		.uleb128 0x19
 1275 0140 3C       		.uleb128 0x3c
 1276 0141 19       		.uleb128 0x19
 1277 0142 6E       		.uleb128 0x6e
 1278 0143 0E       		.uleb128 0xe
 1279 0144 03       		.uleb128 0x3
 1280 0145 0E       		.uleb128 0xe
 1281 0146 3A       		.uleb128 0x3a
 1282 0147 0B       		.uleb128 0xb
 1283 0148 3B       		.uleb128 0x3b
 1284 0149 0B       		.uleb128 0xb
 1285 014a 6E       		.uleb128 0x6e
 1286 014b 0E       		.uleb128 0xe
 1287 014c 00       		.byte	0
 1288 014d 00       		.byte	0
 1289 014e 18       		.uleb128 0x18
 1290 014f 2E       		.uleb128 0x2e
 1291 0150 00       		.byte	0
 1292 0151 3F       		.uleb128 0x3f
 1293 0152 19       		.uleb128 0x19
 1294 0153 3C       		.uleb128 0x3c
 1295 0154 19       		.uleb128 0x19
 1296 0155 6E       		.uleb128 0x6e
 1297 0156 0E       		.uleb128 0xe
 1298 0157 03       		.uleb128 0x3
 1299 0158 0E       		.uleb128 0xe
 1300 0159 3A       		.uleb128 0x3a
 1301 015a 0B       		.uleb128 0xb
 1302 015b 3B       		.uleb128 0x3b
 1303 015c 05       		.uleb128 0x5
 1304 015d 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 42


 1305 015e 00       		.byte	0
 1306 015f 00       		.byte	0
 1307              		.section	.debug_loc,"",%progbits
 1308              	.Ldebug_loc0:
 1309              	.LLST0:
 1310 0000 0E000000 		.4byte	.LVL1
 1311 0004 15000000 		.4byte	.LVL2-1
 1312 0008 0100     		.2byte	0x1
 1313 000a 50       		.byte	0x50
 1314 000b 00000000 		.4byte	0
 1315 000f 00000000 		.4byte	0
 1316              	.LLST1:
 1317 0013 1C000000 		.4byte	.LVL3
 1318 0017 B4000000 		.4byte	.LVL24
 1319 001b 0200     		.2byte	0x2
 1320 001d 30       		.byte	0x30
 1321 001e 9F       		.byte	0x9f
 1322 001f B4000000 		.4byte	.LVL24
 1323 0023 24010000 		.4byte	.LFE85
 1324 0027 0200     		.2byte	0x2
 1325 0029 31       		.byte	0x31
 1326 002a 9F       		.byte	0x9f
 1327 002b 00000000 		.4byte	0
 1328 002f 00000000 		.4byte	0
 1329              	.LLST2:
 1330 0033 1C000000 		.4byte	.LVL3
 1331 0037 54000000 		.4byte	.LVL11
 1332 003b 0200     		.2byte	0x2
 1333 003d 31       		.byte	0x31
 1334 003e 9F       		.byte	0x9f
 1335 003f 54000000 		.4byte	.LVL11
 1336 0043 8C000000 		.4byte	.LVL16
 1337 0047 0100     		.2byte	0x1
 1338 0049 54       		.byte	0x54
 1339 004a 8C000000 		.4byte	.LVL16
 1340 004e 8E000000 		.4byte	.LVL17
 1341 0052 0200     		.2byte	0x2
 1342 0054 30       		.byte	0x30
 1343 0055 9F       		.byte	0x9f
 1344 0056 8E000000 		.4byte	.LVL17
 1345 005a 24010000 		.4byte	.LFE85
 1346 005e 0100     		.2byte	0x1
 1347 0060 54       		.byte	0x54
 1348 0061 00000000 		.4byte	0
 1349 0065 00000000 		.4byte	0
 1350              	.LLST3:
 1351 0069 AA000000 		.4byte	.LVL22
 1352 006d B0000000 		.4byte	.LVL23
 1353 0071 0100     		.2byte	0x1
 1354 0073 50       		.byte	0x50
 1355 0074 B0000000 		.4byte	.LVL23
 1356 0078 B3000000 		.4byte	.LVL24-1
 1357 007c 0100     		.2byte	0x1
 1358 007e 52       		.byte	0x52
 1359 007f 00000000 		.4byte	0
 1360 0083 00000000 		.4byte	0
 1361              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 43


 1362 0000 1C000000 		.4byte	0x1c
 1363 0004 0200     		.2byte	0x2
 1364 0006 00000000 		.4byte	.Ldebug_info0
 1365 000a 04       		.byte	0x4
 1366 000b 00       		.byte	0
 1367 000c 0000     		.2byte	0
 1368 000e 0000     		.2byte	0
 1369 0010 00000000 		.4byte	.LFB85
 1370 0014 24010000 		.4byte	.LFE85-.LFB85
 1371 0018 00000000 		.4byte	0
 1372 001c 00000000 		.4byte	0
 1373              		.section	.debug_ranges,"",%progbits
 1374              	.Ldebug_ranges0:
 1375 0000 00000000 		.4byte	.LFB85
 1376 0004 24010000 		.4byte	.LFE85
 1377 0008 00000000 		.4byte	0
 1378 000c 00000000 		.4byte	0
 1379              		.section	.debug_line,"",%progbits
 1380              	.Ldebug_line0:
 1381 0000 45020000 		.section	.debug_str,"MS",%progbits,1
 1381      0200F001 
 1381      00000201 
 1381      FB0E0D00 
 1381      01010101 
 1382              	.LASF44:
 1383 0000 42656570 		.ascii	"Beep\000"
 1383      00
 1384              	.LASF47:
 1385 0005 43795379 		.ascii	"CySysTickEnable\000"
 1385      73546963 
 1385      6B456E61 
 1385      626C6500 
 1386              	.LASF4:
 1387 0015 73686F72 		.ascii	"short int\000"
 1387      7420696E 
 1387      7400
 1388              	.LASF21:
 1389 001f 73697A65 		.ascii	"sizetype\000"
 1389      74797065 
 1389      00
 1390              	.LASF24:
 1391 0028 61636358 		.ascii	"accX\000"
 1391      00
 1392              	.LASF25:
 1393 002d 61636359 		.ascii	"accY\000"
 1393      00
 1394              	.LASF26:
 1395 0032 6163635A 		.ascii	"accZ\000"
 1395      00
 1396              	.LASF5:
 1397 0037 5F5F7569 		.ascii	"__uint16_t\000"
 1397      6E743136 
 1397      5F7400
 1398              	.LASF55:
 1399 0042 433A5C55 		.ascii	"C:\\Users\\ilyap\\Documents\\PSoC Creator\\Zumo_tan"
 1399      73657273 
 1399      5C696C79 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 44


 1399      61705C44 
 1399      6F63756D 
 1400 0070 6B5C5A75 		.ascii	"k\\Zumo_robot\\ZumoBot_Tank.cydsn\000"
 1400      6D6F5F72 
 1400      6F626F74 
 1400      5C5A756D 
 1400      6F426F74 
 1401              	.LASF22:
 1402 0090 73656E73 		.ascii	"sensors_\000"
 1402      6F72735F 
 1402      00
 1403              	.LASF13:
 1404 0099 75696E74 		.ascii	"uint8_t\000"
 1404      385F7400 
 1405              	.LASF30:
 1406 00a1 73746172 		.ascii	"startline\000"
 1406      746C696E 
 1406      6500
 1407              	.LASF43:
 1408 00ab 6D6F746F 		.ascii	"motor_turn\000"
 1408      725F7475 
 1408      726E00
 1409              	.LASF31:
 1410 00b6 636F756E 		.ascii	"count\000"
 1410      7400
 1411              	.LASF38:
 1412 00bc 7265666C 		.ascii	"reflectance_start\000"
 1412      65637461 
 1412      6E63655F 
 1412      73746172 
 1412      7400
 1413              	.LASF17:
 1414 00ce 666C6F61 		.ascii	"float\000"
 1414      7400
 1415              	.LASF10:
 1416 00d4 6C6F6E67 		.ascii	"long long int\000"
 1416      206C6F6E 
 1416      6720696E 
 1416      7400
 1417              	.LASF42:
 1418 00e2 7265666C 		.ascii	"reflectance_digital\000"
 1418      65637461 
 1418      6E63655F 
 1418      64696769 
 1418      74616C00 
 1419              	.LASF8:
 1420 00f6 6C6F6E67 		.ascii	"long int\000"
 1420      20696E74 
 1420      00
 1421              	.LASF49:
 1422 00ff 43795379 		.ascii	"CySysTickGetValue\000"
 1422      73546963 
 1422      6B476574 
 1422      56616C75 
 1422      6500
 1423              	.LASF23:
 1424 0111 61636344 		.ascii	"accData_\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 45


 1424      6174615F 
 1424      00
 1425              	.LASF2:
 1426 011a 5F5F7569 		.ascii	"__uint8_t\000"
 1426      6E74385F 
 1426      7400
 1427              	.LASF34:
 1428 0124 49525F53 		.ascii	"IR_Start\000"
 1428      74617274 
 1428      00
 1429              	.LASF20:
 1430 012d 6C6F6E67 		.ascii	"long double\000"
 1430      20646F75 
 1430      626C6500 
 1431              	.LASF51:
 1432 0139 4C534D33 		.ascii	"LSM303D_Read_Acc\000"
 1432      3033445F 
 1432      52656164 
 1432      5F416363 
 1432      00
 1433              	.LASF46:
 1434 014a 49525F77 		.ascii	"IR_wait\000"
 1434      61697400 
 1435              	.LASF1:
 1436 0152 756E7369 		.ascii	"unsigned char\000"
 1436      676E6564 
 1436      20636861 
 1436      7200
 1437              	.LASF39:
 1438 0160 7265666C 		.ascii	"reflectance_set_threshold\000"
 1438      65637461 
 1438      6E63655F 
 1438      7365745F 
 1438      74687265 
 1439              	.LASF0:
 1440 017a 7369676E 		.ascii	"signed char\000"
 1440      65642063 
 1440      68617200 
 1441              	.LASF50:
 1442 0186 42617474 		.ascii	"BatteryLed_Write\000"
 1442      6572794C 
 1442      65645F57 
 1442      72697465 
 1442      00
 1443              	.LASF11:
 1444 0197 6C6F6E67 		.ascii	"long long unsigned int\000"
 1444      206C6F6E 
 1444      6720756E 
 1444      7369676E 
 1444      65642069 
 1445              	.LASF40:
 1446 01ae 76546173 		.ascii	"vTaskDelay\000"
 1446      6B44656C 
 1446      617900
 1447              	.LASF37:
 1448 01b9 49525F66 		.ascii	"IR_flush\000"
 1448      6C757368 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 46


 1448      00
 1449              	.LASF12:
 1450 01c2 756E7369 		.ascii	"unsigned int\000"
 1450      676E6564 
 1450      20696E74 
 1450      00
 1451              	.LASF15:
 1452 01cf 75696E74 		.ascii	"uint16_t\000"
 1452      31365F74 
 1452      00
 1453              	.LASF58:
 1454 01d8 70757473 		.ascii	"puts\000"
 1454      00
 1455              	.LASF32:
 1456 01dd 73746172 		.ascii	"start\000"
 1456      7400
 1457              	.LASF6:
 1458 01e3 73686F72 		.ascii	"short unsigned int\000"
 1458      7420756E 
 1458      7369676E 
 1458      65642069 
 1458      6E7400
 1459              	.LASF45:
 1460 01f6 6D6F746F 		.ascii	"motor_forward\000"
 1460      725F666F 
 1460      72776172 
 1460      6400
 1461              	.LASF19:
 1462 0204 63686172 		.ascii	"char\000"
 1462      00
 1463              	.LASF16:
 1464 0209 696E7433 		.ascii	"int32_t\000"
 1464      325F7400 
 1465              	.LASF14:
 1466 0211 696E7431 		.ascii	"int16_t\000"
 1466      365F7400 
 1467              	.LASF33:
 1468 0219 5F426F6F 		.ascii	"_Bool\000"
 1468      6C00
 1469              	.LASF36:
 1470 021f 7072696E 		.ascii	"print_mqtt\000"
 1470      745F6D71 
 1470      747400
 1471              	.LASF27:
 1472 022a 64617461 		.ascii	"data\000"
 1472      00
 1473              	.LASF52:
 1474 022f 5357315F 		.ascii	"SW1_Read\000"
 1474      52656164 
 1474      00
 1475              	.LASF54:
 1476 0238 6D61696E 		.ascii	"main.c\000"
 1476      2E6300
 1477              	.LASF9:
 1478 023f 6C6F6E67 		.ascii	"long unsigned int\000"
 1478      20756E73 
 1478      69676E65 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 47


 1478      6420696E 
 1478      7400
 1479              	.LASF18:
 1480 0251 646F7562 		.ascii	"double\000"
 1480      6C6500
 1481              	.LASF35:
 1482 0258 6D6F746F 		.ascii	"motor_start\000"
 1482      725F7374 
 1482      61727400 
 1483              	.LASF59:
 1484 0264 5F5F6275 		.ascii	"__builtin_puts\000"
 1484      696C7469 
 1484      6E5F7075 
 1484      747300
 1485              	.LASF28:
 1486 0273 62757474 		.ascii	"button_\000"
 1486      6F6E5F00 
 1487              	.LASF56:
 1488 027b 7A6D6169 		.ascii	"zmain\000"
 1488      6E00
 1489              	.LASF7:
 1490 0281 5F5F696E 		.ascii	"__int32_t\000"
 1490      7433325F 
 1490      7400
 1491              	.LASF41:
 1492 028b 7265666C 		.ascii	"reflectance_read\000"
 1492      65637461 
 1492      6E63655F 
 1492      72656164 
 1492      00
 1493              	.LASF3:
 1494 029c 5F5F696E 		.ascii	"__int16_t\000"
 1494      7431365F 
 1494      7400
 1495              	.LASF48:
 1496 02a6 43795379 		.ascii	"CySysTickStart\000"
 1496      73546963 
 1496      6B537461 
 1496      727400
 1497              	.LASF29:
 1498 02b5 6C6F6F70 		.ascii	"loop\000"
 1498      00
 1499              	.LASF57:
 1500 02ba 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1500      52784275 
 1500      66666572 
 1500      00
 1501              	.LASF53:
 1502 02c7 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1502      43313120 
 1502      352E342E 
 1502      31203230 
 1502      31363036 
 1503 02fa 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1503      20726576 
 1503      6973696F 
 1503      6E203233 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccPmwDnH.s 			page 48


 1503      37373135 
 1504 032d 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1504      66756E63 
 1504      74696F6E 
 1504      2D736563 
 1504      74696F6E 
 1505              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
