ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.zmain,"ax",%progbits
  20              		.align	2
  21              		.global	zmain
  22              		.thumb
  23              		.thumb_func
  24              		.type	zmain, %function
  25              	zmain:
  26              	.LFB85:
  27              		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        **** * @mainpage ZumoBot Project
   3:main.c        **** * @brief    You can make your own ZumoBot with various sensors.
   4:main.c        **** * @details  <br><br>
   5:main.c        ****     <p>
   6:main.c        ****     <B>General</B><br>
   7:main.c        ****     You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress
   8:main.c        ****     library has basic methods of various sensors and communications so that you can make what you w
   9:main.c        ****     <br><br>
  10:main.c        ****     </p>
  11:main.c        ****     
  12:main.c        ****     <p>
  13:main.c        ****     <B>Sensors</B><br>
  14:main.c        ****     &nbsp;Included: <br>
  15:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
  16:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
  17:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
  18:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Motors
  19:main.c        ****     &nbsp;Wii nunchuck<br>
  20:main.c        ****     &nbsp;TSOP-2236: IR Receiver<br>
  21:main.c        ****     &nbsp;HC-SR04: Ultrasonic sensor<br>
  22:main.c        ****     &nbsp;APDS-9301: Ambient light sensor<br>
  23:main.c        ****     &nbsp;IR LED <br><br><br>
  24:main.c        ****     </p>
  25:main.c        ****     
  26:main.c        ****     <p>
  27:main.c        ****     <B>Communication</B><br>
  28:main.c        ****     I2C, UART, Serial<br>
  29:main.c        ****     </p>
  30:main.c        **** */
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 2


  31:main.c        **** 
  32:main.c        **** #include <project.h>
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdlib.h>
  35:main.c        **** #include "FreeRTOS.h"
  36:main.c        **** #include "task.h"
  37:main.c        **** #include "Motor.h"
  38:main.c        **** #include "Ultra.h"
  39:main.c        **** #include "Nunchuk.h"
  40:main.c        **** #include "Reflectance.h"
  41:main.c        **** #include "Gyro.h"
  42:main.c        **** #include "Accel_magnet.h"
  43:main.c        **** #include "LSM303D.h"
  44:main.c        **** #include "IR.h"
  45:main.c        **** #include "Beep.h"
  46:main.c        **** #include "mqtt_sender.h"
  47:main.c        **** #include <time.h>
  48:main.c        **** #include <sys/time.h>
  49:main.c        **** #include "serial1.h"
  50:main.c        **** #include <unistd.h>
  51:main.c        **** /**
  52:main.c        ****  * @file    main.c
  53:main.c        ****  * @brief   
  54:main.c        ****  * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp
  55:main.c        **** */
  56:main.c        **** 
  57:main.c        **** #if 0
  58:main.c        **** //template
  59:main.c        **** void zmain(void){
  60:main.c        ****     
  61:main.c        ****     while(true)
  62:main.c        ****     {
  63:main.c        ****         BatteryLed_Write(!SW1_Read());
  64:main.c        ****         vTaskDelay(100);
  65:main.c        ****     }
  66:main.c        **** }
  67:main.c        **** #endif
  68:main.c        **** 
  69:main.c        **** #if 0
  70:main.c        **** // Beep light test
  71:main.c        **** void zmain(void)
  72:main.c        **** {
  73:main.c        ****     while(true)
  74:main.c        ****     {
  75:main.c        ****         if ((SW1_Read() == 0)){
  76:main.c        ****             for(int i = 0; i < 3; i++){
  77:main.c        ****                 BatteryLed_Write(1);
  78:main.c        ****                 Beep(750, 30);
  79:main.c        ****                 vTaskDelay(500);
  80:main.c        ****                 BatteryLed_Write(0);
  81:main.c        ****                 vTaskDelay(500);
  82:main.c        ****             }
  83:main.c        ****             for(int i = 0; i<3; i++){
  84:main.c        ****                 BatteryLed_Write(1);
  85:main.c        ****                 Beep(750, 30);
  86:main.c        ****                 vTaskDelay(1000);
  87:main.c        ****                 BatteryLed_Write(0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 3


  88:main.c        ****                 vTaskDelay(500);
  89:main.c        ****             }
  90:main.c        ****             for(int i = 0; i < 3; i++){
  91:main.c        ****                 BatteryLed_Write(1);
  92:main.c        ****                 Beep(750, 30);
  93:main.c        ****                 vTaskDelay(500);
  94:main.c        ****                 BatteryLed_Write(0);
  95:main.c        ****                 vTaskDelay(500);
  96:main.c        ****             }
  97:main.c        ****         }
  98:main.c        ****     }
  99:main.c        ****     
 100:main.c        ****     
 101:main.c        ****  }   
 102:main.c        **** #endif
 103:main.c        **** 
 104:main.c        **** #if 0
 105:main.c        **** // Name and age
 106:main.c        **** void zmain(void)
 107:main.c        **** {
 108:main.c        ****     TickType_t start;
 109:main.c        ****     TickType_t end;
 110:main.c        ****     char name[32];
 111:main.c        ****     int age;
 112:main.c        ****     
 113:main.c        ****     
 114:main.c        ****     printf("\n\n");
 115:main.c        ****     
 116:main.c        ****     printf("Enter your name: ");
 117:main.c        ****     //fflush(stdout);
 118:main.c        ****     start = xTaskGetTickCount();
 119:main.c        ****     scanf("%s", name);
 120:main.c        ****     printf("Enter your age: ");
 121:main.c        ****     //fflush(stdout);
 122:main.c        ****     scanf("%d", &age);
 123:main.c        ****     end = xTaskGetTickCount();
 124:main.c        ****     int time_long = end - start;
 125:main.c        ****     //printf("You are [%s], age = %d\n", name, age);
 126:main.c        ****     if (age <= 21){
 127:main.c        ****         if(time_long < 3000){
 128:main.c        ****             printf("\nSuper fast dude!");
 129:main.c        ****         }
 130:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 131:main.c        ****             printf("\nSo mediocre.");
 132:main.c        ****         }
 133:main.c        ****         else{
 134:main.c        ****             printf("\nMy granny is faster than you!");
 135:main.c        ****         }
 136:main.c        ****     }
 137:main.c        ****     else if((age >= 22)&&(age<=50)){
 138:main.c        ****         if(time_long < 3000){
 139:main.c        ****             printf("\nBe quick or be dead");
 140:main.c        ****         }
 141:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 142:main.c        ****             printf("\nYou're so average.");
 143:main.c        ****         }
 144:main.c        ****         else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 4


 145:main.c        ****             printf("\nHave you been smoking something illegal?");
 146:main.c        ****         }
 147:main.c        ****     }
 148:main.c        ****     else{
 149:main.c        ****         if(time_long <= 3000){
 150:main.c        ****             printf("\nStill going strong");
 151:main.c        ****         }
 152:main.c        ****         else if((time_long >= 4000)&&(time_long <=5000)){
 153:main.c        ****             printf("\nYou are doing ok for your age.");
 154:main.c        ****         }
 155:main.c        ****         else{
 156:main.c        ****             printf("\nDo they still allow you to drive?");
 157:main.c        ****         }
 158:main.c        ****     }
 159:main.c        ****     while(true)
 160:main.c        ****     {
 161:main.c        ****         BatteryLed_Write(!SW1_Read());
 162:main.c        ****         vTaskDelay(100);
 163:main.c        ****     }
 164:main.c        ****  }   
 165:main.c        **** #endif
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** #if 0
 169:main.c        **** //battery level//
 170:main.c        **** void zmain(void)
 171:main.c        **** {
 172:main.c        **** 	ADC_Battery_Start();   	 
 173:main.c        **** 
 174:main.c        **** 	int16 adcresult =0;
 175:main.c        **** 	float volts = 0.0;
 176:main.c        **** 
 177:main.c        **** 	printf("\nBoot\n");
 178:main.c        **** 
 179:main.c        **** 	//BatteryLed_Write(1); // Switch led on
 180:main.c        **** 	//BatteryLed_Write(0); // Switch led off
 181:main.c        **** 	//uint8 button;
 182:main.c        **** 	//button = SW1_Read(); // read SW1 on pSoC board
 183:main.c        **** 	// SW1_Read() returns zero when button is pressed
 184:main.c        **** 	// SW1_Read() returns one when button is not pressed
 185:main.c        **** 
 186:main.c        **** 	while(true)
 187:main.c        **** 	{
 188:main.c        ****     	char msg[80];
 189:main.c        ****     	ADC_Battery_StartConvert(); // start sampling
 190:main.c        ****     	if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for ADC converted val
 191:main.c        ****         	adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
 192:main.c        ****         	volts=(adcresult*5/4095)*(30/20);
 193:main.c        ****         	// convert value to Volts
 194:main.c        ****         	// you need to implement the conversion
 195:main.c        ****        	 
 196:main.c        ****         	// Print both ADC results and converted value
 197:main.c        ****         	printf("%d %f\r\n",adcresult, volts);
 198:main.c        ****        	 
 199:main.c        ****     	if (volts<4){
 200:main.c        ****         	while(SW1_Read()){
 201:main.c        ****             	BatteryLed_Write(1);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 5


 202:main.c        ****             	vTaskDelay(500);
 203:main.c        ****             	BatteryLed_Write(0);
 204:main.c        ****             	vTaskDelay(500);
 205:main.c        ****         	}
 206:main.c        ****     	}
 207:main.c        ****     	}
 208:main.c        ****     	vTaskDelay(500);
 209:main.c        **** 	}
 210:main.c        ****  }  
 211:main.c        **** 
 212:main.c        ****    
 213:main.c        **** #endif
 214:main.c        **** 
 215:main.c        **** #if 0
 216:main.c        **** // button
 217:main.c        **** void zmain(void)
 218:main.c        **** {
 219:main.c        ****     while(true) {
 220:main.c        ****         printf("Press button within 5 seconds!\n");
 221:main.c        ****         int i = 50;
 222:main.c        ****         while(i > 0) {
 223:main.c        ****             if(SW1_Read() == 0) {
 224:main.c        ****                 break;
 225:main.c        ****             }
 226:main.c        ****             vTaskDelay(100);
 227:main.c        ****             --i;
 228:main.c        ****         }
 229:main.c        ****         if(i > 0) {
 230:main.c        ****             printf("Good work\n");
 231:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait until button is released
 232:main.c        ****         }
 233:main.c        ****         else {
 234:main.c        ****             printf("You didn't press the button\n");
 235:main.c        ****         }
 236:main.c        ****     }
 237:main.c        **** }
 238:main.c        **** #endif
 239:main.c        **** 
 240:main.c        **** #if 0
 241:main.c        **** // button
 242:main.c        **** void zmain(void)
 243:main.c        **** {
 244:main.c        ****     printf("\nBoot\n");
 245:main.c        **** 
 246:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 247:main.c        ****     BatteryLed_Write(0); // Switch led off 
 248:main.c        ****     
 249:main.c        ****     //uint8 button;
 250:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 251:main.c        ****     // SW1_Read() returns zero when button is pressed
 252:main.c        ****     // SW1_Read() returns one when button is not pressed
 253:main.c        ****     
 254:main.c        ****     bool led = false;
 255:main.c        ****     
 256:main.c        ****     while(true)
 257:main.c        ****     {
 258:main.c        ****         // toggle led state when button is pressed
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 6


 259:main.c        ****         if(SW1_Read() == 0) {
 260:main.c        ****             led = !led;
 261:main.c        ****             BatteryLed_Write(led);
 262:main.c        ****             if(led) printf("Led is ON\n");
 263:main.c        ****             else printf("Led is OFF\n");
 264:main.c        ****             Beep(1000, 150);
 265:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait while button is being pressed
 266:main.c        ****         }        
 267:main.c        ****     }
 268:main.c        ****  }   
 269:main.c        **** #endif
 270:main.c        **** 
 271:main.c        **** #if 0
 272:main.c        ****     void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);
 273:main.c        ****     
 274:main.c        **** void zmain(void)
 275:main.c        **** {
 276:main.c        ****     Ultra_Start();
 277:main.c        ****     motor_start(0,0);
 278:main.c        ****     motor_forward(0,0);
 279:main.c        ****     
 280:main.c        ****     vTaskDelay(3000);
 281:main.c        ****     
 282:main.c        ****     while(true){
 283:main.c        ****     int distance = Ultra_GetDistance();
 284:main.c        ****     
 285:main.c        ****     if(distance <= 10 && distance !=0){
 286:main.c        ****         motor_backward(50,500);
 287:main.c        ****         Beep(150, 200);
 288:main.c        ****         motor_turn(150,150, 500);
 289:main.c        ****         motor_forward(0,0);
 290:main.c        ****      }
 291:main.c        ****     motor_turn(200,100,50);
 292:main.c        ****     }   
 293:main.c        **** }
 294:main.c        **** #endif
 295:main.c        **** 
 296:main.c        **** #if 0
 297:main.c        **** //ultrasonic sensor//
 298:main.c        **** void zmain(void)
 299:main.c        **** {
 300:main.c        ****     Ultra_Start();                          // Ultra Sonic Start function
 301:main.c        ****     
 302:main.c        ****     while(true) {
 303:main.c        ****         int d = Ultra_GetDistance();
 304:main.c        ****         // Print the detected distance (centimeters)
 305:main.c        ****         printf("distance = %d\r\n", d);
 306:main.c        ****         vTaskDelay(200);
 307:main.c        ****     }
 308:main.c        **** }   
 309:main.c        **** #endif
 310:main.c        **** 
 311:main.c        **** #if 0
 312:main.c        **** //IR receiverm - how to wait for IR remote commands
 313:main.c        **** void zmain(void)
 314:main.c        **** {
 315:main.c        ****     uint8_t button_;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 7


 316:main.c        ****     printf("\nStart\n");
 317:main.c        ****     
 318:main.c        ****     while(true){
 319:main.c        ****         button_ = SW1_Read();
 320:main.c        ****         if(button_==0){
 321:main.c        ****             IR_Start();
 322:main.c        ****             printf("\n\nIR test\n");
 323:main.c        ****             struct sensors_ ref;
 324:main.c        ****             struct sensors_ dig;
 325:main.c        ****             bool led = false,loop = true, startline= true;
 326:main.c        ****             int count =0;
 327:main.c        ****             motor_start();              // enable motor controller 
 328:main.c        ****             IR_flush(); // clear IR receive buffer
 329:main.c        ****             printf("Buffer cleared\n");
 330:main.c        ****             
 331:main.c        ****             reflectance_start();
 332:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 333:main.c        ****             vTaskDelay(200);
 334:main.c        ****                 while(startline){
 335:main.c        ****                     // read raw sensor values
 336:main.c        ****                     reflectance_read(&ref);
 337:main.c        ****                     reflectance_digital(&dig); 
 338:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 339:main.c        ****                         motor_turn(50,50,50);       // motor forward
 340:main.c        ****                         Beep(60,80);
 341:main.c        ****                     }
 342:main.c        ****                     else{
 343:main.c        ****                         motor_forward(0,0);       // Stop motors
 344:main.c        ****                         startline = false;
 345:main.c        ****                     }
 346:main.c        ****                 }
 347:main.c        ****             IR_wait();  // wait for IR command
 348:main.c        ****             led = !led;
 349:main.c        ****             BatteryLed_Write(led);   
 350:main.c        ****             
 351:main.c        ****             // Toggle led when IR signal is received
 352:main.c        ****             while(loop)
 353:main.c        ****             {   
 354:main.c        ****                 if(led){
 355:main.c        ****                     // read raw sensor values
 356:main.c        ****                     reflectance_read(&ref);
 357:main.c        ****                     reflectance_digital(&dig); 
 358:main.c        ****                     
 359:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 360:main.c        ****                         motor_turn(50,50,50);       // motor forward
 361:main.c        ****                         vTaskDelay(50);
 362:main.c        ****                         count++;
 363:main.c        ****                         printf("count %d \n",count);
 364:main.c        ****                         if(count >= 7){
 365:main.c        ****                             motor_forward(0,0);       // Stop motors
 366:main.c        ****                             loop = false;
 367:main.c        ****                         }
 368:main.c        ****                     }
 369:main.c        ****                     else{
 370:main.c        ****                          motor_turn(50,50,50);       // motor forward
 371:main.c        ****                         Beep(100,100);
 372:main.c        ****                     }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 8


 373:main.c        ****                 }
 374:main.c        ****                 else {
 375:main.c        ****                     printf("Led is OFF\n");
 376:main.c        ****                     loop = false;
 377:main.c        ****                 }
 378:main.c        ****                
 379:main.c        ****             }    
 380:main.c        ****         }
 381:main.c        ****     }
 382:main.c        ****  }   
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        **** 
 386:main.c        **** #if 0
 387:main.c        **** //IR receiverm - how to wait for IR remote commands
 388:main.c        **** void zmain(void)
 389:main.c        **** {
 390:main.c        ****     uint8_t button_;
 391:main.c        ****     printf("\nStart\n");
 392:main.c        ****     
 393:main.c        ****     while(true){
 394:main.c        ****         button_ = SW1_Read();
 395:main.c        ****         if(button_==0){
 396:main.c        ****             IR_Start();
 397:main.c        ****             printf("\n\nIR test\n");
 398:main.c        ****             struct sensors_ ref;
 399:main.c        ****             struct sensors_ dig;
 400:main.c        ****             bool led = false,loop = true, startline= true/*, crossline= true*/;
 401:main.c        ****             int count =0;
 402:main.c        ****             motor_start();              // enable motor controller 
 403:main.c        ****             IR_flush(); // clear IR receive buffer
 404:main.c        ****             printf("Buffer cleared\n");
 405:main.c        ****             
 406:main.c        ****             reflectance_start();
 407:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 408:main.c        ****             vTaskDelay(200);
 409:main.c        ****                 while(startline){
 410:main.c        ****                     // read raw sensor values
 411:main.c        ****                     reflectance_read(&ref);
 412:main.c        ****                     reflectance_digital(&dig); 
 413:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 414:main.c        ****                         motor_turn(50,50,0);       // motor forward
 415:main.c        ****                         //Beep(60,80);
 416:main.c        ****                     }
 417:main.c        ****                     else{
 418:main.c        ****                         motor_forward(0,0);       // Stop motors
 419:main.c        ****                         startline = false;
 420:main.c        ****                     }
 421:main.c        ****                 }
 422:main.c        ****             IR_wait();  // wait for IR command
 423:main.c        ****             led = !led;
 424:main.c        ****             BatteryLed_Write(led);   
 425:main.c        ****             
 426:main.c        ****             // Toggle led when IR signal is received
 427:main.c        ****             while(loop)
 428:main.c        ****             {   
 429:main.c        ****                 if(led){
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 9


 430:main.c        ****                     //do {
 431:main.c        ****                         // read raw sensor values
 432:main.c        ****                     //reflectance_read(&ref);
 433:main.c        ****                     reflectance_digital(&dig); 
 434:main.c        ****                     
 435:main.c        ****                    
 436:main.c        ****                         /*if(dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r3 == 1 && dig.r2 == 
 437:main.c        ****                             motor_forward(0,0);
 438:main.c        ****                             count++;
 439:main.c        ****                             if(count==1){
 440:main.c        ****                                 motor_turn(50,50,50);       // motor forward
 441:main.c        ****                             }
 442:main.c        ****                             if (count==2){
 443:main.c        ****                                 motor_turn_left(10,100,500);
 444:main.c        ****                             }
 445:main.c        ****                             if (count<=4){
 446:main.c        ****                                 motor_turn_right(100,10,500);
 447:main.c        ****                             }
 448:main.c        ****                             if (count==5){
 449:main.c        ****                                 motor_forward(0,0);       // Stop motors
 450:main.c        ****                                 led = false;
 451:main.c        ****                                 BatteryLed_Write(led);
 452:main.c        ****                             }
 453:main.c        ****                         } */
 454:main.c        ****                         if(dig.r2 == 1 && dig.r1 == 1){
 455:main.c        ****                             //count++;
 456:main.c        ****                             motor_turn(100,10,0);       // motor turn left
 457:main.c        ****                             //Beep(20,20);
 458:main.c        ****                             vTaskDelay(0);
 459:main.c        ****                             
 460:main.c        ****                             printf("count %d \n",count);
 461:main.c        ****                         }
 462:main.c        ****                         if(dig.l2 == 1 && dig.l1 == 1){
 463:main.c        ****                             //count++;
 464:main.c        ****                             motor_turn(10,100,0);       // motor turn right
 465:main.c        ****                            // Beep(20,20);
 466:main.c        ****                             vTaskDelay(0);
 467:main.c        ****                             
 468:main.c        ****                             printf("count %d \n",count);
 469:main.c        ****                         }
 470:main.c        ****                        // printf("count %d \n",count);
 471:main.c        ****                         if (dig.l1 == 1 && dig.r1 == 1){
 472:main.c        ****                             
 473:main.c        ****                             motor_turn(50,50,0);       // motor forward
 474:main.c        ****                             vTaskDelay(0);
 475:main.c        ****                             //Beep(50,50);
 476:main.c        ****                             //count++;
 477:main.c        ****                             printf("count %d \n",count);
 478:main.c        ****                         }
 479:main.c        ****                    
 480:main.c        ****                 }
 481:main.c        ****                 else {
 482:main.c        ****                     printf("Led is OFF\n");
 483:main.c        ****                     loop = false;
 484:main.c        ****                 }
 485:main.c        ****                
 486:main.c        ****             }    
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 10


 487:main.c        ****         }
 488:main.c        ****     }
 489:main.c        ****  }  
 490:main.c        **** #endif
 491:main.c        **** 
 492:main.c        **** #if 0
 493:main.c        **** //IR receiverm - how to wait for IR remote commands
 494:main.c        **** void zmain(void)
 495:main.c        **** {
 496:main.c        ****     //IR receiverm - how to wait for IR remote commands
 497:main.c        **** void zmain(void);
 498:main.c        **** 
 499:main.c        ****     uint8_t button_;
 500:main.c        ****     printf("\nStart\n");
 501:main.c        **** 
 502:main.c        ****     while(true){
 503:main.c        ****         button_ = SW1_Read();
 504:main.c        ****         if(button_==0){
 505:main.c        ****             IR_Start();
 506:main.c        ****             printf("\n\nIR test\n");
 507:main.c        ****             struct sensors_ ref;
 508:main.c        ****             struct sensors_ dig;
 509:main.c        ****             bool led = false,loop = true, startline= true;
 510:main.c        ****             int count =0;
 511:main.c        ****             motor_start();              // enable motor controller 
 512:main.c        ****             IR_flush(); // clear IR receive buffer
 513:main.c        ****             printf("Buffer cleared\n");
 514:main.c        **** 
 515:main.c        ****             reflectance_start();
 516:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 517:main.c        ****             vTaskDelay(200);
 518:main.c        ****                 while(startline){
 519:main.c        ****                     // read raw sensor values
 520:main.c        ****                     reflectance_read(&ref);
 521:main.c        ****                     reflectance_digital(&dig); 
 522:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 523:main.c        ****                         motor_turn(50,50,50);       // motor forward
 524:main.c        ****                         Beep(60,80);
 525:main.c        ****                     }
 526:main.c        **** 
 527:main.c        ****                     else{
 528:main.c        ****                         motor_forward(0,0);       // Stop motors
 529:main.c        ****                         startline = false;
 530:main.c        ****                     }
 531:main.c        ****                 }
 532:main.c        ****             IR_wait();  // wait for IR command
 533:main.c        ****             led = !led;
 534:main.c        ****             BatteryLed_Write(led);   
 535:main.c        **** 
 536:main.c        ****             // Toggle led when IR signal is received
 537:main.c        ****             while(loop)
 538:main.c        ****             {   
 539:main.c        ****                 if(led){
 540:main.c        ****                     // read raw sensor values
 541:main.c        ****                     reflectance_read(&ref);
 542:main.c        ****                     reflectance_digital(&dig); 
 543:main.c        **** 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 11


 544:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1){
 545:main.c        ****                         count++;
 546:main.c        ****                         printf("\nStart\n");
 547:main.c        ****                         printf("count %d \n",count);
 548:main.c        **** 
 549:main.c        **** 
 550:main.c        ****                         while (dig.r3 == 1 && dig.l3 == 1){
 551:main.c        ****                          motor_turn(50,49,0);
 552:main.c        ****                         reflectance_digital(&dig);
 553:main.c        ****                         }
 554:main.c        ****                         if(count >= 2){
 555:main.c        ****                             motor_forward(210,0);       // Stop motors
 556:main.c        ****                         }
 557:main.c        ****                     }
 558:main.c        **** 
 559:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 1){
 560:main.c        ****                         motor_turn(210,210,0);   //goes forward lul
 561:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 562:main.c        ****                     }
 563:main.c        ****                     else if (dig.l1 == 0 && dig.r1 == 1){
 564:main.c        ****                         motor_turn(210,0,0);  //turns right lul
 565:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 566:main.c        ****                     }
 567:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 0){
 568:main.c        ****                         motor_turn(0,210,0);   ///should turn left, right lul??   
 569:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 570:main.c        ****                     }
 571:main.c        ****                     else if (dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.l2 == 
 572:main.c        ****                         motor_turn(0,0,100000);   ///should stop, right lul??   
 573:main.c        **** 
 574:main.c        **** 
 575:main.c        ****                         }
 576:main.c        ****                     }
 577:main.c        ****                 }
 578:main.c        **** 
 579:main.c        **** 
 580:main.c        ****             }    
 581:main.c        ****         }
 582:main.c        **** 
 583:main.c        **** }   
 584:main.c        **** #endif
 585:main.c        **** 
 586:main.c        **** 
 587:main.c        **** #if 0
 588:main.c        **** //reflectance
 589:main.c        **** void zmain(void)
 590:main.c        **** {
 591:main.c        ****     struct sensors_ ref;
 592:main.c        ****     struct sensors_ dig;
 593:main.c        **** 
 594:main.c        ****     reflectance_start();
 595:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 596:main.c        ****     
 597:main.c        **** 
 598:main.c        ****     while(true)
 599:main.c        ****     {
 600:main.c        ****         // read raw sensor values
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 12


 601:main.c        ****         reflectance_read(&ref);
 602:main.c        ****         // print out each period of reflectance sensors
 603:main.c        ****         printf("%5d %5d %5d %5d %5d %5d\r\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3);     
 604:main.c        ****         
 605:main.c        ****         // read digital values that are based on threshold. 0 = white, 1 = black
 606:main.c        ****         // when blackness value is over threshold the sensors reads 1, otherwise 0
 607:main.c        ****         reflectance_digital(&dig); 
 608:main.c        ****         //print out 0 or 1 according to results of reflectance period
 609:main.c        ****         printf("%5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3);    
 610:main.c        ****         
 611:main.c        ****         vTaskDelay(200);
 612:main.c        ****     }
 613:main.c        **** }   
 614:main.c        **** #endif
 615:main.c        **** 
 616:main.c        **** 
 617:main.c        **** #if 0
 618:main.c        **** //motor
 619:main.c        **** void zmain(void)
 620:main.c        **** {
 621:main.c        ****     struct sensors_ ref;
 622:main.c        ****     struct sensors_ dig;
 623:main.c        **** 
 624:main.c        ****     reflectance_start();
 625:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 626:main.c        ****     
 627:main.c        ****     reflectance_digital(&dig);
 628:main.c        ****     
 629:main.c        ****     motor_start();              // enable motor controller
 630:main.c        ****     motor_forward(0,0);         // set speed to zero to stop motors
 631:main.c        **** 
 632:main.c        ****     vTaskDelay(3000);
 633:main.c        ****     
 634:main.c        ****     if(dig.l3, dig.l2, dig.l1){
 635:main.c        ****         
 636:main.c        ****     }
 637:main.c        ****     motor_forward(100,2000);     // moving forward
 638:main.c        ****     motor_turn(200,50,2000);     // turn
 639:main.c        ****     motor_turn(50,200,2000);     // turn
 640:main.c        ****     motor_backward(100,2000);    // moving backward
 641:main.c        ****      
 642:main.c        ****     motor_forward(0,0);         // stop motors
 643:main.c        **** 
 644:main.c        ****     motor_stop();               // disable motor controller
 645:main.c        ****     
 646:main.c        ****     while(true)
 647:main.c        ****     {
 648:main.c        ****         vTaskDelay(100);
 649:main.c        ****     }
 650:main.c        **** }
 651:main.c        **** #endif
 652:main.c        **** 
 653:main.c        **** #if 0
 654:main.c        **** /* Example of how to use te Accelerometer!!!*/
 655:main.c        **** void zmain(void)
 656:main.c        **** {
 657:main.c        ****     struct accData_ data;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 13


 658:main.c        ****     
 659:main.c        ****     printf("Accelerometer test...\n");
 660:main.c        **** 
 661:main.c        ****     if(!LSM303D_Start()){
 662:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 663:main.c        ****         vTaskSuspend(NULL);
 664:main.c        ****     }
 665:main.c        ****     else {
 666:main.c        ****         printf("Device Ok...\n");
 667:main.c        ****     }
 668:main.c        ****     motor_start();              // enable motor controller
 669:main.c        ****     motor_forward(0,0);
 670:main.c        ****     srand(time(NULL));   // Initialization, should only be called once.
 671:main.c        ****     int r=0, counter=0;
 672:main.c        ****     while(true)
 673:main.c        ****     {
 674:main.c        ****         LSM303D_Read_Acc(&data);
 675:main.c        ****        
 676:main.c        ****         motor_forward(200,20);
 677:main.c        ****         //vTaskDelay(200);
 678:main.c        ****         if (counter == 0) r = rand() % 2;
 679:main.c        ****         if (counter > 19){
 680:main.c        ****             counter = 0;
 681:main.c        ****             r = rand() % 2;
 682:main.c        ****         }// Returns a pseudo-random integer between 0 and RAND_MAX.
 683:main.c        ****             if(r == 0){
 684:main.c        ****                 motor_turn(200,50,5);
 685:main.c        ****                 vTaskDelay(0);
 686:main.c        ****                 //motor_forward(0,0);
 687:main.c        ****             }
 688:main.c        ****             else if(r == 1){
 689:main.c        ****                 motor_turn(50,200,5);
 690:main.c        ****                 vTaskDelay(0);
 691:main.c        ****                 //motor_forward(0,0);
 692:main.c        ****             }
 693:main.c        ****             else {
 694:main.c        ****                 motor_forward(200,20);
 695:main.c        ****                 vTaskDelay(0);
 696:main.c        ****             }
 697:main.c        ****         LSM303D_Read_Acc(&data);
 698:main.c        ****         if((data.accX<-4000)){
 699:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 700:main.c        ****             if(r == 0){
 701:main.c        ****                 motor_backward(80,50);
 702:main.c        ****                 motor_turn(200,50,500);
 703:main.c        ****                 vTaskDelay(0);
 704:main.c        ****                 //motor_forward(0,0);
 705:main.c        ****             }
 706:main.c        ****             else{
 707:main.c        ****                 motor_backward(80,50);
 708:main.c        ****                 motor_turn(50,200,500);
 709:main.c        ****                 vTaskDelay(0);
 710:main.c        ****                 //motor_forward(0,0);
 711:main.c        ****             }
 712:main.c        ****             motor_forward(100,100);
 713:main.c        ****         }
 714:main.c        ****         counter++;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 14


 715:main.c        ****         printf("%8d %8d %8d\n",data.accX, data.accY, data.accZ);
 716:main.c        ****         vTaskDelay(0);
 717:main.c        ****     }
 718:main.c        ****  }   
 719:main.c        **** #endif    
 720:main.c        **** 
 721:main.c        **** #if 0
 722:main.c        **** // MQTT test
 723:main.c        **** void zmain(void)
 724:main.c        **** {
 725:main.c        ****     int ctr = 0;
 726:main.c        **** 
 727:main.c        ****     printf("\nBoot\n");
 728:main.c        ****     send_mqtt("Zumo01/debug", "Boot");
 729:main.c        **** 
 730:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 731:main.c        ****     BatteryLed_Write(0); // Switch led off 
 732:main.c        **** 
 733:main.c        ****     while(true)
 734:main.c        ****     {
 735:main.c        ****         printf("Ctr: %d, Button: %d\n", ctr, SW1_Read());
 736:main.c        ****         print_mqtt("Zumo01/debug", "Ctr: %d, Button: %d", ctr, SW1_Read());
 737:main.c        **** 
 738:main.c        ****         vTaskDelay(1000);
 739:main.c        ****         ctr++;
 740:main.c        ****     }
 741:main.c        ****  }   
 742:main.c        **** #endif
 743:main.c        **** 
 744:main.c        **** #if 0
 745:main.c        **** 
 746:main.c        ****     
 747:main.c        **** void zmain(void)
 748:main.c        **** {
 749:main.c        ****     Ultra_Start();
 750:main.c        ****     motor_start(0,0);
 751:main.c        ****     motor_forward(0,0);
 752:main.c        ****     
 753:main.c        ****     vTaskDelay(3000);
 754:main.c        ****     
 755:main.c        ****     while(true){
 756:main.c        ****         int distance = Ultra_GetDistance();
 757:main.c        ****     
 758:main.c        ****         if(distance <= 10 && distance !=0){
 759:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 760:main.c        ****             if(r == 0){
 761:main.c        ****                 motor_turn(50,200,500);
 762:main.c        ****                 vTaskDelay(0);
 763:main.c        ****                 print_mqtt("Zumo006/turn", "left");
 764:main.c        ****                 //motor_forward(0,0);
 765:main.c        ****             }
 766:main.c        ****             else{
 767:main.c        ****                 motor_turn(200,50,500);
 768:main.c        ****                 vTaskDelay(0);
 769:main.c        ****                 print_mqtt("Zumo006/turn", "right");
 770:main.c        ****                 //motor_forward(0,0);
 771:main.c        ****             }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 15


 772:main.c        ****             motor_forward(100,100);
 773:main.c        ****         }
 774:main.c        ****         
 775:main.c        ****     }   
 776:main.c        **** }
 777:main.c        **** #endif
 778:main.c        **** 
 779:main.c        **** #if 0
 780:main.c        **** //IR receiverm - how to wait for IR remote commands
 781:main.c        **** void zmain(void)
 782:main.c        **** {
 783:main.c        ****     RTC_Start(); // start real time clock
 784:main.c        ****     
 785:main.c        ****     RTC_TIME_DATE now;
 786:main.c        **** 
 787:main.c        ****     time_t myTime;
 788:main.c        ****     struct tm * timeinfo;
 789:main.c        ****     time( &myTime );
 790:main.c        ****     timeinfo = localtime( &myTime );
 791:main.c        ****     
 792:main.c        ****     // set current time
 793:main.c        ****     now.Hour = timeinfo->tm_hour;
 794:main.c        ****     now.Min = timeinfo->tm_min;
 795:main.c        ****     now.Sec = timeinfo->tm_sec6;
 796:main.c        ****     now.DayOfMonth = timeinfo->tm_mday;
 797:main.c        ****     now.Month = timeinfo->tm_mon+1;
 798:main.c        ****     now.Year = timeinfo->tm_year+1900;
 799:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 800:main.c        ****     
 801:main.c        ****     uint8_t button_;
 802:main.c        ****     printf("\nStart\n");
 803:main.c        ****     
 804:main.c        ****     while(true){
 805:main.c        ****         button_ = SW1_Read();
 806:main.c        ****         if(button_==0){
 807:main.c        ****             IR_Start();
 808:main.c        ****             printf("\n\nIR test\n");
 809:main.c        ****             struct sensors_ ref;
 810:main.c        ****             struct sensors_ dig;
 811:main.c        ****             bool led = false,loop = true, startline= true;
 812:main.c        ****             int count =0;
 813:main.c        ****             motor_start();              // enable motor controller 
 814:main.c        ****             IR_flush(); // clear IR receive buffer
 815:main.c        ****             printf("Buffer cleared\n");
 816:main.c        ****             
 817:main.c        ****             reflectance_start();
 818:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 819:main.c        ****             vTaskDelay(200);
 820:main.c        ****                 while(startline){
 821:main.c        ****                     // read raw sensor values
 822:main.c        ****                     reflectance_read(&ref);
 823:main.c        ****                     reflectance_digital(&dig); 
 824:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 825:main.c        ****                         motor_turn(50,50,50);       // motor forward
 826:main.c        ****                         Beep(60,80);
 827:main.c        ****                     }
 828:main.c        ****                     else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 16


 829:main.c        ****                         motor_forward(0,0);       // Stop motors
 830:main.c        ****                         startline = false;
 831:main.c        ****                     }
 832:main.c        ****                 }
 833:main.c        ****             IR_wait();  // wait for IR command
 834:main.c        ****             led = !led;
 835:main.c        ****             BatteryLed_Write(led);   
 836:main.c        ****             
 837:main.c        ****             // Toggle led when IR signal is received
 838:main.c        ****             while(loop)
 839:main.c        ****             {   
 840:main.c        ****                 if(led){
 841:main.c        ****                     // read raw sensor values
 842:main.c        ****                     reflectance_read(&ref);
 843:main.c        ****                     reflectance_digital(&dig); 
 844:main.c        ****                     
 845:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 846:main.c        ****                         motor_turn(50,50,50);       // motor forward
 847:main.c        ****                         motor_forward(0,0);       // Stop motors
 848:main.c        ****                         vTaskDelay(50);
 849:main.c        ****                         count++;
 850:main.c        ****                         printf("count %d \n",count);
 851:main.c        ****                         printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 852:main.c        ****                         print_mqtt("Zumo006/lap", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 853:main.c        ****                         /*if(count >= 7){
 854:main.c        ****                             motor_forward(0,0);       // Stop motors
 855:main.c        ****                             loop = false;
 856:main.c        ****                         }*/
 857:main.c        ****                     }
 858:main.c        ****                     else{
 859:main.c        ****                          motor_turn(50,50,50);       // motor forward
 860:main.c        ****                         Beep(100,100);
 861:main.c        ****                     }
 862:main.c        ****                 }
 863:main.c        ****                 else {
 864:main.c        ****                     printf("Led is OFF\n");
 865:main.c        ****                     loop = false;
 866:main.c        ****                 }
 867:main.c        ****                
 868:main.c        ****             }    
 869:main.c        ****         }
 870:main.c        ****     }
 871:main.c        ****  }
 872:main.c        **** #endif
 873:main.c        **** 
 874:main.c        **** #if 0
 875:main.c        **** void zmain(void)
 876:main.c        **** {    
 877:main.c        ****     struct accData_ data;
 878:main.c        ****     struct sensors_ ref;
 879:main.c        ****     struct sensors_ dig;
 880:main.c        ****     
 881:main.c        ****     printf("MQTT and sensor test...\n");
 882:main.c        **** 
 883:main.c        ****     if(!LSM303D_Start()){
 884:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 885:main.c        ****         vTaskSuspend(NULL);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 17


 886:main.c        ****     }
 887:main.c        ****     else {
 888:main.c        ****         printf("Accelerometer Ok...\n");
 889:main.c        ****     }
 890:main.c        ****     
 891:main.c        ****     int ctr = 0;
 892:main.c        ****     reflectance_start();
 893:main.c        ****     while(true)
 894:main.c        ****     {
 895:main.c        ****         LSM303D_Read_Acc(&data);
 896:main.c        ****         // send data when we detect a hit and at 10 second intervals
 897:main.c        ****         if(data.accX > 1500 || ++ctr > 1000) {
 898:main.c        ****             printf("Acc: %8d %8d %8d\n",data.accX, data.accY, data.accZ);
 899:main.c        ****             print_mqtt("Zumo01/acc", "%d,%d,%d", data.accX, data.accY, data.accZ);
 900:main.c        ****             reflectance_read(&ref);
 901:main.c        ****             printf("Ref: %8d %8d %8d %8d %8d %8d\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3
 902:main.c        ****             print_mqtt("Zumo01/ref", "%d,%d,%d,%d,%d,%d", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, r
 903:main.c        ****             reflectance_digital(&dig);
 904:main.c        ****             printf("Dig: %8d %8d %8d %8d %8d %8d\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3
 905:main.c        ****             print_mqtt("Zumo01/dig", "%d,%d,%d,%d,%d,%d", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, d
 906:main.c        ****             ctr = 0;
 907:main.c        ****         }
 908:main.c        ****         vTaskDelay(10);
 909:main.c        ****     }
 910:main.c        ****  }   
 911:main.c        **** 
 912:main.c        **** #endif
 913:main.c        **** 
 914:main.c        **** #if 0
 915:main.c        **** void zmain(void)
 916:main.c        **** {    
 917:main.c        ****     RTC_Start(); // start real time clock
 918:main.c        ****     
 919:main.c        ****     RTC_TIME_DATE now;
 920:main.c        **** 
 921:main.c        ****     // set current time
 922:main.c        ****     now.Hour = 12;
 923:main.c        ****     now.Min = 34;
 924:main.c        ****     now.Sec = 56;
 925:main.c        ****     now.DayOfMonth = 25;
 926:main.c        ****     now.Month = 9;
 927:main.c        ****     now.Year = 2018;
 928:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 929:main.c        **** 
 930:main.c        ****     while(true)
 931:main.c        ****     {
 932:main.c        ****         if(SW1_Read() == 0) {
 933:main.c        ****             // read the current time
 934:main.c        ****             RTC_DisableInt(); // Disable Interrupt of RTC Component
 935:main.c        ****             now = *RTC_ReadTime(); // copy the current time to a local variable
 936:main.c        ****             RTC_EnableInt(); // Enable Interrupt of RTC Component
 937:main.c        **** 
 938:main.c        ****             // print the current time
 939:main.c        ****             printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 940:main.c        ****             print_mqtt("Zumo006/time", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 941:main.c        ****             
 942:main.c        ****             // wait until button is released
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 18


 943:main.c        ****             while(SW1_Read() == 0) vTaskDelay(50);
 944:main.c        ****         }
 945:main.c        ****         vTaskDelay(50);
 946:main.c        ****     }
 947:main.c        ****  }   
 948:main.c        **** #endif
 949:main.c        **** 
 950:main.c        **** #if 1
 951:main.c        **** //main project
 952:main.c        **** void zmain(void)
 953:main.c        **** {
  28              		.loc 1 953 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 8AB0     		sub	sp, sp, #40
  37              		.cfi_def_cfa_offset 48
 954:main.c        ****     struct accData_ data;
 955:main.c        ****     
 956:main.c        ****     uint8_t button_;
 957:main.c        ****     printf("\nStart\n");
  38              		.loc 1 957 0
  39 0004 6B48     		ldr	r0, .L18
  40 0006 FFF7FEFF 		bl	puts
  41              	.LVL0:
  42              	.L2:
 958:main.c        ****     
 959:main.c        ****     while(true){
 960:main.c        ****         button_ = SW1_Read();
  43              		.loc 1 960 0
  44 000a FFF7FEFF 		bl	SW1_Read
  45              	.LVL1:
 961:main.c        ****         if(button_==0){
  46              		.loc 1 961 0
  47 000e 0028     		cmp	r0, #0
  48 0010 FBD1     		bne	.L2
  49              	.LBB2:
 962:main.c        ****             IR_Start();
  50              		.loc 1 962 0
  51 0012 FFF7FEFF 		bl	IR_Start
  52              	.LVL2:
 963:main.c        ****             printf("\n\nIR test\n");
  53              		.loc 1 963 0
  54 0016 6848     		ldr	r0, .L18+4
  55 0018 FFF7FEFF 		bl	puts
  56              	.LVL3:
 964:main.c        ****             struct sensors_ ref;
 965:main.c        ****             struct sensors_ dig;
 966:main.c        ****             bool led = false,loop1 = true, startline= true, loop2 = true;
 967:main.c        ****             int count =0;
 968:main.c        ****             motor_start();              // enable motor controller
  57              		.loc 1 968 0
  58 001c FFF7FEFF 		bl	motor_start
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 19


  59              	.LVL4:
 969:main.c        ****             print_mqtt("Zumo006/ready","line");
  60              		.loc 1 969 0
  61 0020 6649     		ldr	r1, .L18+8
  62 0022 6748     		ldr	r0, .L18+12
  63 0024 FFF7FEFF 		bl	print_mqtt
  64              	.LVL5:
 970:main.c        ****             IR_flush(); // clear IR receive buffer
  65              		.loc 1 970 0
  66 0028 FFF7FEFF 		bl	IR_flush
  67              	.LVL6:
 971:main.c        ****             printf("Buffer cleared\n");
  68              		.loc 1 971 0
  69 002c 6548     		ldr	r0, .L18+16
  70 002e FFF7FEFF 		bl	puts
  71              	.LVL7:
 972:main.c        ****             
 973:main.c        ****             reflectance_start();
  72              		.loc 1 973 0
  73 0032 FFF7FEFF 		bl	reflectance_start
  74              	.LVL8:
 974:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
  75              		.loc 1 974 0
  76 0036 42F22830 		movw	r0, #9000
  77 003a 0190     		str	r0, [sp, #4]
  78 003c 0090     		str	r0, [sp]
  79 003e 42F6F823 		movw	r3, #11000
  80 0042 1A46     		mov	r2, r3
  81 0044 0146     		mov	r1, r0
  82 0046 FFF7FEFF 		bl	reflectance_set_threshold
  83              	.LVL9:
 975:main.c        ****             vTaskDelay(200);
  84              		.loc 1 975 0
  85 004a C820     		movs	r0, #200
  86 004c FFF7FEFF 		bl	vTaskDelay
  87              	.LVL10:
 966:main.c        ****             int count =0;
  88              		.loc 1 966 0
  89 0050 0124     		movs	r4, #1
 976:main.c        ****                 while(startline){
  90              		.loc 1 976 0
  91 0052 26E0     		b	.L3
  92              	.LVL11:
  93              	.L6:
 977:main.c        ****                     // read raw sensor values
 978:main.c        ****                     reflectance_read(&ref);
  94              		.loc 1 978 0
  95 0054 02A8     		add	r0, sp, #8
  96 0056 FFF7FEFF 		bl	reflectance_read
  97              	.LVL12:
 979:main.c        ****                     reflectance_digital(&dig); 
  98              		.loc 1 979 0
  99 005a 05A8     		add	r0, sp, #20
 100 005c FFF7FEFF 		bl	reflectance_digital
 101              	.LVL13:
 980:main.c        ****                     
 981:main.c        ****                     if(dig.l3 == 0 && dig.r3 == 0 && dig.l1 == 0 && dig.r1 == 0 && dig.l2==0 && dig
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 20


 102              		.loc 1 981 0
 103 0060 BDF81430 		ldrh	r3, [sp, #20]
 104 0064 A3B9     		cbnz	r3, .L4
 105              		.loc 1 981 0 is_stmt 0 discriminator 1
 106 0066 BDF81E30 		ldrh	r3, [sp, #30]
 107 006a 8BB9     		cbnz	r3, .L4
 108              		.loc 1 981 0 discriminator 2
 109 006c BDF81830 		ldrh	r3, [sp, #24]
 110 0070 73B9     		cbnz	r3, .L4
 111              		.loc 1 981 0 discriminator 3
 112 0072 BDF81A30 		ldrh	r3, [sp, #26]
 113 0076 5BB9     		cbnz	r3, .L4
 114              		.loc 1 981 0 discriminator 4
 115 0078 BDF81630 		ldrh	r3, [sp, #22]
 116 007c 43B9     		cbnz	r3, .L4
 117              		.loc 1 981 0 discriminator 5
 118 007e BDF81C30 		ldrh	r3, [sp, #28]
 119 0082 2BB9     		cbnz	r3, .L4
 982:main.c        ****                         motor_forward(0,0);       // Stop motors
 120              		.loc 1 982 0 is_stmt 1
 121 0084 0021     		movs	r1, #0
 122 0086 0846     		mov	r0, r1
 123 0088 FFF7FEFF 		bl	motor_forward
 124              	.LVL14:
 983:main.c        ****                         startline = false;
 125              		.loc 1 983 0
 126 008c 0024     		movs	r4, #0
 127 008e 08E0     		b	.L3
 128              	.LVL15:
 129              	.L4:
 984:main.c        ****                     }
 985:main.c        ****                     else{
 986:main.c        ****                         motor_turn(50,50,50);       // motor forward
 130              		.loc 1 986 0
 131 0090 3222     		movs	r2, #50
 132 0092 1146     		mov	r1, r2
 133 0094 1046     		mov	r0, r2
 134 0096 FFF7FEFF 		bl	motor_turn
 135              	.LVL16:
 987:main.c        ****                         Beep(60,80);
 136              		.loc 1 987 0
 137 009a 5021     		movs	r1, #80
 138 009c 3C20     		movs	r0, #60
 139 009e FFF7FEFF 		bl	Beep
 140              	.LVL17:
 141              	.L3:
 976:main.c        ****                     // read raw sensor values
 142              		.loc 1 976 0
 143 00a2 002C     		cmp	r4, #0
 144 00a4 D6D1     		bne	.L6
 988:main.c        ****                     }
 989:main.c        ****                 }
 990:main.c        ****             print_mqtt("Zumo006/ready","line");
 145              		.loc 1 990 0
 146 00a6 4549     		ldr	r1, .L18+8
 147 00a8 4548     		ldr	r0, .L18+12
 148 00aa FFF7FEFF 		bl	print_mqtt
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 21


 149              	.LVL18:
 991:main.c        ****             IR_wait();  // wait for IR command
 150              		.loc 1 991 0
 151 00ae FFF7FEFF 		bl	IR_wait
 152              	.LVL19:
 992:main.c        ****             CySysTickEnable();
 153              		.loc 1 992 0
 154 00b2 FFF7FEFF 		bl	CySysTickEnable
 155              	.LVL20:
 993:main.c        ****             CySysTickStart();
 156              		.loc 1 993 0
 157 00b6 FFF7FEFF 		bl	CySysTickStart
 158              	.LVL21:
 994:main.c        ****             int start = CySysTickGetValue();
 159              		.loc 1 994 0
 160 00ba FFF7FEFF 		bl	CySysTickGetValue
 161              	.LVL22:
 995:main.c        ****             print_mqtt("Zumo006/start","%d", start);
 162              		.loc 1 995 0
 163 00be 0246     		mov	r2, r0
 164 00c0 4149     		ldr	r1, .L18+20
 165 00c2 4248     		ldr	r0, .L18+24
 166              	.LVL23:
 167 00c4 FFF7FEFF 		bl	print_mqtt
 168              	.LVL24:
 996:main.c        ****             led = !led;
 997:main.c        ****             BatteryLed_Write(led);   
 169              		.loc 1 997 0
 170 00c8 0120     		movs	r0, #1
 171 00ca FFF7FEFF 		bl	BatteryLed_Write
 172              	.LVL25:
 173 00ce 66E0     		b	.L7
 174              	.LVL26:
 175              	.L12:
 176              	.LBB3:
 998:main.c        ****             
 999:main.c        ****             // Toggle led when IR signal is received
1000:main.c        ****             while(loop1)
1001:main.c        ****             {   
1002:main.c        ****                 if(led){
1003:main.c        ****                     while(loop2){
1004:main.c        ****                     // read raw sensor values
1005:main.c        ****                     reflectance_read(&ref);
1006:main.c        ****                     reflectance_digital(&dig); 
1007:main.c        **** 
1008:main.c        ****                     LSM303D_Read_Acc(&data);
1009:main.c        ****                     while(dig.l2 != 1 || dig.r2 != 1){
1010:main.c        ****                         //motor_turn(50,50,0);
1011:main.c        ****                         if(data.accX > 1500){
 177              		.loc 1 1011 0
 178 00d0 BDF92020 		ldrsh	r2, [sp, #32]
 179 00d4 40F2DC53 		movw	r3, #1500
 180 00d8 9A42     		cmp	r2, r3
 181 00da 2CDD     		ble	.L8
 182              	.LBB4:
1012:main.c        ****                             print_mqtt("Zumo006/hit","%d", CySysTickGetValue());
 183              		.loc 1 1012 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 22


 184 00dc FFF7FEFF 		bl	CySysTickGetValue
 185              	.LVL27:
 186 00e0 0246     		mov	r2, r0
 187 00e2 3949     		ldr	r1, .L18+20
 188 00e4 3A48     		ldr	r0, .L18+28
 189 00e6 FFF7FEFF 		bl	print_mqtt
 190              	.LVL28:
1013:main.c        ****                             int r = rand() % 2;      // Returns a pseudo-random integer between 0 a
 191              		.loc 1 1013 0
 192 00ea FFF7FEFF 		bl	rand
 193              	.LVL29:
 194 00ee 394C     		ldr	r4, .L18+32
 195 00f0 0440     		ands	r4, r0, r4
 196 00f2 03D5     		bpl	.L9
 197 00f4 013C     		subs	r4, r4, #1
 198 00f6 64F00104 		orn	r4, r4, #1
 199 00fa 0134     		adds	r4, r4, #1
 200              	.L9:
 201              	.LVL30:
1014:main.c        ****                             int r1 = rand() % 500;
 202              		.loc 1 1014 0
 203 00fc FFF7FEFF 		bl	rand
 204              	.LVL31:
 205 0100 354A     		ldr	r2, .L18+36
 206 0102 82FB0032 		smull	r3, r2, r2, r0
 207 0106 C317     		asrs	r3, r0, #31
 208 0108 C3EB6212 		rsb	r2, r3, r2, asr #5
 209 010c 4FF4FA73 		mov	r3, #500
 210 0110 03FB1202 		mls	r2, r3, r2, r0
 211              	.LVL32:
1015:main.c        ****                             if(r == 0){
 212              		.loc 1 1015 0
 213 0114 3CB9     		cbnz	r4, .L10
1016:main.c        ****                                 //motor_backward(80,50);
1017:main.c        ****                                 motor_turn(200,50,r1);
 214              		.loc 1 1017 0
 215 0116 3221     		movs	r1, #50
 216 0118 C820     		movs	r0, #200
 217 011a FFF7FEFF 		bl	motor_turn
 218              	.LVL33:
1018:main.c        ****                                 vTaskDelay(0);
 219              		.loc 1 1018 0
 220 011e 0020     		movs	r0, #0
 221 0120 FFF7FEFF 		bl	vTaskDelay
 222              	.LVL34:
 223 0124 0CE0     		b	.L16
 224              	.LVL35:
 225              	.L10:
1019:main.c        ****                             }
1020:main.c        ****                             else{
1021:main.c        ****                                 motor_turn(50,200,r1);
 226              		.loc 1 1021 0
 227 0126 C821     		movs	r1, #200
 228 0128 3220     		movs	r0, #50
 229 012a FFF7FEFF 		bl	motor_turn
 230              	.LVL36:
1022:main.c        ****                                 vTaskDelay(0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 23


 231              		.loc 1 1022 0
 232 012e 0020     		movs	r0, #0
 233 0130 FFF7FEFF 		bl	vTaskDelay
 234              	.LVL37:
 235 0134 04E0     		b	.L16
 236              	.LVL38:
 237              	.L8:
 238              	.LBE4:
1023:main.c        ****                             }
1024:main.c        ****                         }
1025:main.c        ****                         else{
1026:main.c        ****                             motor_turn(50,50,0);
 239              		.loc 1 1026 0
 240 0136 0022     		movs	r2, #0
 241 0138 3221     		movs	r1, #50
 242 013a 0846     		mov	r0, r1
 243 013c FFF7FEFF 		bl	motor_turn
 244              	.LVL39:
 245              	.L16:
1009:main.c        ****                         //motor_turn(50,50,0);
 246              		.loc 1 1009 0
 247 0140 BDF81630 		ldrh	r3, [sp, #22]
 248 0144 012B     		cmp	r3, #1
 249 0146 C3D1     		bne	.L12
1009:main.c        ****                         //motor_turn(50,50,0);
 250              		.loc 1 1009 0 is_stmt 0 discriminator 1
 251 0148 BDF81C30 		ldrh	r3, [sp, #28]
 252 014c 012B     		cmp	r3, #1
 253 014e BFD1     		bne	.L12
1027:main.c        ****                         }
1028:main.c        ****                         
1029:main.c        ****                     }
1030:main.c        ****                     int r2 = rand() % 1000;
 254              		.loc 1 1030 0 is_stmt 1
 255 0150 FFF7FEFF 		bl	rand
 256              	.LVL40:
 257 0154 204C     		ldr	r4, .L18+36
 258 0156 84FB0034 		smull	r3, r4, r4, r0
 259 015a C317     		asrs	r3, r0, #31
 260 015c C3EBA414 		rsb	r4, r3, r4, asr #6
 261 0160 4FF47A73 		mov	r3, #1000
 262 0164 03FB1404 		mls	r4, r3, r4, r0
 263              	.LVL41:
1031:main.c        ****                     int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_
 264              		.loc 1 1031 0
 265 0168 FFF7FEFF 		bl	rand
 266              	.LVL42:
 267 016c 194B     		ldr	r3, .L18+32
 268 016e 1840     		ands	r0, r0, r3
 269 0170 03D5     		bpl	.L13
 270 0172 0138     		subs	r0, r0, #1
 271 0174 60F00100 		orn	r0, r0, #1
 272 0178 0130     		adds	r0, r0, #1
 273              	.L13:
 274              	.LVL43:
1032:main.c        ****                     if(r==0) {
 275              		.loc 1 1032 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 24


 276 017a 40B9     		cbnz	r0, .L14
1033:main.c        ****                         motor_turn(50,200,r2);
 277              		.loc 1 1033 0
 278 017c 2246     		mov	r2, r4
 279 017e C821     		movs	r1, #200
 280 0180 3220     		movs	r0, #50
 281              	.LVL44:
 282 0182 FFF7FEFF 		bl	motor_turn
 283              	.LVL45:
1034:main.c        ****                         vTaskDelay(0);
 284              		.loc 1 1034 0
 285 0186 0020     		movs	r0, #0
 286 0188 FFF7FEFF 		bl	vTaskDelay
 287              	.LVL46:
 288 018c 07E0     		b	.L7
 289              	.LVL47:
 290              	.L14:
1035:main.c        ****                     }
1036:main.c        ****                     else {
1037:main.c        ****                         motor_turn(50,200,r2);
 291              		.loc 1 1037 0
 292 018e 2246     		mov	r2, r4
 293 0190 C821     		movs	r1, #200
 294 0192 3220     		movs	r0, #50
 295              	.LVL48:
 296 0194 FFF7FEFF 		bl	motor_turn
 297              	.LVL49:
1038:main.c        ****                         vTaskDelay(0);
 298              		.loc 1 1038 0
 299 0198 0020     		movs	r0, #0
 300 019a FFF7FEFF 		bl	vTaskDelay
 301              	.LVL50:
 302              	.L7:
1005:main.c        ****                     reflectance_digital(&dig); 
 303              		.loc 1 1005 0
 304 019e 02A8     		add	r0, sp, #8
 305 01a0 FFF7FEFF 		bl	reflectance_read
 306              	.LVL51:
1006:main.c        **** 
 307              		.loc 1 1006 0
 308 01a4 05A8     		add	r0, sp, #20
 309 01a6 FFF7FEFF 		bl	reflectance_digital
 310              	.LVL52:
1008:main.c        ****                     while(dig.l2 != 1 || dig.r2 != 1){
 311              		.loc 1 1008 0
 312 01aa 08A8     		add	r0, sp, #32
 313 01ac FFF7FEFF 		bl	LSM303D_Read_Acc
 314              	.LVL53:
1009:main.c        ****                         //motor_turn(50,50,0);
 315              		.loc 1 1009 0
 316 01b0 C6E7     		b	.L16
 317              	.L19:
 318 01b2 00BF     		.align	2
 319              	.L18:
 320 01b4 00000000 		.word	.LC0
 321 01b8 08000000 		.word	.LC1
 322 01bc 14000000 		.word	.LC2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 25


 323 01c0 1C000000 		.word	.LC3
 324 01c4 2C000000 		.word	.LC4
 325 01c8 3C000000 		.word	.LC5
 326 01cc 40000000 		.word	.LC6
 327 01d0 50000000 		.word	.LC7
 328 01d4 01000080 		.word	-2147483647
 329 01d8 D34D6210 		.word	274877907
 330              	.LBE3:
 331              	.LBE2:
 332              		.cfi_endproc
 333              	.LFE85:
 334              		.size	zmain, .-zmain
 335              		.section	.rodata.str1.4,"aMS",%progbits,1
 336              		.align	2
 337              	.LC0:
 338 0000 0A537461 		.ascii	"\012Start\000"
 338      727400
 339 0007 00       		.space	1
 340              	.LC1:
 341 0008 0A0A4952 		.ascii	"\012\012IR test\000"
 341      20746573 
 341      7400
 342 0012 0000     		.space	2
 343              	.LC2:
 344 0014 6C696E65 		.ascii	"line\000"
 344      00
 345 0019 000000   		.space	3
 346              	.LC3:
 347 001c 5A756D6F 		.ascii	"Zumo006/ready\000"
 347      3030362F 
 347      72656164 
 347      7900
 348 002a 0000     		.space	2
 349              	.LC4:
 350 002c 42756666 		.ascii	"Buffer cleared\000"
 350      65722063 
 350      6C656172 
 350      656400
 351 003b 00       		.space	1
 352              	.LC5:
 353 003c 256400   		.ascii	"%d\000"
 354 003f 00       		.space	1
 355              	.LC6:
 356 0040 5A756D6F 		.ascii	"Zumo006/start\000"
 356      3030362F 
 356      73746172 
 356      7400
 357 004e 0000     		.space	2
 358              	.LC7:
 359 0050 5A756D6F 		.ascii	"Zumo006/hit\000"
 359      3030362F 
 359      68697400 
 360              		.text
 361              	.Letext0:
 362              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 363              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 364              		.file 4 ".\\ZumoLibrary/Reflectance.h"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 26


 365              		.file 5 ".\\ZumoLibrary/LSM303D.h"
 366              		.file 6 "Generated_Source\\PSoC5/CyLib.h"
 367              		.file 7 ".\\ZumoLibrary/mqtt_sender.h"
 368              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 369              		.file 9 ".\\ZumoLibrary/Motor.h"
 370              		.file 10 "..\\FreeRTOS\\Source\\include/task.h"
 371              		.file 11 ".\\ZumoLibrary/IR.h"
 372              		.file 12 ".\\ZumoLibrary/Beep.h"
 373              		.file 13 "Generated_Source\\PSoC5/BatteryLed.h"
 374              		.file 14 "Generated_Source\\PSoC5/SW1.h"
 375              		.file 15 "Generated_Source\\PSoC5/core_cm3.h"
 376              		.file 16 "<built-in>"
 377              		.section	.debug_info,"",%progbits
 378              	.Ldebug_info0:
 379 0000 AF060000 		.4byte	0x6af
 380 0004 0400     		.2byte	0x4
 381 0006 00000000 		.4byte	.Ldebug_abbrev0
 382 000a 04       		.byte	0x4
 383 000b 01       		.uleb128 0x1
 384 000c D3020000 		.4byte	.LASF55
 385 0010 0C       		.byte	0xc
 386 0011 49020000 		.4byte	.LASF56
 387 0015 42000000 		.4byte	.LASF57
 388 0019 00000000 		.4byte	.Ldebug_ranges0+0
 389 001d 00000000 		.4byte	0
 390 0021 00000000 		.4byte	.Ldebug_line0
 391 0025 02       		.uleb128 0x2
 392 0026 01       		.byte	0x1
 393 0027 06       		.byte	0x6
 394 0028 85010000 		.4byte	.LASF0
 395 002c 03       		.uleb128 0x3
 396 002d 25010000 		.4byte	.LASF2
 397 0031 02       		.byte	0x2
 398 0032 1D       		.byte	0x1d
 399 0033 37000000 		.4byte	0x37
 400 0037 02       		.uleb128 0x2
 401 0038 01       		.byte	0x1
 402 0039 08       		.byte	0x8
 403 003a 5D010000 		.4byte	.LASF1
 404 003e 03       		.uleb128 0x3
 405 003f AD020000 		.4byte	.LASF3
 406 0043 02       		.byte	0x2
 407 0044 29       		.byte	0x29
 408 0045 49000000 		.4byte	0x49
 409 0049 02       		.uleb128 0x2
 410 004a 02       		.byte	0x2
 411 004b 05       		.byte	0x5
 412 004c 15000000 		.4byte	.LASF4
 413 0050 03       		.uleb128 0x3
 414 0051 37000000 		.4byte	.LASF5
 415 0055 02       		.byte	0x2
 416 0056 2B       		.byte	0x2b
 417 0057 5B000000 		.4byte	0x5b
 418 005b 02       		.uleb128 0x2
 419 005c 02       		.byte	0x2
 420 005d 07       		.byte	0x7
 421 005e F4010000 		.4byte	.LASF6
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 27


 422 0062 03       		.uleb128 0x3
 423 0063 92020000 		.4byte	.LASF7
 424 0067 02       		.byte	0x2
 425 0068 3F       		.byte	0x3f
 426 0069 6D000000 		.4byte	0x6d
 427 006d 02       		.uleb128 0x2
 428 006e 04       		.byte	0x4
 429 006f 05       		.byte	0x5
 430 0070 01010000 		.4byte	.LASF8
 431 0074 02       		.uleb128 0x2
 432 0075 04       		.byte	0x4
 433 0076 07       		.byte	0x7
 434 0077 50020000 		.4byte	.LASF9
 435 007b 02       		.uleb128 0x2
 436 007c 08       		.byte	0x8
 437 007d 05       		.byte	0x5
 438 007e DF000000 		.4byte	.LASF10
 439 0082 02       		.uleb128 0x2
 440 0083 08       		.byte	0x8
 441 0084 07       		.byte	0x7
 442 0085 A2010000 		.4byte	.LASF11
 443 0089 04       		.uleb128 0x4
 444 008a 04       		.byte	0x4
 445 008b 05       		.byte	0x5
 446 008c 696E7400 		.ascii	"int\000"
 447 0090 02       		.uleb128 0x2
 448 0091 04       		.byte	0x4
 449 0092 07       		.byte	0x7
 450 0093 CD010000 		.4byte	.LASF12
 451 0097 03       		.uleb128 0x3
 452 0098 99000000 		.4byte	.LASF13
 453 009c 03       		.byte	0x3
 454 009d 18       		.byte	0x18
 455 009e 2C000000 		.4byte	0x2c
 456 00a2 03       		.uleb128 0x3
 457 00a3 22020000 		.4byte	.LASF14
 458 00a7 03       		.byte	0x3
 459 00a8 20       		.byte	0x20
 460 00a9 3E000000 		.4byte	0x3e
 461 00ad 03       		.uleb128 0x3
 462 00ae DA010000 		.4byte	.LASF15
 463 00b2 03       		.byte	0x3
 464 00b3 24       		.byte	0x24
 465 00b4 50000000 		.4byte	0x50
 466 00b8 03       		.uleb128 0x3
 467 00b9 1A020000 		.4byte	.LASF16
 468 00bd 03       		.byte	0x3
 469 00be 2C       		.byte	0x2c
 470 00bf 62000000 		.4byte	0x62
 471 00c3 02       		.uleb128 0x2
 472 00c4 04       		.byte	0x4
 473 00c5 04       		.byte	0x4
 474 00c6 D9000000 		.4byte	.LASF17
 475 00ca 02       		.uleb128 0x2
 476 00cb 08       		.byte	0x8
 477 00cc 04       		.byte	0x4
 478 00cd 62020000 		.4byte	.LASF18
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 28


 479 00d1 02       		.uleb128 0x2
 480 00d2 01       		.byte	0x1
 481 00d3 08       		.byte	0x8
 482 00d4 15020000 		.4byte	.LASF19
 483 00d8 02       		.uleb128 0x2
 484 00d9 08       		.byte	0x8
 485 00da 04       		.byte	0x4
 486 00db 38010000 		.4byte	.LASF20
 487 00df 02       		.uleb128 0x2
 488 00e0 04       		.byte	0x4
 489 00e1 07       		.byte	0x7
 490 00e2 1F000000 		.4byte	.LASF21
 491 00e6 05       		.uleb128 0x5
 492 00e7 90000000 		.4byte	.LASF22
 493 00eb 0C       		.byte	0xc
 494 00ec 04       		.byte	0x4
 495 00ed 0E       		.byte	0xe
 496 00ee 35010000 		.4byte	0x135
 497 00f2 06       		.uleb128 0x6
 498 00f3 6C3300   		.ascii	"l3\000"
 499 00f6 04       		.byte	0x4
 500 00f7 0F       		.byte	0xf
 501 00f8 AD000000 		.4byte	0xad
 502 00fc 00       		.byte	0
 503 00fd 06       		.uleb128 0x6
 504 00fe 6C3200   		.ascii	"l2\000"
 505 0101 04       		.byte	0x4
 506 0102 10       		.byte	0x10
 507 0103 AD000000 		.4byte	0xad
 508 0107 02       		.byte	0x2
 509 0108 06       		.uleb128 0x6
 510 0109 6C3100   		.ascii	"l1\000"
 511 010c 04       		.byte	0x4
 512 010d 11       		.byte	0x11
 513 010e AD000000 		.4byte	0xad
 514 0112 04       		.byte	0x4
 515 0113 06       		.uleb128 0x6
 516 0114 723100   		.ascii	"r1\000"
 517 0117 04       		.byte	0x4
 518 0118 12       		.byte	0x12
 519 0119 AD000000 		.4byte	0xad
 520 011d 06       		.byte	0x6
 521 011e 06       		.uleb128 0x6
 522 011f 723200   		.ascii	"r2\000"
 523 0122 04       		.byte	0x4
 524 0123 13       		.byte	0x13
 525 0124 AD000000 		.4byte	0xad
 526 0128 08       		.byte	0x8
 527 0129 06       		.uleb128 0x6
 528 012a 723300   		.ascii	"r3\000"
 529 012d 04       		.byte	0x4
 530 012e 14       		.byte	0x14
 531 012f AD000000 		.4byte	0xad
 532 0133 0A       		.byte	0xa
 533 0134 00       		.byte	0
 534 0135 05       		.uleb128 0x5
 535 0136 1C010000 		.4byte	.LASF23
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 29


 536 013a 06       		.byte	0x6
 537 013b 05       		.byte	0x5
 538 013c 47       		.byte	0x47
 539 013d 66010000 		.4byte	0x166
 540 0141 07       		.uleb128 0x7
 541 0142 28000000 		.4byte	.LASF24
 542 0146 05       		.byte	0x5
 543 0147 49       		.byte	0x49
 544 0148 A2000000 		.4byte	0xa2
 545 014c 00       		.byte	0
 546 014d 07       		.uleb128 0x7
 547 014e 2D000000 		.4byte	.LASF25
 548 0152 05       		.byte	0x5
 549 0153 4A       		.byte	0x4a
 550 0154 A2000000 		.4byte	0xa2
 551 0158 02       		.byte	0x2
 552 0159 07       		.uleb128 0x7
 553 015a 32000000 		.4byte	.LASF26
 554 015e 05       		.byte	0x5
 555 015f 4B       		.byte	0x4b
 556 0160 A2000000 		.4byte	0xa2
 557 0164 04       		.byte	0x4
 558 0165 00       		.byte	0
 559 0166 08       		.uleb128 0x8
 560 0167 8C020000 		.4byte	.LASF58
 561 016b 01       		.byte	0x1
 562 016c B803     		.2byte	0x3b8
 563 016e 00000000 		.4byte	.LFB85
 564 0172 DC010000 		.4byte	.LFE85-.LFB85
 565 0176 01       		.uleb128 0x1
 566 0177 9C       		.byte	0x9c
 567 0178 AE050000 		.4byte	0x5ae
 568 017c 09       		.uleb128 0x9
 569 017d 3B020000 		.4byte	.LASF27
 570 0181 01       		.byte	0x1
 571 0182 BA03     		.2byte	0x3ba
 572 0184 35010000 		.4byte	0x135
 573 0188 02       		.uleb128 0x2
 574 0189 91       		.byte	0x91
 575 018a 70       		.sleb128 -16
 576 018b 0A       		.uleb128 0xa
 577 018c 84020000 		.4byte	.LASF28
 578 0190 01       		.byte	0x1
 579 0191 BC03     		.2byte	0x3bc
 580 0193 97000000 		.4byte	0x97
 581 0197 00000000 		.4byte	.LLST0
 582 019b 0B       		.uleb128 0xb
 583 019c 12000000 		.4byte	.LBB2
 584 01a0 CA010000 		.4byte	.LBE2-.LBB2
 585 01a4 8D050000 		.4byte	0x58d
 586 01a8 0C       		.uleb128 0xc
 587 01a9 72656600 		.ascii	"ref\000"
 588 01ad 01       		.byte	0x1
 589 01ae C403     		.2byte	0x3c4
 590 01b0 E6000000 		.4byte	0xe6
 591 01b4 02       		.uleb128 0x2
 592 01b5 91       		.byte	0x91
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 30


 593 01b6 58       		.sleb128 -40
 594 01b7 0C       		.uleb128 0xc
 595 01b8 64696700 		.ascii	"dig\000"
 596 01bc 01       		.byte	0x1
 597 01bd C503     		.2byte	0x3c5
 598 01bf E6000000 		.4byte	0xe6
 599 01c3 02       		.uleb128 0x2
 600 01c4 91       		.byte	0x91
 601 01c5 64       		.sleb128 -28
 602 01c6 0D       		.uleb128 0xd
 603 01c7 6C656400 		.ascii	"led\000"
 604 01cb 01       		.byte	0x1
 605 01cc C603     		.2byte	0x3c6
 606 01ce AE050000 		.4byte	0x5ae
 607 01d2 13000000 		.4byte	.LLST1
 608 01d6 0E       		.uleb128 0xe
 609 01d7 A1000000 		.4byte	.LASF29
 610 01db 01       		.byte	0x1
 611 01dc C603     		.2byte	0x3c6
 612 01de AE050000 		.4byte	0x5ae
 613 01e2 01       		.byte	0x1
 614 01e3 0A       		.uleb128 0xa
 615 01e4 A7000000 		.4byte	.LASF30
 616 01e8 01       		.byte	0x1
 617 01e9 C603     		.2byte	0x3c6
 618 01eb AE050000 		.4byte	0x5ae
 619 01ef 33000000 		.4byte	.LLST2
 620 01f3 0E       		.uleb128 0xe
 621 01f4 E3010000 		.4byte	.LASF31
 622 01f8 01       		.byte	0x1
 623 01f9 C603     		.2byte	0x3c6
 624 01fb AE050000 		.4byte	0x5ae
 625 01ff 01       		.byte	0x1
 626 0200 0E       		.uleb128 0xe
 627 0201 BC000000 		.4byte	.LASF32
 628 0205 01       		.byte	0x1
 629 0206 C703     		.2byte	0x3c7
 630 0208 89000000 		.4byte	0x89
 631 020c 00       		.byte	0
 632 020d 0A       		.uleb128 0xa
 633 020e EE010000 		.4byte	.LASF33
 634 0212 01       		.byte	0x1
 635 0213 E203     		.2byte	0x3e2
 636 0215 89000000 		.4byte	0x89
 637 0219 69000000 		.4byte	.LLST3
 638 021d 0F       		.uleb128 0xf
 639 021e 656E6400 		.ascii	"end\000"
 640 0222 01       		.byte	0x1
 641 0223 1404     		.2byte	0x414
 642 0225 89000000 		.4byte	0x89
 643 0229 0B       		.uleb128 0xb
 644 022a D0000000 		.4byte	.LBB3
 645 022e 0C010000 		.4byte	.LBE3-.LBB3
 646 0232 DF030000 		.4byte	0x3df
 647 0236 0D       		.uleb128 0xd
 648 0237 723200   		.ascii	"r2\000"
 649 023a 01       		.byte	0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 31


 650 023b 0604     		.2byte	0x406
 651 023d 89000000 		.4byte	0x89
 652 0241 87000000 		.4byte	.LLST4
 653 0245 0D       		.uleb128 0xd
 654 0246 7200     		.ascii	"r\000"
 655 0248 01       		.byte	0x1
 656 0249 0704     		.2byte	0x407
 657 024b 89000000 		.4byte	0x89
 658 024f 9A000000 		.4byte	.LLST5
 659 0253 0B       		.uleb128 0xb
 660 0254 DC000000 		.4byte	.LBB4
 661 0258 5A000000 		.4byte	.LBE4-.LBB4
 662 025c 0F030000 		.4byte	0x30f
 663 0260 0D       		.uleb128 0xd
 664 0261 7200     		.ascii	"r\000"
 665 0263 01       		.byte	0x1
 666 0264 F503     		.2byte	0x3f5
 667 0266 89000000 		.4byte	0x89
 668 026a B8000000 		.4byte	.LLST6
 669 026e 0D       		.uleb128 0xd
 670 026f 723100   		.ascii	"r1\000"
 671 0272 01       		.byte	0x1
 672 0273 F603     		.2byte	0x3f6
 673 0275 89000000 		.4byte	0x89
 674 0279 CB000000 		.4byte	.LLST7
 675 027d 10       		.uleb128 0x10
 676 027e E0000000 		.4byte	.LVL27
 677 0282 C6050000 		.4byte	0x5c6
 678 0286 11       		.uleb128 0x11
 679 0287 EA000000 		.4byte	.LVL28
 680 028b D1050000 		.4byte	0x5d1
 681 028f A6020000 		.4byte	0x2a6
 682 0293 12       		.uleb128 0x12
 683 0294 01       		.uleb128 0x1
 684 0295 50       		.byte	0x50
 685 0296 05       		.uleb128 0x5
 686 0297 03       		.byte	0x3
 687 0298 50000000 		.4byte	.LC7
 688 029c 12       		.uleb128 0x12
 689 029d 01       		.uleb128 0x1
 690 029e 51       		.byte	0x51
 691 029f 05       		.uleb128 0x5
 692 02a0 03       		.byte	0x3
 693 02a1 3C000000 		.4byte	.LC5
 694 02a5 00       		.byte	0
 695 02a6 10       		.uleb128 0x10
 696 02a7 EE000000 		.4byte	.LVL29
 697 02ab DC050000 		.4byte	0x5dc
 698 02af 10       		.uleb128 0x10
 699 02b0 00010000 		.4byte	.LVL31
 700 02b4 DC050000 		.4byte	0x5dc
 701 02b8 11       		.uleb128 0x11
 702 02b9 1E010000 		.4byte	.LVL33
 703 02bd E7050000 		.4byte	0x5e7
 704 02c1 D2020000 		.4byte	0x2d2
 705 02c5 12       		.uleb128 0x12
 706 02c6 01       		.uleb128 0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 32


 707 02c7 50       		.byte	0x50
 708 02c8 02       		.uleb128 0x2
 709 02c9 09       		.byte	0x9
 710 02ca C8       		.byte	0xc8
 711 02cb 12       		.uleb128 0x12
 712 02cc 01       		.uleb128 0x1
 713 02cd 51       		.byte	0x51
 714 02ce 02       		.uleb128 0x2
 715 02cf 08       		.byte	0x8
 716 02d0 32       		.byte	0x32
 717 02d1 00       		.byte	0
 718 02d2 11       		.uleb128 0x11
 719 02d3 24010000 		.4byte	.LVL34
 720 02d7 F2050000 		.4byte	0x5f2
 721 02db E5020000 		.4byte	0x2e5
 722 02df 12       		.uleb128 0x12
 723 02e0 01       		.uleb128 0x1
 724 02e1 50       		.byte	0x50
 725 02e2 01       		.uleb128 0x1
 726 02e3 30       		.byte	0x30
 727 02e4 00       		.byte	0
 728 02e5 11       		.uleb128 0x11
 729 02e6 2E010000 		.4byte	.LVL36
 730 02ea E7050000 		.4byte	0x5e7
 731 02ee FF020000 		.4byte	0x2ff
 732 02f2 12       		.uleb128 0x12
 733 02f3 01       		.uleb128 0x1
 734 02f4 50       		.byte	0x50
 735 02f5 02       		.uleb128 0x2
 736 02f6 08       		.byte	0x8
 737 02f7 32       		.byte	0x32
 738 02f8 12       		.uleb128 0x12
 739 02f9 01       		.uleb128 0x1
 740 02fa 51       		.byte	0x51
 741 02fb 02       		.uleb128 0x2
 742 02fc 09       		.byte	0x9
 743 02fd C8       		.byte	0xc8
 744 02fe 00       		.byte	0
 745 02ff 13       		.uleb128 0x13
 746 0300 34010000 		.4byte	.LVL37
 747 0304 F2050000 		.4byte	0x5f2
 748 0308 12       		.uleb128 0x12
 749 0309 01       		.uleb128 0x1
 750 030a 50       		.byte	0x50
 751 030b 01       		.uleb128 0x1
 752 030c 30       		.byte	0x30
 753 030d 00       		.byte	0
 754 030e 00       		.byte	0
 755 030f 11       		.uleb128 0x11
 756 0310 40010000 		.4byte	.LVL39
 757 0314 E7050000 		.4byte	0x5e7
 758 0318 2E030000 		.4byte	0x32e
 759 031c 12       		.uleb128 0x12
 760 031d 01       		.uleb128 0x1
 761 031e 50       		.byte	0x50
 762 031f 02       		.uleb128 0x2
 763 0320 08       		.byte	0x8
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 33


 764 0321 32       		.byte	0x32
 765 0322 12       		.uleb128 0x12
 766 0323 01       		.uleb128 0x1
 767 0324 51       		.byte	0x51
 768 0325 02       		.uleb128 0x2
 769 0326 08       		.byte	0x8
 770 0327 32       		.byte	0x32
 771 0328 12       		.uleb128 0x12
 772 0329 01       		.uleb128 0x1
 773 032a 52       		.byte	0x52
 774 032b 01       		.uleb128 0x1
 775 032c 30       		.byte	0x30
 776 032d 00       		.byte	0
 777 032e 10       		.uleb128 0x10
 778 032f 54010000 		.4byte	.LVL40
 779 0333 DC050000 		.4byte	0x5dc
 780 0337 10       		.uleb128 0x10
 781 0338 6C010000 		.4byte	.LVL42
 782 033c DC050000 		.4byte	0x5dc
 783 0340 11       		.uleb128 0x11
 784 0341 86010000 		.4byte	.LVL45
 785 0345 E7050000 		.4byte	0x5e7
 786 0349 60030000 		.4byte	0x360
 787 034d 12       		.uleb128 0x12
 788 034e 01       		.uleb128 0x1
 789 034f 50       		.byte	0x50
 790 0350 02       		.uleb128 0x2
 791 0351 08       		.byte	0x8
 792 0352 32       		.byte	0x32
 793 0353 12       		.uleb128 0x12
 794 0354 01       		.uleb128 0x1
 795 0355 51       		.byte	0x51
 796 0356 02       		.uleb128 0x2
 797 0357 09       		.byte	0x9
 798 0358 C8       		.byte	0xc8
 799 0359 12       		.uleb128 0x12
 800 035a 01       		.uleb128 0x1
 801 035b 52       		.byte	0x52
 802 035c 02       		.uleb128 0x2
 803 035d 74       		.byte	0x74
 804 035e 00       		.sleb128 0
 805 035f 00       		.byte	0
 806 0360 11       		.uleb128 0x11
 807 0361 8C010000 		.4byte	.LVL46
 808 0365 F2050000 		.4byte	0x5f2
 809 0369 73030000 		.4byte	0x373
 810 036d 12       		.uleb128 0x12
 811 036e 01       		.uleb128 0x1
 812 036f 50       		.byte	0x50
 813 0370 01       		.uleb128 0x1
 814 0371 30       		.byte	0x30
 815 0372 00       		.byte	0
 816 0373 11       		.uleb128 0x11
 817 0374 98010000 		.4byte	.LVL49
 818 0378 E7050000 		.4byte	0x5e7
 819 037c 93030000 		.4byte	0x393
 820 0380 12       		.uleb128 0x12
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 34


 821 0381 01       		.uleb128 0x1
 822 0382 50       		.byte	0x50
 823 0383 02       		.uleb128 0x2
 824 0384 08       		.byte	0x8
 825 0385 32       		.byte	0x32
 826 0386 12       		.uleb128 0x12
 827 0387 01       		.uleb128 0x1
 828 0388 51       		.byte	0x51
 829 0389 02       		.uleb128 0x2
 830 038a 09       		.byte	0x9
 831 038b C8       		.byte	0xc8
 832 038c 12       		.uleb128 0x12
 833 038d 01       		.uleb128 0x1
 834 038e 52       		.byte	0x52
 835 038f 02       		.uleb128 0x2
 836 0390 74       		.byte	0x74
 837 0391 00       		.sleb128 0
 838 0392 00       		.byte	0
 839 0393 11       		.uleb128 0x11
 840 0394 9E010000 		.4byte	.LVL50
 841 0398 F2050000 		.4byte	0x5f2
 842 039c A6030000 		.4byte	0x3a6
 843 03a0 12       		.uleb128 0x12
 844 03a1 01       		.uleb128 0x1
 845 03a2 50       		.byte	0x50
 846 03a3 01       		.uleb128 0x1
 847 03a4 30       		.byte	0x30
 848 03a5 00       		.byte	0
 849 03a6 11       		.uleb128 0x11
 850 03a7 A4010000 		.4byte	.LVL51
 851 03ab FE050000 		.4byte	0x5fe
 852 03af BA030000 		.4byte	0x3ba
 853 03b3 12       		.uleb128 0x12
 854 03b4 01       		.uleb128 0x1
 855 03b5 50       		.byte	0x50
 856 03b6 02       		.uleb128 0x2
 857 03b7 91       		.byte	0x91
 858 03b8 58       		.sleb128 -40
 859 03b9 00       		.byte	0
 860 03ba 11       		.uleb128 0x11
 861 03bb AA010000 		.4byte	.LVL52
 862 03bf 09060000 		.4byte	0x609
 863 03c3 CE030000 		.4byte	0x3ce
 864 03c7 12       		.uleb128 0x12
 865 03c8 01       		.uleb128 0x1
 866 03c9 50       		.byte	0x50
 867 03ca 02       		.uleb128 0x2
 868 03cb 91       		.byte	0x91
 869 03cc 64       		.sleb128 -28
 870 03cd 00       		.byte	0
 871 03ce 13       		.uleb128 0x13
 872 03cf B0010000 		.4byte	.LVL53
 873 03d3 14060000 		.4byte	0x614
 874 03d7 12       		.uleb128 0x12
 875 03d8 01       		.uleb128 0x1
 876 03d9 50       		.byte	0x50
 877 03da 02       		.uleb128 0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 35


 878 03db 91       		.byte	0x91
 879 03dc 70       		.sleb128 -16
 880 03dd 00       		.byte	0
 881 03de 00       		.byte	0
 882 03df 10       		.uleb128 0x10
 883 03e0 16000000 		.4byte	.LVL2
 884 03e4 1F060000 		.4byte	0x61f
 885 03e8 11       		.uleb128 0x11
 886 03e9 1C000000 		.4byte	.LVL3
 887 03ed 2A060000 		.4byte	0x62a
 888 03f1 FF030000 		.4byte	0x3ff
 889 03f5 12       		.uleb128 0x12
 890 03f6 01       		.uleb128 0x1
 891 03f7 50       		.byte	0x50
 892 03f8 05       		.uleb128 0x5
 893 03f9 03       		.byte	0x3
 894 03fa 08000000 		.4byte	.LC1
 895 03fe 00       		.byte	0
 896 03ff 10       		.uleb128 0x10
 897 0400 20000000 		.4byte	.LVL4
 898 0404 39060000 		.4byte	0x639
 899 0408 11       		.uleb128 0x11
 900 0409 28000000 		.4byte	.LVL5
 901 040d D1050000 		.4byte	0x5d1
 902 0411 28040000 		.4byte	0x428
 903 0415 12       		.uleb128 0x12
 904 0416 01       		.uleb128 0x1
 905 0417 50       		.byte	0x50
 906 0418 05       		.uleb128 0x5
 907 0419 03       		.byte	0x3
 908 041a 1C000000 		.4byte	.LC3
 909 041e 12       		.uleb128 0x12
 910 041f 01       		.uleb128 0x1
 911 0420 51       		.byte	0x51
 912 0421 05       		.uleb128 0x5
 913 0422 03       		.byte	0x3
 914 0423 14000000 		.4byte	.LC2
 915 0427 00       		.byte	0
 916 0428 10       		.uleb128 0x10
 917 0429 2C000000 		.4byte	.LVL6
 918 042d 44060000 		.4byte	0x644
 919 0431 11       		.uleb128 0x11
 920 0432 32000000 		.4byte	.LVL7
 921 0436 2A060000 		.4byte	0x62a
 922 043a 48040000 		.4byte	0x448
 923 043e 12       		.uleb128 0x12
 924 043f 01       		.uleb128 0x1
 925 0440 50       		.byte	0x50
 926 0441 05       		.uleb128 0x5
 927 0442 03       		.byte	0x3
 928 0443 2C000000 		.4byte	.LC4
 929 0447 00       		.byte	0
 930 0448 10       		.uleb128 0x10
 931 0449 36000000 		.4byte	.LVL8
 932 044d 4F060000 		.4byte	0x64f
 933 0451 11       		.uleb128 0x11
 934 0452 4A000000 		.4byte	.LVL9
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 36


 935 0456 5A060000 		.4byte	0x65a
 936 045a 8B040000 		.4byte	0x48b
 937 045e 12       		.uleb128 0x12
 938 045f 01       		.uleb128 0x1
 939 0460 50       		.byte	0x50
 940 0461 03       		.uleb128 0x3
 941 0462 0A       		.byte	0xa
 942 0463 2823     		.2byte	0x2328
 943 0465 12       		.uleb128 0x12
 944 0466 01       		.uleb128 0x1
 945 0467 51       		.byte	0x51
 946 0468 03       		.uleb128 0x3
 947 0469 0A       		.byte	0xa
 948 046a 2823     		.2byte	0x2328
 949 046c 12       		.uleb128 0x12
 950 046d 01       		.uleb128 0x1
 951 046e 52       		.byte	0x52
 952 046f 03       		.uleb128 0x3
 953 0470 0A       		.byte	0xa
 954 0471 F82A     		.2byte	0x2af8
 955 0473 12       		.uleb128 0x12
 956 0474 01       		.uleb128 0x1
 957 0475 53       		.byte	0x53
 958 0476 03       		.uleb128 0x3
 959 0477 0A       		.byte	0xa
 960 0478 F82A     		.2byte	0x2af8
 961 047a 12       		.uleb128 0x12
 962 047b 02       		.uleb128 0x2
 963 047c 7D       		.byte	0x7d
 964 047d 00       		.sleb128 0
 965 047e 03       		.uleb128 0x3
 966 047f 0A       		.byte	0xa
 967 0480 2823     		.2byte	0x2328
 968 0482 12       		.uleb128 0x12
 969 0483 02       		.uleb128 0x2
 970 0484 7D       		.byte	0x7d
 971 0485 04       		.sleb128 4
 972 0486 03       		.uleb128 0x3
 973 0487 0A       		.byte	0xa
 974 0488 2823     		.2byte	0x2328
 975 048a 00       		.byte	0
 976 048b 11       		.uleb128 0x11
 977 048c 50000000 		.4byte	.LVL10
 978 0490 F2050000 		.4byte	0x5f2
 979 0494 9F040000 		.4byte	0x49f
 980 0498 12       		.uleb128 0x12
 981 0499 01       		.uleb128 0x1
 982 049a 50       		.byte	0x50
 983 049b 02       		.uleb128 0x2
 984 049c 08       		.byte	0x8
 985 049d C8       		.byte	0xc8
 986 049e 00       		.byte	0
 987 049f 11       		.uleb128 0x11
 988 04a0 5A000000 		.4byte	.LVL12
 989 04a4 FE050000 		.4byte	0x5fe
 990 04a8 B3040000 		.4byte	0x4b3
 991 04ac 12       		.uleb128 0x12
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 37


 992 04ad 01       		.uleb128 0x1
 993 04ae 50       		.byte	0x50
 994 04af 02       		.uleb128 0x2
 995 04b0 91       		.byte	0x91
 996 04b1 58       		.sleb128 -40
 997 04b2 00       		.byte	0
 998 04b3 11       		.uleb128 0x11
 999 04b4 60000000 		.4byte	.LVL13
 1000 04b8 09060000 		.4byte	0x609
 1001 04bc C7040000 		.4byte	0x4c7
 1002 04c0 12       		.uleb128 0x12
 1003 04c1 01       		.uleb128 0x1
 1004 04c2 50       		.byte	0x50
 1005 04c3 02       		.uleb128 0x2
 1006 04c4 91       		.byte	0x91
 1007 04c5 64       		.sleb128 -28
 1008 04c6 00       		.byte	0
 1009 04c7 11       		.uleb128 0x11
 1010 04c8 8C000000 		.4byte	.LVL14
 1011 04cc 65060000 		.4byte	0x665
 1012 04d0 DF040000 		.4byte	0x4df
 1013 04d4 12       		.uleb128 0x12
 1014 04d5 01       		.uleb128 0x1
 1015 04d6 50       		.byte	0x50
 1016 04d7 01       		.uleb128 0x1
 1017 04d8 30       		.byte	0x30
 1018 04d9 12       		.uleb128 0x12
 1019 04da 01       		.uleb128 0x1
 1020 04db 51       		.byte	0x51
 1021 04dc 01       		.uleb128 0x1
 1022 04dd 30       		.byte	0x30
 1023 04de 00       		.byte	0
 1024 04df 11       		.uleb128 0x11
 1025 04e0 9A000000 		.4byte	.LVL16
 1026 04e4 E7050000 		.4byte	0x5e7
 1027 04e8 FF040000 		.4byte	0x4ff
 1028 04ec 12       		.uleb128 0x12
 1029 04ed 01       		.uleb128 0x1
 1030 04ee 50       		.byte	0x50
 1031 04ef 02       		.uleb128 0x2
 1032 04f0 08       		.byte	0x8
 1033 04f1 32       		.byte	0x32
 1034 04f2 12       		.uleb128 0x12
 1035 04f3 01       		.uleb128 0x1
 1036 04f4 51       		.byte	0x51
 1037 04f5 02       		.uleb128 0x2
 1038 04f6 08       		.byte	0x8
 1039 04f7 32       		.byte	0x32
 1040 04f8 12       		.uleb128 0x12
 1041 04f9 01       		.uleb128 0x1
 1042 04fa 52       		.byte	0x52
 1043 04fb 02       		.uleb128 0x2
 1044 04fc 08       		.byte	0x8
 1045 04fd 32       		.byte	0x32
 1046 04fe 00       		.byte	0
 1047 04ff 11       		.uleb128 0x11
 1048 0500 A2000000 		.4byte	.LVL17
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 38


 1049 0504 70060000 		.4byte	0x670
 1050 0508 19050000 		.4byte	0x519
 1051 050c 12       		.uleb128 0x12
 1052 050d 01       		.uleb128 0x1
 1053 050e 50       		.byte	0x50
 1054 050f 02       		.uleb128 0x2
 1055 0510 08       		.byte	0x8
 1056 0511 3C       		.byte	0x3c
 1057 0512 12       		.uleb128 0x12
 1058 0513 01       		.uleb128 0x1
 1059 0514 51       		.byte	0x51
 1060 0515 02       		.uleb128 0x2
 1061 0516 08       		.byte	0x8
 1062 0517 50       		.byte	0x50
 1063 0518 00       		.byte	0
 1064 0519 11       		.uleb128 0x11
 1065 051a AE000000 		.4byte	.LVL18
 1066 051e D1050000 		.4byte	0x5d1
 1067 0522 39050000 		.4byte	0x539
 1068 0526 12       		.uleb128 0x12
 1069 0527 01       		.uleb128 0x1
 1070 0528 50       		.byte	0x50
 1071 0529 05       		.uleb128 0x5
 1072 052a 03       		.byte	0x3
 1073 052b 1C000000 		.4byte	.LC3
 1074 052f 12       		.uleb128 0x12
 1075 0530 01       		.uleb128 0x1
 1076 0531 51       		.byte	0x51
 1077 0532 05       		.uleb128 0x5
 1078 0533 03       		.byte	0x3
 1079 0534 14000000 		.4byte	.LC2
 1080 0538 00       		.byte	0
 1081 0539 10       		.uleb128 0x10
 1082 053a B2000000 		.4byte	.LVL19
 1083 053e 7B060000 		.4byte	0x67b
 1084 0542 10       		.uleb128 0x10
 1085 0543 B6000000 		.4byte	.LVL20
 1086 0547 86060000 		.4byte	0x686
 1087 054b 10       		.uleb128 0x10
 1088 054c BA000000 		.4byte	.LVL21
 1089 0550 91060000 		.4byte	0x691
 1090 0554 10       		.uleb128 0x10
 1091 0555 BE000000 		.4byte	.LVL22
 1092 0559 C6050000 		.4byte	0x5c6
 1093 055d 11       		.uleb128 0x11
 1094 055e C8000000 		.4byte	.LVL24
 1095 0562 D1050000 		.4byte	0x5d1
 1096 0566 7D050000 		.4byte	0x57d
 1097 056a 12       		.uleb128 0x12
 1098 056b 01       		.uleb128 0x1
 1099 056c 50       		.byte	0x50
 1100 056d 05       		.uleb128 0x5
 1101 056e 03       		.byte	0x3
 1102 056f 40000000 		.4byte	.LC6
 1103 0573 12       		.uleb128 0x12
 1104 0574 01       		.uleb128 0x1
 1105 0575 51       		.byte	0x51
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 39


 1106 0576 05       		.uleb128 0x5
 1107 0577 03       		.byte	0x3
 1108 0578 3C000000 		.4byte	.LC5
 1109 057c 00       		.byte	0
 1110 057d 13       		.uleb128 0x13
 1111 057e CE000000 		.4byte	.LVL25
 1112 0582 9C060000 		.4byte	0x69c
 1113 0586 12       		.uleb128 0x12
 1114 0587 01       		.uleb128 0x1
 1115 0588 50       		.byte	0x50
 1116 0589 01       		.uleb128 0x1
 1117 058a 31       		.byte	0x31
 1118 058b 00       		.byte	0
 1119 058c 00       		.byte	0
 1120 058d 11       		.uleb128 0x11
 1121 058e 0A000000 		.4byte	.LVL0
 1122 0592 2A060000 		.4byte	0x62a
 1123 0596 A4050000 		.4byte	0x5a4
 1124 059a 12       		.uleb128 0x12
 1125 059b 01       		.uleb128 0x1
 1126 059c 50       		.byte	0x50
 1127 059d 05       		.uleb128 0x5
 1128 059e 03       		.byte	0x3
 1129 059f 00000000 		.4byte	.LC0
 1130 05a3 00       		.byte	0
 1131 05a4 10       		.uleb128 0x10
 1132 05a5 0E000000 		.4byte	.LVL1
 1133 05a9 A7060000 		.4byte	0x6a7
 1134 05ad 00       		.byte	0
 1135 05ae 02       		.uleb128 0x2
 1136 05af 01       		.byte	0x1
 1137 05b0 02       		.byte	0x2
 1138 05b1 2A020000 		.4byte	.LASF34
 1139 05b5 14       		.uleb128 0x14
 1140 05b6 C6020000 		.4byte	.LASF59
 1141 05ba 0F       		.byte	0xf
 1142 05bb 1207     		.2byte	0x712
 1143 05bd C1050000 		.4byte	0x5c1
 1144 05c1 15       		.uleb128 0x15
 1145 05c2 B8000000 		.4byte	0xb8
 1146 05c6 16       		.uleb128 0x16
 1147 05c7 0A010000 		.4byte	.LASF35
 1148 05cb 0A010000 		.4byte	.LASF35
 1149 05cf 06       		.byte	0x6
 1150 05d0 B6       		.byte	0xb6
 1151 05d1 16       		.uleb128 0x16
 1152 05d2 30020000 		.4byte	.LASF36
 1153 05d6 30020000 		.4byte	.LASF36
 1154 05da 07       		.byte	0x7
 1155 05db 07       		.byte	0x7
 1156 05dc 16       		.uleb128 0x16
 1157 05dd C2000000 		.4byte	.LASF37
 1158 05e1 C2000000 		.4byte	.LASF37
 1159 05e5 08       		.byte	0x8
 1160 05e6 88       		.byte	0x88
 1161 05e7 16       		.uleb128 0x16
 1162 05e8 B1000000 		.4byte	.LASF38
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 40


 1163 05ec B1000000 		.4byte	.LASF38
 1164 05f0 09       		.byte	0x9
 1165 05f1 12       		.byte	0x12
 1166 05f2 17       		.uleb128 0x17
 1167 05f3 B9010000 		.4byte	.LASF39
 1168 05f7 B9010000 		.4byte	.LASF39
 1169 05fb 0A       		.byte	0xa
 1170 05fc ED02     		.2byte	0x2ed
 1171 05fe 16       		.uleb128 0x16
 1172 05ff 9C020000 		.4byte	.LASF40
 1173 0603 9C020000 		.4byte	.LASF40
 1174 0607 04       		.byte	0x4
 1175 0608 18       		.byte	0x18
 1176 0609 16       		.uleb128 0x16
 1177 060a ED000000 		.4byte	.LASF41
 1178 060e ED000000 		.4byte	.LASF41
 1179 0612 04       		.byte	0x4
 1180 0613 19       		.byte	0x19
 1181 0614 16       		.uleb128 0x16
 1182 0615 44010000 		.4byte	.LASF42
 1183 0619 44010000 		.4byte	.LASF42
 1184 061d 05       		.byte	0x5
 1185 061e 51       		.byte	0x51
 1186 061f 16       		.uleb128 0x16
 1187 0620 2F010000 		.4byte	.LASF43
 1188 0624 2F010000 		.4byte	.LASF43
 1189 0628 0B       		.byte	0xb
 1190 0629 11       		.byte	0x11
 1191 062a 18       		.uleb128 0x18
 1192 062b E9010000 		.4byte	.LASF60
 1193 062f 75020000 		.4byte	.LASF61
 1194 0633 10       		.byte	0x10
 1195 0634 00       		.byte	0
 1196 0635 E9010000 		.4byte	.LASF60
 1197 0639 16       		.uleb128 0x16
 1198 063a 69020000 		.4byte	.LASF44
 1199 063e 69020000 		.4byte	.LASF44
 1200 0642 09       		.byte	0x9
 1201 0643 0B       		.byte	0xb
 1202 0644 16       		.uleb128 0x16
 1203 0645 C4010000 		.4byte	.LASF45
 1204 0649 C4010000 		.4byte	.LASF45
 1205 064d 0B       		.byte	0xb
 1206 064e 18       		.byte	0x18
 1207 064f 16       		.uleb128 0x16
 1208 0650 C7000000 		.4byte	.LASF46
 1209 0654 C7000000 		.4byte	.LASF46
 1210 0658 04       		.byte	0x4
 1211 0659 17       		.byte	0x17
 1212 065a 16       		.uleb128 0x16
 1213 065b 6B010000 		.4byte	.LASF47
 1214 065f 6B010000 		.4byte	.LASF47
 1215 0663 04       		.byte	0x4
 1216 0664 1A       		.byte	0x1a
 1217 0665 16       		.uleb128 0x16
 1218 0666 07020000 		.4byte	.LASF48
 1219 066a 07020000 		.4byte	.LASF48
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 41


 1220 066e 09       		.byte	0x9
 1221 066f 0F       		.byte	0xf
 1222 0670 16       		.uleb128 0x16
 1223 0671 00000000 		.4byte	.LASF49
 1224 0675 00000000 		.4byte	.LASF49
 1225 0679 0C       		.byte	0xc
 1226 067a 05       		.byte	0x5
 1227 067b 16       		.uleb128 0x16
 1228 067c 55010000 		.4byte	.LASF50
 1229 0680 55010000 		.4byte	.LASF50
 1230 0684 0B       		.byte	0xb
 1231 0685 1B       		.byte	0x1b
 1232 0686 16       		.uleb128 0x16
 1233 0687 05000000 		.4byte	.LASF51
 1234 068b 05000000 		.4byte	.LASF51
 1235 068f 06       		.byte	0x6
 1236 0690 B0       		.byte	0xb0
 1237 0691 16       		.uleb128 0x16
 1238 0692 B7020000 		.4byte	.LASF52
 1239 0696 B7020000 		.4byte	.LASF52
 1240 069a 06       		.byte	0x6
 1241 069b AE       		.byte	0xae
 1242 069c 16       		.uleb128 0x16
 1243 069d 91010000 		.4byte	.LASF53
 1244 06a1 91010000 		.4byte	.LASF53
 1245 06a5 0D       		.byte	0xd
 1246 06a6 26       		.byte	0x26
 1247 06a7 16       		.uleb128 0x16
 1248 06a8 40020000 		.4byte	.LASF54
 1249 06ac 40020000 		.4byte	.LASF54
 1250 06b0 0E       		.byte	0xe
 1251 06b1 29       		.byte	0x29
 1252 06b2 00       		.byte	0
 1253              		.section	.debug_abbrev,"",%progbits
 1254              	.Ldebug_abbrev0:
 1255 0000 01       		.uleb128 0x1
 1256 0001 11       		.uleb128 0x11
 1257 0002 01       		.byte	0x1
 1258 0003 25       		.uleb128 0x25
 1259 0004 0E       		.uleb128 0xe
 1260 0005 13       		.uleb128 0x13
 1261 0006 0B       		.uleb128 0xb
 1262 0007 03       		.uleb128 0x3
 1263 0008 0E       		.uleb128 0xe
 1264 0009 1B       		.uleb128 0x1b
 1265 000a 0E       		.uleb128 0xe
 1266 000b 55       		.uleb128 0x55
 1267 000c 17       		.uleb128 0x17
 1268 000d 11       		.uleb128 0x11
 1269 000e 01       		.uleb128 0x1
 1270 000f 10       		.uleb128 0x10
 1271 0010 17       		.uleb128 0x17
 1272 0011 00       		.byte	0
 1273 0012 00       		.byte	0
 1274 0013 02       		.uleb128 0x2
 1275 0014 24       		.uleb128 0x24
 1276 0015 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 42


 1277 0016 0B       		.uleb128 0xb
 1278 0017 0B       		.uleb128 0xb
 1279 0018 3E       		.uleb128 0x3e
 1280 0019 0B       		.uleb128 0xb
 1281 001a 03       		.uleb128 0x3
 1282 001b 0E       		.uleb128 0xe
 1283 001c 00       		.byte	0
 1284 001d 00       		.byte	0
 1285 001e 03       		.uleb128 0x3
 1286 001f 16       		.uleb128 0x16
 1287 0020 00       		.byte	0
 1288 0021 03       		.uleb128 0x3
 1289 0022 0E       		.uleb128 0xe
 1290 0023 3A       		.uleb128 0x3a
 1291 0024 0B       		.uleb128 0xb
 1292 0025 3B       		.uleb128 0x3b
 1293 0026 0B       		.uleb128 0xb
 1294 0027 49       		.uleb128 0x49
 1295 0028 13       		.uleb128 0x13
 1296 0029 00       		.byte	0
 1297 002a 00       		.byte	0
 1298 002b 04       		.uleb128 0x4
 1299 002c 24       		.uleb128 0x24
 1300 002d 00       		.byte	0
 1301 002e 0B       		.uleb128 0xb
 1302 002f 0B       		.uleb128 0xb
 1303 0030 3E       		.uleb128 0x3e
 1304 0031 0B       		.uleb128 0xb
 1305 0032 03       		.uleb128 0x3
 1306 0033 08       		.uleb128 0x8
 1307 0034 00       		.byte	0
 1308 0035 00       		.byte	0
 1309 0036 05       		.uleb128 0x5
 1310 0037 13       		.uleb128 0x13
 1311 0038 01       		.byte	0x1
 1312 0039 03       		.uleb128 0x3
 1313 003a 0E       		.uleb128 0xe
 1314 003b 0B       		.uleb128 0xb
 1315 003c 0B       		.uleb128 0xb
 1316 003d 3A       		.uleb128 0x3a
 1317 003e 0B       		.uleb128 0xb
 1318 003f 3B       		.uleb128 0x3b
 1319 0040 0B       		.uleb128 0xb
 1320 0041 01       		.uleb128 0x1
 1321 0042 13       		.uleb128 0x13
 1322 0043 00       		.byte	0
 1323 0044 00       		.byte	0
 1324 0045 06       		.uleb128 0x6
 1325 0046 0D       		.uleb128 0xd
 1326 0047 00       		.byte	0
 1327 0048 03       		.uleb128 0x3
 1328 0049 08       		.uleb128 0x8
 1329 004a 3A       		.uleb128 0x3a
 1330 004b 0B       		.uleb128 0xb
 1331 004c 3B       		.uleb128 0x3b
 1332 004d 0B       		.uleb128 0xb
 1333 004e 49       		.uleb128 0x49
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 43


 1334 004f 13       		.uleb128 0x13
 1335 0050 38       		.uleb128 0x38
 1336 0051 0B       		.uleb128 0xb
 1337 0052 00       		.byte	0
 1338 0053 00       		.byte	0
 1339 0054 07       		.uleb128 0x7
 1340 0055 0D       		.uleb128 0xd
 1341 0056 00       		.byte	0
 1342 0057 03       		.uleb128 0x3
 1343 0058 0E       		.uleb128 0xe
 1344 0059 3A       		.uleb128 0x3a
 1345 005a 0B       		.uleb128 0xb
 1346 005b 3B       		.uleb128 0x3b
 1347 005c 0B       		.uleb128 0xb
 1348 005d 49       		.uleb128 0x49
 1349 005e 13       		.uleb128 0x13
 1350 005f 38       		.uleb128 0x38
 1351 0060 0B       		.uleb128 0xb
 1352 0061 00       		.byte	0
 1353 0062 00       		.byte	0
 1354 0063 08       		.uleb128 0x8
 1355 0064 2E       		.uleb128 0x2e
 1356 0065 01       		.byte	0x1
 1357 0066 3F       		.uleb128 0x3f
 1358 0067 19       		.uleb128 0x19
 1359 0068 03       		.uleb128 0x3
 1360 0069 0E       		.uleb128 0xe
 1361 006a 3A       		.uleb128 0x3a
 1362 006b 0B       		.uleb128 0xb
 1363 006c 3B       		.uleb128 0x3b
 1364 006d 05       		.uleb128 0x5
 1365 006e 27       		.uleb128 0x27
 1366 006f 19       		.uleb128 0x19
 1367 0070 8701     		.uleb128 0x87
 1368 0072 19       		.uleb128 0x19
 1369 0073 11       		.uleb128 0x11
 1370 0074 01       		.uleb128 0x1
 1371 0075 12       		.uleb128 0x12
 1372 0076 06       		.uleb128 0x6
 1373 0077 40       		.uleb128 0x40
 1374 0078 18       		.uleb128 0x18
 1375 0079 9742     		.uleb128 0x2117
 1376 007b 19       		.uleb128 0x19
 1377 007c 01       		.uleb128 0x1
 1378 007d 13       		.uleb128 0x13
 1379 007e 00       		.byte	0
 1380 007f 00       		.byte	0
 1381 0080 09       		.uleb128 0x9
 1382 0081 34       		.uleb128 0x34
 1383 0082 00       		.byte	0
 1384 0083 03       		.uleb128 0x3
 1385 0084 0E       		.uleb128 0xe
 1386 0085 3A       		.uleb128 0x3a
 1387 0086 0B       		.uleb128 0xb
 1388 0087 3B       		.uleb128 0x3b
 1389 0088 05       		.uleb128 0x5
 1390 0089 49       		.uleb128 0x49
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 44


 1391 008a 13       		.uleb128 0x13
 1392 008b 02       		.uleb128 0x2
 1393 008c 18       		.uleb128 0x18
 1394 008d 00       		.byte	0
 1395 008e 00       		.byte	0
 1396 008f 0A       		.uleb128 0xa
 1397 0090 34       		.uleb128 0x34
 1398 0091 00       		.byte	0
 1399 0092 03       		.uleb128 0x3
 1400 0093 0E       		.uleb128 0xe
 1401 0094 3A       		.uleb128 0x3a
 1402 0095 0B       		.uleb128 0xb
 1403 0096 3B       		.uleb128 0x3b
 1404 0097 05       		.uleb128 0x5
 1405 0098 49       		.uleb128 0x49
 1406 0099 13       		.uleb128 0x13
 1407 009a 02       		.uleb128 0x2
 1408 009b 17       		.uleb128 0x17
 1409 009c 00       		.byte	0
 1410 009d 00       		.byte	0
 1411 009e 0B       		.uleb128 0xb
 1412 009f 0B       		.uleb128 0xb
 1413 00a0 01       		.byte	0x1
 1414 00a1 11       		.uleb128 0x11
 1415 00a2 01       		.uleb128 0x1
 1416 00a3 12       		.uleb128 0x12
 1417 00a4 06       		.uleb128 0x6
 1418 00a5 01       		.uleb128 0x1
 1419 00a6 13       		.uleb128 0x13
 1420 00a7 00       		.byte	0
 1421 00a8 00       		.byte	0
 1422 00a9 0C       		.uleb128 0xc
 1423 00aa 34       		.uleb128 0x34
 1424 00ab 00       		.byte	0
 1425 00ac 03       		.uleb128 0x3
 1426 00ad 08       		.uleb128 0x8
 1427 00ae 3A       		.uleb128 0x3a
 1428 00af 0B       		.uleb128 0xb
 1429 00b0 3B       		.uleb128 0x3b
 1430 00b1 05       		.uleb128 0x5
 1431 00b2 49       		.uleb128 0x49
 1432 00b3 13       		.uleb128 0x13
 1433 00b4 02       		.uleb128 0x2
 1434 00b5 18       		.uleb128 0x18
 1435 00b6 00       		.byte	0
 1436 00b7 00       		.byte	0
 1437 00b8 0D       		.uleb128 0xd
 1438 00b9 34       		.uleb128 0x34
 1439 00ba 00       		.byte	0
 1440 00bb 03       		.uleb128 0x3
 1441 00bc 08       		.uleb128 0x8
 1442 00bd 3A       		.uleb128 0x3a
 1443 00be 0B       		.uleb128 0xb
 1444 00bf 3B       		.uleb128 0x3b
 1445 00c0 05       		.uleb128 0x5
 1446 00c1 49       		.uleb128 0x49
 1447 00c2 13       		.uleb128 0x13
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 45


 1448 00c3 02       		.uleb128 0x2
 1449 00c4 17       		.uleb128 0x17
 1450 00c5 00       		.byte	0
 1451 00c6 00       		.byte	0
 1452 00c7 0E       		.uleb128 0xe
 1453 00c8 34       		.uleb128 0x34
 1454 00c9 00       		.byte	0
 1455 00ca 03       		.uleb128 0x3
 1456 00cb 0E       		.uleb128 0xe
 1457 00cc 3A       		.uleb128 0x3a
 1458 00cd 0B       		.uleb128 0xb
 1459 00ce 3B       		.uleb128 0x3b
 1460 00cf 05       		.uleb128 0x5
 1461 00d0 49       		.uleb128 0x49
 1462 00d1 13       		.uleb128 0x13
 1463 00d2 1C       		.uleb128 0x1c
 1464 00d3 0B       		.uleb128 0xb
 1465 00d4 00       		.byte	0
 1466 00d5 00       		.byte	0
 1467 00d6 0F       		.uleb128 0xf
 1468 00d7 34       		.uleb128 0x34
 1469 00d8 00       		.byte	0
 1470 00d9 03       		.uleb128 0x3
 1471 00da 08       		.uleb128 0x8
 1472 00db 3A       		.uleb128 0x3a
 1473 00dc 0B       		.uleb128 0xb
 1474 00dd 3B       		.uleb128 0x3b
 1475 00de 05       		.uleb128 0x5
 1476 00df 49       		.uleb128 0x49
 1477 00e0 13       		.uleb128 0x13
 1478 00e1 00       		.byte	0
 1479 00e2 00       		.byte	0
 1480 00e3 10       		.uleb128 0x10
 1481 00e4 898201   		.uleb128 0x4109
 1482 00e7 00       		.byte	0
 1483 00e8 11       		.uleb128 0x11
 1484 00e9 01       		.uleb128 0x1
 1485 00ea 31       		.uleb128 0x31
 1486 00eb 13       		.uleb128 0x13
 1487 00ec 00       		.byte	0
 1488 00ed 00       		.byte	0
 1489 00ee 11       		.uleb128 0x11
 1490 00ef 898201   		.uleb128 0x4109
 1491 00f2 01       		.byte	0x1
 1492 00f3 11       		.uleb128 0x11
 1493 00f4 01       		.uleb128 0x1
 1494 00f5 31       		.uleb128 0x31
 1495 00f6 13       		.uleb128 0x13
 1496 00f7 01       		.uleb128 0x1
 1497 00f8 13       		.uleb128 0x13
 1498 00f9 00       		.byte	0
 1499 00fa 00       		.byte	0
 1500 00fb 12       		.uleb128 0x12
 1501 00fc 8A8201   		.uleb128 0x410a
 1502 00ff 00       		.byte	0
 1503 0100 02       		.uleb128 0x2
 1504 0101 18       		.uleb128 0x18
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 46


 1505 0102 9142     		.uleb128 0x2111
 1506 0104 18       		.uleb128 0x18
 1507 0105 00       		.byte	0
 1508 0106 00       		.byte	0
 1509 0107 13       		.uleb128 0x13
 1510 0108 898201   		.uleb128 0x4109
 1511 010b 01       		.byte	0x1
 1512 010c 11       		.uleb128 0x11
 1513 010d 01       		.uleb128 0x1
 1514 010e 31       		.uleb128 0x31
 1515 010f 13       		.uleb128 0x13
 1516 0110 00       		.byte	0
 1517 0111 00       		.byte	0
 1518 0112 14       		.uleb128 0x14
 1519 0113 34       		.uleb128 0x34
 1520 0114 00       		.byte	0
 1521 0115 03       		.uleb128 0x3
 1522 0116 0E       		.uleb128 0xe
 1523 0117 3A       		.uleb128 0x3a
 1524 0118 0B       		.uleb128 0xb
 1525 0119 3B       		.uleb128 0x3b
 1526 011a 05       		.uleb128 0x5
 1527 011b 49       		.uleb128 0x49
 1528 011c 13       		.uleb128 0x13
 1529 011d 3F       		.uleb128 0x3f
 1530 011e 19       		.uleb128 0x19
 1531 011f 3C       		.uleb128 0x3c
 1532 0120 19       		.uleb128 0x19
 1533 0121 00       		.byte	0
 1534 0122 00       		.byte	0
 1535 0123 15       		.uleb128 0x15
 1536 0124 35       		.uleb128 0x35
 1537 0125 00       		.byte	0
 1538 0126 49       		.uleb128 0x49
 1539 0127 13       		.uleb128 0x13
 1540 0128 00       		.byte	0
 1541 0129 00       		.byte	0
 1542 012a 16       		.uleb128 0x16
 1543 012b 2E       		.uleb128 0x2e
 1544 012c 00       		.byte	0
 1545 012d 3F       		.uleb128 0x3f
 1546 012e 19       		.uleb128 0x19
 1547 012f 3C       		.uleb128 0x3c
 1548 0130 19       		.uleb128 0x19
 1549 0131 6E       		.uleb128 0x6e
 1550 0132 0E       		.uleb128 0xe
 1551 0133 03       		.uleb128 0x3
 1552 0134 0E       		.uleb128 0xe
 1553 0135 3A       		.uleb128 0x3a
 1554 0136 0B       		.uleb128 0xb
 1555 0137 3B       		.uleb128 0x3b
 1556 0138 0B       		.uleb128 0xb
 1557 0139 00       		.byte	0
 1558 013a 00       		.byte	0
 1559 013b 17       		.uleb128 0x17
 1560 013c 2E       		.uleb128 0x2e
 1561 013d 00       		.byte	0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 47


 1562 013e 3F       		.uleb128 0x3f
 1563 013f 19       		.uleb128 0x19
 1564 0140 3C       		.uleb128 0x3c
 1565 0141 19       		.uleb128 0x19
 1566 0142 6E       		.uleb128 0x6e
 1567 0143 0E       		.uleb128 0xe
 1568 0144 03       		.uleb128 0x3
 1569 0145 0E       		.uleb128 0xe
 1570 0146 3A       		.uleb128 0x3a
 1571 0147 0B       		.uleb128 0xb
 1572 0148 3B       		.uleb128 0x3b
 1573 0149 05       		.uleb128 0x5
 1574 014a 00       		.byte	0
 1575 014b 00       		.byte	0
 1576 014c 18       		.uleb128 0x18
 1577 014d 2E       		.uleb128 0x2e
 1578 014e 00       		.byte	0
 1579 014f 3F       		.uleb128 0x3f
 1580 0150 19       		.uleb128 0x19
 1581 0151 3C       		.uleb128 0x3c
 1582 0152 19       		.uleb128 0x19
 1583 0153 6E       		.uleb128 0x6e
 1584 0154 0E       		.uleb128 0xe
 1585 0155 03       		.uleb128 0x3
 1586 0156 0E       		.uleb128 0xe
 1587 0157 3A       		.uleb128 0x3a
 1588 0158 0B       		.uleb128 0xb
 1589 0159 3B       		.uleb128 0x3b
 1590 015a 0B       		.uleb128 0xb
 1591 015b 6E       		.uleb128 0x6e
 1592 015c 0E       		.uleb128 0xe
 1593 015d 00       		.byte	0
 1594 015e 00       		.byte	0
 1595 015f 00       		.byte	0
 1596              		.section	.debug_loc,"",%progbits
 1597              	.Ldebug_loc0:
 1598              	.LLST0:
 1599 0000 0E000000 		.4byte	.LVL1
 1600 0004 15000000 		.4byte	.LVL2-1
 1601 0008 0100     		.2byte	0x1
 1602 000a 50       		.byte	0x50
 1603 000b 00000000 		.4byte	0
 1604 000f 00000000 		.4byte	0
 1605              	.LLST1:
 1606 0013 1C000000 		.4byte	.LVL3
 1607 0017 C8000000 		.4byte	.LVL24
 1608 001b 0200     		.2byte	0x2
 1609 001d 30       		.byte	0x30
 1610 001e 9F       		.byte	0x9f
 1611 001f C8000000 		.4byte	.LVL24
 1612 0023 DC010000 		.4byte	.LFE85
 1613 0027 0200     		.2byte	0x2
 1614 0029 31       		.byte	0x31
 1615 002a 9F       		.byte	0x9f
 1616 002b 00000000 		.4byte	0
 1617 002f 00000000 		.4byte	0
 1618              	.LLST2:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 48


 1619 0033 1C000000 		.4byte	.LVL3
 1620 0037 54000000 		.4byte	.LVL11
 1621 003b 0200     		.2byte	0x2
 1622 003d 31       		.byte	0x31
 1623 003e 9F       		.byte	0x9f
 1624 003f 54000000 		.4byte	.LVL11
 1625 0043 8C000000 		.4byte	.LVL14
 1626 0047 0100     		.2byte	0x1
 1627 0049 54       		.byte	0x54
 1628 004a 8C000000 		.4byte	.LVL14
 1629 004e 90000000 		.4byte	.LVL15
 1630 0052 0200     		.2byte	0x2
 1631 0054 30       		.byte	0x30
 1632 0055 9F       		.byte	0x9f
 1633 0056 90000000 		.4byte	.LVL15
 1634 005a D0000000 		.4byte	.LVL26
 1635 005e 0100     		.2byte	0x1
 1636 0060 54       		.byte	0x54
 1637 0061 00000000 		.4byte	0
 1638 0065 00000000 		.4byte	0
 1639              	.LLST3:
 1640 0069 BE000000 		.4byte	.LVL22
 1641 006d C4000000 		.4byte	.LVL23
 1642 0071 0100     		.2byte	0x1
 1643 0073 50       		.byte	0x50
 1644 0074 C4000000 		.4byte	.LVL23
 1645 0078 C7000000 		.4byte	.LVL24-1
 1646 007c 0100     		.2byte	0x1
 1647 007e 52       		.byte	0x52
 1648 007f 00000000 		.4byte	0
 1649 0083 00000000 		.4byte	0
 1650              	.LLST4:
 1651 0087 68010000 		.4byte	.LVL41
 1652 008b 9E010000 		.4byte	.LVL50
 1653 008f 0100     		.2byte	0x1
 1654 0091 54       		.byte	0x54
 1655 0092 00000000 		.4byte	0
 1656 0096 00000000 		.4byte	0
 1657              	.LLST5:
 1658 009a 7A010000 		.4byte	.LVL43
 1659 009e 82010000 		.4byte	.LVL44
 1660 00a2 0100     		.2byte	0x1
 1661 00a4 50       		.byte	0x50
 1662 00a5 8E010000 		.4byte	.LVL47
 1663 00a9 94010000 		.4byte	.LVL48
 1664 00ad 0100     		.2byte	0x1
 1665 00af 50       		.byte	0x50
 1666 00b0 00000000 		.4byte	0
 1667 00b4 00000000 		.4byte	0
 1668              	.LLST6:
 1669 00b8 FC000000 		.4byte	.LVL30
 1670 00bc 36010000 		.4byte	.LVL38
 1671 00c0 0100     		.2byte	0x1
 1672 00c2 54       		.byte	0x54
 1673 00c3 00000000 		.4byte	0
 1674 00c7 00000000 		.4byte	0
 1675              	.LLST7:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 49


 1676 00cb 14010000 		.4byte	.LVL32
 1677 00cf 1D010000 		.4byte	.LVL33-1
 1678 00d3 0100     		.2byte	0x1
 1679 00d5 52       		.byte	0x52
 1680 00d6 26010000 		.4byte	.LVL35
 1681 00da 2D010000 		.4byte	.LVL36-1
 1682 00de 0100     		.2byte	0x1
 1683 00e0 52       		.byte	0x52
 1684 00e1 00000000 		.4byte	0
 1685 00e5 00000000 		.4byte	0
 1686              		.section	.debug_aranges,"",%progbits
 1687 0000 1C000000 		.4byte	0x1c
 1688 0004 0200     		.2byte	0x2
 1689 0006 00000000 		.4byte	.Ldebug_info0
 1690 000a 04       		.byte	0x4
 1691 000b 00       		.byte	0
 1692 000c 0000     		.2byte	0
 1693 000e 0000     		.2byte	0
 1694 0010 00000000 		.4byte	.LFB85
 1695 0014 DC010000 		.4byte	.LFE85-.LFB85
 1696 0018 00000000 		.4byte	0
 1697 001c 00000000 		.4byte	0
 1698              		.section	.debug_ranges,"",%progbits
 1699              	.Ldebug_ranges0:
 1700 0000 00000000 		.4byte	.LFB85
 1701 0004 DC010000 		.4byte	.LFE85
 1702 0008 00000000 		.4byte	0
 1703 000c 00000000 		.4byte	0
 1704              		.section	.debug_line,"",%progbits
 1705              	.Ldebug_line0:
 1706 0000 DF020000 		.section	.debug_str,"MS",%progbits,1
 1706      02006402 
 1706      00000201 
 1706      FB0E0D00 
 1706      01010101 
 1707              	.LASF49:
 1708 0000 42656570 		.ascii	"Beep\000"
 1708      00
 1709              	.LASF51:
 1710 0005 43795379 		.ascii	"CySysTickEnable\000"
 1710      73546963 
 1710      6B456E61 
 1710      626C6500 
 1711              	.LASF4:
 1712 0015 73686F72 		.ascii	"short int\000"
 1712      7420696E 
 1712      7400
 1713              	.LASF21:
 1714 001f 73697A65 		.ascii	"sizetype\000"
 1714      74797065 
 1714      00
 1715              	.LASF24:
 1716 0028 61636358 		.ascii	"accX\000"
 1716      00
 1717              	.LASF25:
 1718 002d 61636359 		.ascii	"accY\000"
 1718      00
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 50


 1719              	.LASF26:
 1720 0032 6163635A 		.ascii	"accZ\000"
 1720      00
 1721              	.LASF5:
 1722 0037 5F5F7569 		.ascii	"__uint16_t\000"
 1722      6E743136 
 1722      5F7400
 1723              	.LASF57:
 1724 0042 433A5C55 		.ascii	"C:\\Users\\ilyap\\Documents\\PSoC Creator\\Zumo_tan"
 1724      73657273 
 1724      5C696C79 
 1724      61705C44 
 1724      6F63756D 
 1725 0070 6B5C5A75 		.ascii	"k\\Zumo_robot\\ZumoBot_Tank.cydsn\000"
 1725      6D6F5F72 
 1725      6F626F74 
 1725      5C5A756D 
 1725      6F426F74 
 1726              	.LASF22:
 1727 0090 73656E73 		.ascii	"sensors_\000"
 1727      6F72735F 
 1727      00
 1728              	.LASF13:
 1729 0099 75696E74 		.ascii	"uint8_t\000"
 1729      385F7400 
 1730              	.LASF29:
 1731 00a1 6C6F6F70 		.ascii	"loop1\000"
 1731      3100
 1732              	.LASF30:
 1733 00a7 73746172 		.ascii	"startline\000"
 1733      746C696E 
 1733      6500
 1734              	.LASF38:
 1735 00b1 6D6F746F 		.ascii	"motor_turn\000"
 1735      725F7475 
 1735      726E00
 1736              	.LASF32:
 1737 00bc 636F756E 		.ascii	"count\000"
 1737      7400
 1738              	.LASF37:
 1739 00c2 72616E64 		.ascii	"rand\000"
 1739      00
 1740              	.LASF46:
 1741 00c7 7265666C 		.ascii	"reflectance_start\000"
 1741      65637461 
 1741      6E63655F 
 1741      73746172 
 1741      7400
 1742              	.LASF17:
 1743 00d9 666C6F61 		.ascii	"float\000"
 1743      7400
 1744              	.LASF10:
 1745 00df 6C6F6E67 		.ascii	"long long int\000"
 1745      206C6F6E 
 1745      6720696E 
 1745      7400
 1746              	.LASF41:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 51


 1747 00ed 7265666C 		.ascii	"reflectance_digital\000"
 1747      65637461 
 1747      6E63655F 
 1747      64696769 
 1747      74616C00 
 1748              	.LASF8:
 1749 0101 6C6F6E67 		.ascii	"long int\000"
 1749      20696E74 
 1749      00
 1750              	.LASF35:
 1751 010a 43795379 		.ascii	"CySysTickGetValue\000"
 1751      73546963 
 1751      6B476574 
 1751      56616C75 
 1751      6500
 1752              	.LASF23:
 1753 011c 61636344 		.ascii	"accData_\000"
 1753      6174615F 
 1753      00
 1754              	.LASF2:
 1755 0125 5F5F7569 		.ascii	"__uint8_t\000"
 1755      6E74385F 
 1755      7400
 1756              	.LASF43:
 1757 012f 49525F53 		.ascii	"IR_Start\000"
 1757      74617274 
 1757      00
 1758              	.LASF20:
 1759 0138 6C6F6E67 		.ascii	"long double\000"
 1759      20646F75 
 1759      626C6500 
 1760              	.LASF42:
 1761 0144 4C534D33 		.ascii	"LSM303D_Read_Acc\000"
 1761      3033445F 
 1761      52656164 
 1761      5F416363 
 1761      00
 1762              	.LASF50:
 1763 0155 49525F77 		.ascii	"IR_wait\000"
 1763      61697400 
 1764              	.LASF1:
 1765 015d 756E7369 		.ascii	"unsigned char\000"
 1765      676E6564 
 1765      20636861 
 1765      7200
 1766              	.LASF47:
 1767 016b 7265666C 		.ascii	"reflectance_set_threshold\000"
 1767      65637461 
 1767      6E63655F 
 1767      7365745F 
 1767      74687265 
 1768              	.LASF0:
 1769 0185 7369676E 		.ascii	"signed char\000"
 1769      65642063 
 1769      68617200 
 1770              	.LASF53:
 1771 0191 42617474 		.ascii	"BatteryLed_Write\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 52


 1771      6572794C 
 1771      65645F57 
 1771      72697465 
 1771      00
 1772              	.LASF11:
 1773 01a2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1773      206C6F6E 
 1773      6720756E 
 1773      7369676E 
 1773      65642069 
 1774              	.LASF39:
 1775 01b9 76546173 		.ascii	"vTaskDelay\000"
 1775      6B44656C 
 1775      617900
 1776              	.LASF45:
 1777 01c4 49525F66 		.ascii	"IR_flush\000"
 1777      6C757368 
 1777      00
 1778              	.LASF12:
 1779 01cd 756E7369 		.ascii	"unsigned int\000"
 1779      676E6564 
 1779      20696E74 
 1779      00
 1780              	.LASF15:
 1781 01da 75696E74 		.ascii	"uint16_t\000"
 1781      31365F74 
 1781      00
 1782              	.LASF31:
 1783 01e3 6C6F6F70 		.ascii	"loop2\000"
 1783      3200
 1784              	.LASF60:
 1785 01e9 70757473 		.ascii	"puts\000"
 1785      00
 1786              	.LASF33:
 1787 01ee 73746172 		.ascii	"start\000"
 1787      7400
 1788              	.LASF6:
 1789 01f4 73686F72 		.ascii	"short unsigned int\000"
 1789      7420756E 
 1789      7369676E 
 1789      65642069 
 1789      6E7400
 1790              	.LASF48:
 1791 0207 6D6F746F 		.ascii	"motor_forward\000"
 1791      725F666F 
 1791      72776172 
 1791      6400
 1792              	.LASF19:
 1793 0215 63686172 		.ascii	"char\000"
 1793      00
 1794              	.LASF16:
 1795 021a 696E7433 		.ascii	"int32_t\000"
 1795      325F7400 
 1796              	.LASF14:
 1797 0222 696E7431 		.ascii	"int16_t\000"
 1797      365F7400 
 1798              	.LASF34:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 53


 1799 022a 5F426F6F 		.ascii	"_Bool\000"
 1799      6C00
 1800              	.LASF36:
 1801 0230 7072696E 		.ascii	"print_mqtt\000"
 1801      745F6D71 
 1801      747400
 1802              	.LASF27:
 1803 023b 64617461 		.ascii	"data\000"
 1803      00
 1804              	.LASF54:
 1805 0240 5357315F 		.ascii	"SW1_Read\000"
 1805      52656164 
 1805      00
 1806              	.LASF56:
 1807 0249 6D61696E 		.ascii	"main.c\000"
 1807      2E6300
 1808              	.LASF9:
 1809 0250 6C6F6E67 		.ascii	"long unsigned int\000"
 1809      20756E73 
 1809      69676E65 
 1809      6420696E 
 1809      7400
 1810              	.LASF18:
 1811 0262 646F7562 		.ascii	"double\000"
 1811      6C6500
 1812              	.LASF44:
 1813 0269 6D6F746F 		.ascii	"motor_start\000"
 1813      725F7374 
 1813      61727400 
 1814              	.LASF61:
 1815 0275 5F5F6275 		.ascii	"__builtin_puts\000"
 1815      696C7469 
 1815      6E5F7075 
 1815      747300
 1816              	.LASF28:
 1817 0284 62757474 		.ascii	"button_\000"
 1817      6F6E5F00 
 1818              	.LASF58:
 1819 028c 7A6D6169 		.ascii	"zmain\000"
 1819      6E00
 1820              	.LASF7:
 1821 0292 5F5F696E 		.ascii	"__int32_t\000"
 1821      7433325F 
 1821      7400
 1822              	.LASF40:
 1823 029c 7265666C 		.ascii	"reflectance_read\000"
 1823      65637461 
 1823      6E63655F 
 1823      72656164 
 1823      00
 1824              	.LASF3:
 1825 02ad 5F5F696E 		.ascii	"__int16_t\000"
 1825      7431365F 
 1825      7400
 1826              	.LASF52:
 1827 02b7 43795379 		.ascii	"CySysTickStart\000"
 1827      73546963 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\ccOlw3Zi.s 			page 54


 1827      6B537461 
 1827      727400
 1828              	.LASF59:
 1829 02c6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1829      52784275 
 1829      66666572 
 1829      00
 1830              	.LASF55:
 1831 02d3 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1831      43313120 
 1831      352E342E 
 1831      31203230 
 1831      31363036 
 1832 0306 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1832      20726576 
 1832      6973696F 
 1832      6E203233 
 1832      37373135 
 1833 0339 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1833      66756E63 
 1833      74696F6E 
 1833      2D736563 
 1833      74696F6E 
 1834              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
