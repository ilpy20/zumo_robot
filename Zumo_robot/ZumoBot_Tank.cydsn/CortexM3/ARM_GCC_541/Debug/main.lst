ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.zmain,"ax",%progbits
  20              		.align	2
  21              		.global	zmain
  22              		.thumb
  23              		.thumb_func
  24              		.type	zmain, %function
  25              	zmain:
  26              	.LFB85:
  27              		.file 1 "main.c"
   1:main.c        **** /**
   2:main.c        **** * @mainpage ZumoBot Project
   3:main.c        **** * @brief    You can make your own ZumoBot with various sensors.
   4:main.c        **** * @details  <br><br>
   5:main.c        ****     <p>
   6:main.c        ****     <B>General</B><br>
   7:main.c        ****     You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress
   8:main.c        ****     library has basic methods of various sensors and communications so that you can make what you w
   9:main.c        ****     <br><br>
  10:main.c        ****     </p>
  11:main.c        ****     
  12:main.c        ****     <p>
  13:main.c        ****     <B>Sensors</B><br>
  14:main.c        ****     &nbsp;Included: <br>
  15:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
  16:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
  17:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
  18:main.c        ****         &nbsp;&nbsp;&nbsp;&nbsp;Motors
  19:main.c        ****     &nbsp;Wii nunchuck<br>
  20:main.c        ****     &nbsp;TSOP-2236: IR Receiver<br>
  21:main.c        ****     &nbsp;HC-SR04: Ultrasonic sensor<br>
  22:main.c        ****     &nbsp;APDS-9301: Ambient light sensor<br>
  23:main.c        ****     &nbsp;IR LED <br><br><br>
  24:main.c        ****     </p>
  25:main.c        ****     
  26:main.c        ****     <p>
  27:main.c        ****     <B>Communication</B><br>
  28:main.c        ****     I2C, UART, Serial<br>
  29:main.c        ****     </p>
  30:main.c        **** */
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 2


  31:main.c        **** 
  32:main.c        **** #include <project.h>
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdlib.h>
  35:main.c        **** #include "FreeRTOS.h"
  36:main.c        **** #include "task.h"
  37:main.c        **** #include "Motor.h"
  38:main.c        **** #include "Ultra.h"
  39:main.c        **** #include "Nunchuk.h"
  40:main.c        **** #include "Reflectance.h"
  41:main.c        **** #include "Gyro.h"
  42:main.c        **** #include "Accel_magnet.h"
  43:main.c        **** #include "LSM303D.h"
  44:main.c        **** #include "IR.h"
  45:main.c        **** #include "Beep.h"
  46:main.c        **** #include "mqtt_sender.h"
  47:main.c        **** #include <time.h>
  48:main.c        **** #include <sys/time.h>
  49:main.c        **** #include "serial1.h"
  50:main.c        **** #include <unistd.h>
  51:main.c        **** /**
  52:main.c        ****  * @file    main.c
  53:main.c        ****  * @brief   
  54:main.c        ****  * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp
  55:main.c        **** */
  56:main.c        **** 
  57:main.c        **** #if 0
  58:main.c        **** //template
  59:main.c        **** void zmain(void){
  60:main.c        ****     
  61:main.c        ****     while(true)
  62:main.c        ****     {
  63:main.c        ****         BatteryLed_Write(!SW1_Read());
  64:main.c        ****         vTaskDelay(100);
  65:main.c        ****     }
  66:main.c        **** }
  67:main.c        **** #endif
  68:main.c        **** 
  69:main.c        **** #if 0
  70:main.c        **** // Beep light test
  71:main.c        **** void zmain(void)
  72:main.c        **** {
  73:main.c        ****     while(true)
  74:main.c        ****     {
  75:main.c        ****         if ((SW1_Read() == 0)){
  76:main.c        ****             for(int i = 0; i < 3; i++){
  77:main.c        ****                 BatteryLed_Write(1);
  78:main.c        ****                 Beep(750, 30);
  79:main.c        ****                 vTaskDelay(500);
  80:main.c        ****                 BatteryLed_Write(0);
  81:main.c        ****                 vTaskDelay(500);
  82:main.c        ****             }
  83:main.c        ****             for(int i = 0; i<3; i++){
  84:main.c        ****                 BatteryLed_Write(1);
  85:main.c        ****                 Beep(750, 30);
  86:main.c        ****                 vTaskDelay(1000);
  87:main.c        ****                 BatteryLed_Write(0);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 3


  88:main.c        ****                 vTaskDelay(500);
  89:main.c        ****             }
  90:main.c        ****             for(int i = 0; i < 3; i++){
  91:main.c        ****                 BatteryLed_Write(1);
  92:main.c        ****                 Beep(750, 30);
  93:main.c        ****                 vTaskDelay(500);
  94:main.c        ****                 BatteryLed_Write(0);
  95:main.c        ****                 vTaskDelay(500);
  96:main.c        ****             }
  97:main.c        ****         }
  98:main.c        ****     }
  99:main.c        ****     
 100:main.c        ****     
 101:main.c        ****  }   
 102:main.c        **** #endif
 103:main.c        **** 
 104:main.c        **** #if 0
 105:main.c        **** // Name and age
 106:main.c        **** void zmain(void)
 107:main.c        **** {
 108:main.c        ****     TickType_t start;
 109:main.c        ****     TickType_t end;
 110:main.c        ****     char name[32];
 111:main.c        ****     int age;
 112:main.c        ****     
 113:main.c        ****     
 114:main.c        ****     printf("\n\n");
 115:main.c        ****     
 116:main.c        ****     printf("Enter your name: ");
 117:main.c        ****     //fflush(stdout);
 118:main.c        ****     start = xTaskGetTickCount();
 119:main.c        ****     scanf("%s", name);
 120:main.c        ****     printf("Enter your age: ");
 121:main.c        ****     //fflush(stdout);
 122:main.c        ****     scanf("%d", &age);
 123:main.c        ****     end = xTaskGetTickCount();
 124:main.c        ****     int time_long = end - start;
 125:main.c        ****     //printf("You are [%s], age = %d\n", name, age);
 126:main.c        ****     if (age <= 21){
 127:main.c        ****         if(time_long < 3000){
 128:main.c        ****             printf("\nSuper fast dude!");
 129:main.c        ****         }
 130:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 131:main.c        ****             printf("\nSo mediocre.");
 132:main.c        ****         }
 133:main.c        ****         else{
 134:main.c        ****             printf("\nMy granny is faster than you!");
 135:main.c        ****         }
 136:main.c        ****     }
 137:main.c        ****     else if((age >= 22)&&(age<=50)){
 138:main.c        ****         if(time_long < 3000){
 139:main.c        ****             printf("\nBe quick or be dead");
 140:main.c        ****         }
 141:main.c        ****         else if((time_long >= 3000)&&(time_long <=5000)){
 142:main.c        ****             printf("\nYou're so average.");
 143:main.c        ****         }
 144:main.c        ****         else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 4


 145:main.c        ****             printf("\nHave you been smoking something illegal?");
 146:main.c        ****         }
 147:main.c        ****     }
 148:main.c        ****     else{
 149:main.c        ****         if(time_long <= 3000){
 150:main.c        ****             printf("\nStill going strong");
 151:main.c        ****         }
 152:main.c        ****         else if((time_long >= 4000)&&(time_long <=5000)){
 153:main.c        ****             printf("\nYou are doing ok for your age.");
 154:main.c        ****         }
 155:main.c        ****         else{
 156:main.c        ****             printf("\nDo they still allow you to drive?");
 157:main.c        ****         }
 158:main.c        ****     }
 159:main.c        ****     while(true)
 160:main.c        ****     {
 161:main.c        ****         BatteryLed_Write(!SW1_Read());
 162:main.c        ****         vTaskDelay(100);
 163:main.c        ****     }
 164:main.c        ****  }   
 165:main.c        **** #endif
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** #if 0
 169:main.c        **** //battery level//
 170:main.c        **** void zmain(void)
 171:main.c        **** {
 172:main.c        **** 	ADC_Battery_Start();   	 
 173:main.c        **** 
 174:main.c        **** 	int16 adcresult =0;
 175:main.c        **** 	float volts = 0.0;
 176:main.c        **** 
 177:main.c        **** 	printf("\nBoot\n");
 178:main.c        **** 
 179:main.c        **** 	//BatteryLed_Write(1); // Switch led on
 180:main.c        **** 	//BatteryLed_Write(0); // Switch led off
 181:main.c        **** 	//uint8 button;
 182:main.c        **** 	//button = SW1_Read(); // read SW1 on pSoC board
 183:main.c        **** 	// SW1_Read() returns zero when button is pressed
 184:main.c        **** 	// SW1_Read() returns one when button is not pressed
 185:main.c        **** 
 186:main.c        **** 	while(true)
 187:main.c        **** 	{
 188:main.c        ****     	char msg[80];
 189:main.c        ****     	ADC_Battery_StartConvert(); // start sampling
 190:main.c        ****     	if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for ADC converted val
 191:main.c        ****         	adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
 192:main.c        ****         	volts=(adcresult*5/4095)*(30/20);
 193:main.c        ****         	// convert value to Volts
 194:main.c        ****         	// you need to implement the conversion
 195:main.c        ****        	 
 196:main.c        ****         	// Print both ADC results and converted value
 197:main.c        ****         	printf("%d %f\r\n",adcresult, volts);
 198:main.c        ****        	 
 199:main.c        ****     	if (volts<4){
 200:main.c        ****         	while(SW1_Read()){
 201:main.c        ****             	BatteryLed_Write(1);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 5


 202:main.c        ****             	vTaskDelay(500);
 203:main.c        ****             	BatteryLed_Write(0);
 204:main.c        ****             	vTaskDelay(500);
 205:main.c        ****         	}
 206:main.c        ****     	}
 207:main.c        ****     	}
 208:main.c        ****     	vTaskDelay(500);
 209:main.c        **** 	}
 210:main.c        ****  }  
 211:main.c        **** 
 212:main.c        ****    
 213:main.c        **** #endif
 214:main.c        **** 
 215:main.c        **** #if 0
 216:main.c        **** // button
 217:main.c        **** void zmain(void)
 218:main.c        **** {
 219:main.c        ****     while(true) {
 220:main.c        ****         printf("Press button within 5 seconds!\n");
 221:main.c        ****         int i = 50;
 222:main.c        ****         while(i > 0) {
 223:main.c        ****             if(SW1_Read() == 0) {
 224:main.c        ****                 break;
 225:main.c        ****             }
 226:main.c        ****             vTaskDelay(100);
 227:main.c        ****             --i;
 228:main.c        ****         }
 229:main.c        ****         if(i > 0) {
 230:main.c        ****             printf("Good work\n");
 231:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait until button is released
 232:main.c        ****         }
 233:main.c        ****         else {
 234:main.c        ****             printf("You didn't press the button\n");
 235:main.c        ****         }
 236:main.c        ****     }
 237:main.c        **** }
 238:main.c        **** #endif
 239:main.c        **** 
 240:main.c        **** #if 0
 241:main.c        **** // button
 242:main.c        **** void zmain(void)
 243:main.c        **** {
 244:main.c        ****     printf("\nBoot\n");
 245:main.c        **** 
 246:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 247:main.c        ****     BatteryLed_Write(0); // Switch led off 
 248:main.c        ****     
 249:main.c        ****     //uint8 button;
 250:main.c        ****     //button = SW1_Read(); // read SW1 on pSoC board
 251:main.c        ****     // SW1_Read() returns zero when button is pressed
 252:main.c        ****     // SW1_Read() returns one when button is not pressed
 253:main.c        ****     
 254:main.c        ****     bool led = false;
 255:main.c        ****     
 256:main.c        ****     while(true)
 257:main.c        ****     {
 258:main.c        ****         // toggle led state when button is pressed
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 6


 259:main.c        ****         if(SW1_Read() == 0) {
 260:main.c        ****             led = !led;
 261:main.c        ****             BatteryLed_Write(led);
 262:main.c        ****             if(led) printf("Led is ON\n");
 263:main.c        ****             else printf("Led is OFF\n");
 264:main.c        ****             Beep(1000, 150);
 265:main.c        ****             while(SW1_Read() == 0) vTaskDelay(10); // wait while button is being pressed
 266:main.c        ****         }        
 267:main.c        ****     }
 268:main.c        ****  }   
 269:main.c        **** #endif
 270:main.c        **** 
 271:main.c        **** #if 0
 272:main.c        ****     void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);
 273:main.c        ****     
 274:main.c        **** void zmain(void)
 275:main.c        **** {
 276:main.c        ****     Ultra_Start();
 277:main.c        ****     motor_start(0,0);
 278:main.c        ****     motor_forward(0,0);
 279:main.c        ****     
 280:main.c        ****     vTaskDelay(3000);
 281:main.c        ****     
 282:main.c        ****     while(true){
 283:main.c        ****     int distance = Ultra_GetDistance();
 284:main.c        ****     
 285:main.c        ****     if(distance <= 10 && distance !=0){
 286:main.c        ****         motor_backward(50,500);
 287:main.c        ****         Beep(150, 200);
 288:main.c        ****         motor_turn(150,150, 500);
 289:main.c        ****         motor_forward(0,0);
 290:main.c        ****      }
 291:main.c        ****     motor_turn(200,100,50);
 292:main.c        ****     }   
 293:main.c        **** }
 294:main.c        **** #endif
 295:main.c        **** 
 296:main.c        **** #if 0
 297:main.c        **** //ultrasonic sensor//
 298:main.c        **** void zmain(void)
 299:main.c        **** {
 300:main.c        ****     Ultra_Start();                          // Ultra Sonic Start function
 301:main.c        ****     
 302:main.c        ****     while(true) {
 303:main.c        ****         int d = Ultra_GetDistance();
 304:main.c        ****         // Print the detected distance (centimeters)
 305:main.c        ****         printf("distance = %d\r\n", d);
 306:main.c        ****         vTaskDelay(200);
 307:main.c        ****     }
 308:main.c        **** }   
 309:main.c        **** #endif
 310:main.c        **** 
 311:main.c        **** #if 0
 312:main.c        **** //IR receiverm - how to wait for IR remote commands
 313:main.c        **** void zmain(void)
 314:main.c        **** {
 315:main.c        ****     uint8_t button_;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 7


 316:main.c        ****     printf("\nStart\n");
 317:main.c        ****     
 318:main.c        ****     while(true){
 319:main.c        ****         button_ = SW1_Read();
 320:main.c        ****         if(button_==0){
 321:main.c        ****             IR_Start();
 322:main.c        ****             printf("\n\nIR test\n");
 323:main.c        ****             struct sensors_ ref;
 324:main.c        ****             struct sensors_ dig;
 325:main.c        ****             bool led = false,loop = true, startline= true;
 326:main.c        ****             int count =0;
 327:main.c        ****             motor_start();              // enable motor controller 
 328:main.c        ****             IR_flush(); // clear IR receive buffer
 329:main.c        ****             printf("Buffer cleared\n");
 330:main.c        ****             
 331:main.c        ****             reflectance_start();
 332:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 333:main.c        ****             vTaskDelay(200);
 334:main.c        ****                 while(startline){
 335:main.c        ****                     // read raw sensor values
 336:main.c        ****                     reflectance_read(&ref);
 337:main.c        ****                     reflectance_digital(&dig); 
 338:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 339:main.c        ****                         motor_turn(50,50,50);       // motor forward
 340:main.c        ****                         Beep(60,80);
 341:main.c        ****                     }
 342:main.c        ****                     else{
 343:main.c        ****                         motor_forward(0,0);       // Stop motors
 344:main.c        ****                         startline = false;
 345:main.c        ****                     }
 346:main.c        ****                 }
 347:main.c        ****             IR_wait();  // wait for IR command
 348:main.c        ****             led = !led;
 349:main.c        ****             BatteryLed_Write(led);   
 350:main.c        ****             
 351:main.c        ****             // Toggle led when IR signal is received
 352:main.c        ****             while(loop)
 353:main.c        ****             {   
 354:main.c        ****                 if(led){
 355:main.c        ****                     // read raw sensor values
 356:main.c        ****                     reflectance_read(&ref);
 357:main.c        ****                     reflectance_digital(&dig); 
 358:main.c        ****                     
 359:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 360:main.c        ****                         motor_turn(50,50,50);       // motor forward
 361:main.c        ****                         vTaskDelay(50);
 362:main.c        ****                         count++;
 363:main.c        ****                         printf("count %d \n",count);
 364:main.c        ****                         if(count >= 7){
 365:main.c        ****                             motor_forward(0,0);       // Stop motors
 366:main.c        ****                             loop = false;
 367:main.c        ****                         }
 368:main.c        ****                     }
 369:main.c        ****                     else{
 370:main.c        ****                          motor_turn(50,50,50);       // motor forward
 371:main.c        ****                         Beep(100,100);
 372:main.c        ****                     }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 8


 373:main.c        ****                 }
 374:main.c        ****                 else {
 375:main.c        ****                     printf("Led is OFF\n");
 376:main.c        ****                     loop = false;
 377:main.c        ****                 }
 378:main.c        ****                
 379:main.c        ****             }    
 380:main.c        ****         }
 381:main.c        ****     }
 382:main.c        ****  }   
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        **** 
 386:main.c        **** #if 0
 387:main.c        **** //IR receiverm - how to wait for IR remote commands
 388:main.c        **** void zmain(void)
 389:main.c        **** {
 390:main.c        ****     uint8_t button_;
 391:main.c        ****     printf("\nStart\n");
 392:main.c        ****     
 393:main.c        ****     while(true){
 394:main.c        ****         button_ = SW1_Read();
 395:main.c        ****         if(button_==0){
 396:main.c        ****             IR_Start();
 397:main.c        ****             printf("\n\nIR test\n");
 398:main.c        ****             struct sensors_ ref;
 399:main.c        ****             struct sensors_ dig;
 400:main.c        ****             bool led = false,loop = true, startline= true/*, crossline= true*/;
 401:main.c        ****             int count =0;
 402:main.c        ****             motor_start();              // enable motor controller 
 403:main.c        ****             IR_flush(); // clear IR receive buffer
 404:main.c        ****             printf("Buffer cleared\n");
 405:main.c        ****             
 406:main.c        ****             reflectance_start();
 407:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 408:main.c        ****             vTaskDelay(200);
 409:main.c        ****                 while(startline){
 410:main.c        ****                     // read raw sensor values
 411:main.c        ****                     reflectance_read(&ref);
 412:main.c        ****                     reflectance_digital(&dig); 
 413:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 414:main.c        ****                         motor_turn(50,50,0);       // motor forward
 415:main.c        ****                         //Beep(60,80);
 416:main.c        ****                     }
 417:main.c        ****                     else{
 418:main.c        ****                         motor_forward(0,0);       // Stop motors
 419:main.c        ****                         startline = false;
 420:main.c        ****                     }
 421:main.c        ****                 }
 422:main.c        ****             IR_wait();  // wait for IR command
 423:main.c        ****             led = !led;
 424:main.c        ****             BatteryLed_Write(led);   
 425:main.c        ****             
 426:main.c        ****             // Toggle led when IR signal is received
 427:main.c        ****             while(loop)
 428:main.c        ****             {   
 429:main.c        ****                 if(led){
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 9


 430:main.c        ****                     //do {
 431:main.c        ****                         // read raw sensor values
 432:main.c        ****                     //reflectance_read(&ref);
 433:main.c        ****                     reflectance_digital(&dig); 
 434:main.c        ****                     
 435:main.c        ****                    
 436:main.c        ****                         /*if(dig.l3 == 1 && dig.l2 == 1 && dig.l1 == 1 && dig.r3 == 1 && dig.r2 == 
 437:main.c        ****                             motor_forward(0,0);
 438:main.c        ****                             count++;
 439:main.c        ****                             if(count==1){
 440:main.c        ****                                 motor_turn(50,50,50);       // motor forward
 441:main.c        ****                             }
 442:main.c        ****                             if (count==2){
 443:main.c        ****                                 motor_turn_left(10,100,500);
 444:main.c        ****                             }
 445:main.c        ****                             if (count<=4){
 446:main.c        ****                                 motor_turn_right(100,10,500);
 447:main.c        ****                             }
 448:main.c        ****                             if (count==5){
 449:main.c        ****                                 motor_forward(0,0);       // Stop motors
 450:main.c        ****                                 led = false;
 451:main.c        ****                                 BatteryLed_Write(led);
 452:main.c        ****                             }
 453:main.c        ****                         } */
 454:main.c        ****                         if(dig.r2 == 1 && dig.r1 == 1){
 455:main.c        ****                             //count++;
 456:main.c        ****                             motor_turn(100,10,0);       // motor turn left
 457:main.c        ****                             //Beep(20,20);
 458:main.c        ****                             vTaskDelay(0);
 459:main.c        ****                             
 460:main.c        ****                             printf("count %d \n",count);
 461:main.c        ****                         }
 462:main.c        ****                         if(dig.l2 == 1 && dig.l1 == 1){
 463:main.c        ****                             //count++;
 464:main.c        ****                             motor_turn(10,100,0);       // motor turn right
 465:main.c        ****                            // Beep(20,20);
 466:main.c        ****                             vTaskDelay(0);
 467:main.c        ****                             
 468:main.c        ****                             printf("count %d \n",count);
 469:main.c        ****                         }
 470:main.c        ****                        // printf("count %d \n",count);
 471:main.c        ****                         if (dig.l1 == 1 && dig.r1 == 1){
 472:main.c        ****                             
 473:main.c        ****                             motor_turn(50,50,0);       // motor forward
 474:main.c        ****                             vTaskDelay(0);
 475:main.c        ****                             //Beep(50,50);
 476:main.c        ****                             //count++;
 477:main.c        ****                             printf("count %d \n",count);
 478:main.c        ****                         }
 479:main.c        ****                    
 480:main.c        ****                 }
 481:main.c        ****                 else {
 482:main.c        ****                     printf("Led is OFF\n");
 483:main.c        ****                     loop = false;
 484:main.c        ****                 }
 485:main.c        ****                
 486:main.c        ****             }    
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 10


 487:main.c        ****         }
 488:main.c        ****     }
 489:main.c        ****  }  
 490:main.c        **** #endif
 491:main.c        **** 
 492:main.c        **** #if 0
 493:main.c        **** //IR receiverm - how to wait for IR remote commands
 494:main.c        **** void zmain(void)
 495:main.c        **** {
 496:main.c        ****     //IR receiverm - how to wait for IR remote commands
 497:main.c        **** void zmain(void);
 498:main.c        **** 
 499:main.c        ****     uint8_t button_;
 500:main.c        ****     printf("\nStart\n");
 501:main.c        **** 
 502:main.c        ****     while(true){
 503:main.c        ****         button_ = SW1_Read();
 504:main.c        ****         if(button_==0){
 505:main.c        ****             IR_Start();
 506:main.c        ****             printf("\n\nIR test\n");
 507:main.c        ****             struct sensors_ ref;
 508:main.c        ****             struct sensors_ dig;
 509:main.c        ****             bool led = false,loop = true, startline= true;
 510:main.c        ****             int count =0;
 511:main.c        ****             motor_start();              // enable motor controller 
 512:main.c        ****             IR_flush(); // clear IR receive buffer
 513:main.c        ****             printf("Buffer cleared\n");
 514:main.c        **** 
 515:main.c        ****             reflectance_start();
 516:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 517:main.c        ****             vTaskDelay(200);
 518:main.c        ****                 while(startline){
 519:main.c        ****                     // read raw sensor values
 520:main.c        ****                     reflectance_read(&ref);
 521:main.c        ****                     reflectance_digital(&dig); 
 522:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 523:main.c        ****                         motor_turn(50,50,50);       // motor forward
 524:main.c        ****                         Beep(60,80);
 525:main.c        ****                     }
 526:main.c        **** 
 527:main.c        ****                     else{
 528:main.c        ****                         motor_forward(0,0);       // Stop motors
 529:main.c        ****                         startline = false;
 530:main.c        ****                     }
 531:main.c        ****                 }
 532:main.c        ****             IR_wait();  // wait for IR command
 533:main.c        ****             led = !led;
 534:main.c        ****             BatteryLed_Write(led);   
 535:main.c        **** 
 536:main.c        ****             // Toggle led when IR signal is received
 537:main.c        ****             while(loop)
 538:main.c        ****             {   
 539:main.c        ****                 if(led){
 540:main.c        ****                     // read raw sensor values
 541:main.c        ****                     reflectance_read(&ref);
 542:main.c        ****                     reflectance_digital(&dig); 
 543:main.c        **** 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 11


 544:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1){
 545:main.c        ****                         count++;
 546:main.c        ****                         printf("\nStart\n");
 547:main.c        ****                         printf("count %d \n",count);
 548:main.c        **** 
 549:main.c        **** 
 550:main.c        ****                         while (dig.r3 == 1 && dig.l3 == 1){
 551:main.c        ****                          motor_turn(50,49,0);
 552:main.c        ****                         reflectance_digital(&dig);
 553:main.c        ****                         }
 554:main.c        ****                         if(count >= 2){
 555:main.c        ****                             motor_forward(210,0);       // Stop motors
 556:main.c        ****                         }
 557:main.c        ****                     }
 558:main.c        **** 
 559:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 1){
 560:main.c        ****                         motor_turn(210,210,0);   //goes forward lul
 561:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 562:main.c        ****                     }
 563:main.c        ****                     else if (dig.l1 == 0 && dig.r1 == 1){
 564:main.c        ****                         motor_turn(210,0,0);  //turns right lul
 565:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 566:main.c        ****                     }
 567:main.c        ****                     else if (dig.l1 == 1 && dig.r1 == 0){
 568:main.c        ****                         motor_turn(0,210,0);   ///should turn left, right lul??   
 569:main.c        ****                         printf("%5d %5d", ref.l1, ref.r1);
 570:main.c        ****                     }
 571:main.c        ****                     else if (dig.l3 == 1 && dig.r3 == 1 && dig.l1 == 1 && dig.r1 == 1 && dig.l2 == 
 572:main.c        ****                         motor_turn(0,0,100000);   ///should stop, right lul??   
 573:main.c        **** 
 574:main.c        **** 
 575:main.c        ****                         }
 576:main.c        ****                     }
 577:main.c        ****                 }
 578:main.c        **** 
 579:main.c        **** 
 580:main.c        ****             }    
 581:main.c        ****         }
 582:main.c        **** 
 583:main.c        **** }   
 584:main.c        **** #endif
 585:main.c        **** 
 586:main.c        **** 
 587:main.c        **** #if 0
 588:main.c        **** //reflectance
 589:main.c        **** void zmain(void)
 590:main.c        **** {
 591:main.c        ****     struct sensors_ ref;
 592:main.c        ****     struct sensors_ dig;
 593:main.c        **** 
 594:main.c        ****     reflectance_start();
 595:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 596:main.c        ****     
 597:main.c        **** 
 598:main.c        ****     while(true)
 599:main.c        ****     {
 600:main.c        ****         // read raw sensor values
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 12


 601:main.c        ****         reflectance_read(&ref);
 602:main.c        ****         // print out each period of reflectance sensors
 603:main.c        ****         printf("%5d %5d %5d %5d %5d %5d\r\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3);     
 604:main.c        ****         
 605:main.c        ****         // read digital values that are based on threshold. 0 = white, 1 = black
 606:main.c        ****         // when blackness value is over threshold the sensors reads 1, otherwise 0
 607:main.c        ****         reflectance_digital(&dig); 
 608:main.c        ****         //print out 0 or 1 according to results of reflectance period
 609:main.c        ****         printf("%5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3);    
 610:main.c        ****         
 611:main.c        ****         vTaskDelay(200);
 612:main.c        ****     }
 613:main.c        **** }   
 614:main.c        **** #endif
 615:main.c        **** 
 616:main.c        **** 
 617:main.c        **** #if 0
 618:main.c        **** //motor
 619:main.c        **** void zmain(void)
 620:main.c        **** {
 621:main.c        ****     struct sensors_ ref;
 622:main.c        ****     struct sensors_ dig;
 623:main.c        **** 
 624:main.c        ****     reflectance_start();
 625:main.c        ****     reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold
 626:main.c        ****     
 627:main.c        ****     reflectance_digital(&dig);
 628:main.c        ****     
 629:main.c        ****     motor_start();              // enable motor controller
 630:main.c        ****     motor_forward(0,0);         // set speed to zero to stop motors
 631:main.c        **** 
 632:main.c        ****     vTaskDelay(3000);
 633:main.c        ****     
 634:main.c        ****     if(dig.l3, dig.l2, dig.l1){
 635:main.c        ****         
 636:main.c        ****     }
 637:main.c        ****     motor_forward(100,2000);     // moving forward
 638:main.c        ****     motor_turn(200,50,2000);     // turn
 639:main.c        ****     motor_turn(50,200,2000);     // turn
 640:main.c        ****     motor_backward(100,2000);    // moving backward
 641:main.c        ****      
 642:main.c        ****     motor_forward(0,0);         // stop motors
 643:main.c        **** 
 644:main.c        ****     motor_stop();               // disable motor controller
 645:main.c        ****     
 646:main.c        ****     while(true)
 647:main.c        ****     {
 648:main.c        ****         vTaskDelay(100);
 649:main.c        ****     }
 650:main.c        **** }
 651:main.c        **** #endif
 652:main.c        **** 
 653:main.c        **** #if 0
 654:main.c        **** /* Example of how to use te Accelerometer!!!*/
 655:main.c        **** void zmain(void)
 656:main.c        **** {
 657:main.c        ****     struct accData_ data;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 13


 658:main.c        ****     
 659:main.c        ****     printf("Accelerometer test...\n");
 660:main.c        **** 
 661:main.c        ****     if(!LSM303D_Start()){
 662:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 663:main.c        ****         vTaskSuspend(NULL);
 664:main.c        ****     }
 665:main.c        ****     else {
 666:main.c        ****         printf("Device Ok...\n");
 667:main.c        ****     }
 668:main.c        ****     motor_start();              // enable motor controller
 669:main.c        ****     motor_forward(0,0);
 670:main.c        ****     srand(time(NULL));   // Initialization, should only be called once.
 671:main.c        ****     int r=0, counter=0;
 672:main.c        ****     while(true)
 673:main.c        ****     {
 674:main.c        ****         LSM303D_Read_Acc(&data);
 675:main.c        ****        
 676:main.c        ****         motor_forward(200,20);
 677:main.c        ****         //vTaskDelay(200);
 678:main.c        ****         if (counter == 0) r = rand() % 2;
 679:main.c        ****         if (counter > 19){
 680:main.c        ****             counter = 0;
 681:main.c        ****             r = rand() % 2;
 682:main.c        ****         }// Returns a pseudo-random integer between 0 and RAND_MAX.
 683:main.c        ****             if(r == 0){
 684:main.c        ****                 motor_turn(200,50,5);
 685:main.c        ****                 vTaskDelay(0);
 686:main.c        ****                 //motor_forward(0,0);
 687:main.c        ****             }
 688:main.c        ****             else if(r == 1){
 689:main.c        ****                 motor_turn(50,200,5);
 690:main.c        ****                 vTaskDelay(0);
 691:main.c        ****                 //motor_forward(0,0);
 692:main.c        ****             }
 693:main.c        ****             else {
 694:main.c        ****                 motor_forward(200,20);
 695:main.c        ****                 vTaskDelay(0);
 696:main.c        ****             }
 697:main.c        ****         LSM303D_Read_Acc(&data);
 698:main.c        ****         if((data.accX<-4000)){
 699:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 700:main.c        ****             if(r == 0){
 701:main.c        ****                 motor_backward(80,50);
 702:main.c        ****                 motor_turn(200,50,500);
 703:main.c        ****                 vTaskDelay(0);
 704:main.c        ****                 //motor_forward(0,0);
 705:main.c        ****             }
 706:main.c        ****             else{
 707:main.c        ****                 motor_backward(80,50);
 708:main.c        ****                 motor_turn(50,200,500);
 709:main.c        ****                 vTaskDelay(0);
 710:main.c        ****                 //motor_forward(0,0);
 711:main.c        ****             }
 712:main.c        ****             motor_forward(100,100);
 713:main.c        ****         }
 714:main.c        ****         counter++;
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 14


 715:main.c        ****         printf("%8d %8d %8d\n",data.accX, data.accY, data.accZ);
 716:main.c        ****         vTaskDelay(0);
 717:main.c        ****     }
 718:main.c        ****  }   
 719:main.c        **** #endif    
 720:main.c        **** 
 721:main.c        **** #if 0
 722:main.c        **** // MQTT test
 723:main.c        **** void zmain(void)
 724:main.c        **** {
 725:main.c        ****     int ctr = 0;
 726:main.c        **** 
 727:main.c        ****     printf("\nBoot\n");
 728:main.c        ****     send_mqtt("Zumo01/debug", "Boot");
 729:main.c        **** 
 730:main.c        ****     //BatteryLed_Write(1); // Switch led on 
 731:main.c        ****     BatteryLed_Write(0); // Switch led off 
 732:main.c        **** 
 733:main.c        ****     while(true)
 734:main.c        ****     {
 735:main.c        ****         printf("Ctr: %d, Button: %d\n", ctr, SW1_Read());
 736:main.c        ****         print_mqtt("Zumo01/debug", "Ctr: %d, Button: %d", ctr, SW1_Read());
 737:main.c        **** 
 738:main.c        ****         vTaskDelay(1000);
 739:main.c        ****         ctr++;
 740:main.c        ****     }
 741:main.c        ****  }   
 742:main.c        **** #endif
 743:main.c        **** 
 744:main.c        **** #if 0
 745:main.c        **** 
 746:main.c        ****     
 747:main.c        **** void zmain(void)
 748:main.c        **** {
 749:main.c        ****     Ultra_Start();
 750:main.c        ****     motor_start(0,0);
 751:main.c        ****     motor_forward(0,0);
 752:main.c        ****     
 753:main.c        ****     vTaskDelay(3000);
 754:main.c        ****     
 755:main.c        ****     while(true){
 756:main.c        ****         int distance = Ultra_GetDistance();
 757:main.c        ****     
 758:main.c        ****         if(distance <= 10 && distance !=0){
 759:main.c        ****             int r = rand() % 2;      // Returns a pseudo-random integer between 0 and RAND_MAX.
 760:main.c        ****             if(r == 0){
 761:main.c        ****                 motor_turn(50,200,500);
 762:main.c        ****                 vTaskDelay(0);
 763:main.c        ****                 print_mqtt("Zumo006/turn", "left");
 764:main.c        ****                 //motor_forward(0,0);
 765:main.c        ****             }
 766:main.c        ****             else{
 767:main.c        ****                 motor_turn(200,50,500);
 768:main.c        ****                 vTaskDelay(0);
 769:main.c        ****                 print_mqtt("Zumo006/turn", "right");
 770:main.c        ****                 //motor_forward(0,0);
 771:main.c        ****             }
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 15


 772:main.c        ****             motor_forward(100,100);
 773:main.c        ****         }
 774:main.c        ****         
 775:main.c        ****     }   
 776:main.c        **** }
 777:main.c        **** #endif
 778:main.c        **** 
 779:main.c        **** #if 0
 780:main.c        **** //IR receiverm - how to wait for IR remote commands
 781:main.c        **** void zmain(void)
 782:main.c        **** {
 783:main.c        ****     RTC_Start(); // start real time clock
 784:main.c        ****     
 785:main.c        ****     RTC_TIME_DATE now;
 786:main.c        **** 
 787:main.c        ****     time_t myTime;
 788:main.c        ****     struct tm * timeinfo;
 789:main.c        ****     time( &myTime );
 790:main.c        ****     timeinfo = localtime( &myTime );
 791:main.c        ****     
 792:main.c        ****     // set current time
 793:main.c        ****     now.Hour = timeinfo->tm_hour;
 794:main.c        ****     now.Min = timeinfo->tm_min;
 795:main.c        ****     now.Sec = timeinfo->tm_sec6;
 796:main.c        ****     now.DayOfMonth = timeinfo->tm_mday;
 797:main.c        ****     now.Month = timeinfo->tm_mon+1;
 798:main.c        ****     now.Year = timeinfo->tm_year+1900;
 799:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 800:main.c        ****     
 801:main.c        ****     uint8_t button_;
 802:main.c        ****     printf("\nStart\n");
 803:main.c        ****     
 804:main.c        ****     while(true){
 805:main.c        ****         button_ = SW1_Read();
 806:main.c        ****         if(button_==0){
 807:main.c        ****             IR_Start();
 808:main.c        ****             printf("\n\nIR test\n");
 809:main.c        ****             struct sensors_ ref;
 810:main.c        ****             struct sensors_ dig;
 811:main.c        ****             bool led = false,loop = true, startline= true;
 812:main.c        ****             int count =0;
 813:main.c        ****             motor_start();              // enable motor controller 
 814:main.c        ****             IR_flush(); // clear IR receive buffer
 815:main.c        ****             printf("Buffer cleared\n");
 816:main.c        ****             
 817:main.c        ****             reflectance_start();
 818:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
 819:main.c        ****             vTaskDelay(200);
 820:main.c        ****                 while(startline){
 821:main.c        ****                     // read raw sensor values
 822:main.c        ****                     reflectance_read(&ref);
 823:main.c        ****                     reflectance_digital(&dig); 
 824:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 825:main.c        ****                         motor_turn(50,50,50);       // motor forward
 826:main.c        ****                         Beep(60,80);
 827:main.c        ****                     }
 828:main.c        ****                     else{
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 16


 829:main.c        ****                         motor_forward(0,0);       // Stop motors
 830:main.c        ****                         startline = false;
 831:main.c        ****                     }
 832:main.c        ****                 }
 833:main.c        ****             IR_wait();  // wait for IR command
 834:main.c        ****             led = !led;
 835:main.c        ****             BatteryLed_Write(led);   
 836:main.c        ****             
 837:main.c        ****             // Toggle led when IR signal is received
 838:main.c        ****             while(loop)
 839:main.c        ****             {   
 840:main.c        ****                 if(led){
 841:main.c        ****                     // read raw sensor values
 842:main.c        ****                     reflectance_read(&ref);
 843:main.c        ****                     reflectance_digital(&dig); 
 844:main.c        ****                     
 845:main.c        ****                     if(dig.l3 == 1 && dig.r3 == 1 ){
 846:main.c        ****                         motor_turn(50,50,50);       // motor forward
 847:main.c        ****                         motor_forward(0,0);       // Stop motors
 848:main.c        ****                         vTaskDelay(50);
 849:main.c        ****                         count++;
 850:main.c        ****                         printf("count %d \n",count);
 851:main.c        ****                         printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 852:main.c        ****                         print_mqtt("Zumo006/lap", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 853:main.c        ****                         /*if(count >= 7){
 854:main.c        ****                             motor_forward(0,0);       // Stop motors
 855:main.c        ****                             loop = false;
 856:main.c        ****                         }
 857:main.c        ****                     }
 858:main.c        ****                     else{
 859:main.c        ****                          motor_turn(50,50,50);       // motor forward
 860:main.c        ****                         Beep(100,100);
 861:main.c        ****                     }
 862:main.c        ****                 }
 863:main.c        ****                 else {
 864:main.c        ****                     printf("Led is OFF\n");
 865:main.c        ****                     loop = false;
 866:main.c        ****                 }
 867:main.c        ****                
 868:main.c        ****             }    
 869:main.c        ****         }
 870:main.c        ****     }
 871:main.c        ****  }
 872:main.c        **** #endif
 873:main.c        **** 
 874:main.c        **** #if 0
 875:main.c        **** void zmain(void)
 876:main.c        **** {    
 877:main.c        ****     struct accData_ data;
 878:main.c        ****     struct sensors_ ref;
 879:main.c        ****     struct sensors_ dig;
 880:main.c        ****     
 881:main.c        ****     printf("MQTT and sensor test...\n");
 882:main.c        **** 
 883:main.c        ****     if(!LSM303D_Start()){
 884:main.c        ****         printf("LSM303D failed to initialize!!! Program is Ending!!!\n");
 885:main.c        ****         vTaskSuspend(NULL);
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 17


 886:main.c        ****     }
 887:main.c        ****     else {
 888:main.c        ****         printf("Accelerometer Ok...\n");
 889:main.c        ****     }
 890:main.c        ****     
 891:main.c        ****     int ctr = 0;
 892:main.c        ****     reflectance_start();
 893:main.c        ****     while(true)
 894:main.c        ****     {
 895:main.c        ****         LSM303D_Read_Acc(&data);
 896:main.c        ****         // send data when we detect a hit and at 10 second intervals
 897:main.c        ****         if(data.accX > 1500 || ++ctr > 1000) {
 898:main.c        ****             printf("Acc: %8d %8d %8d\n",data.accX, data.accY, data.accZ);
 899:main.c        ****             print_mqtt("Zumo01/acc", "%d,%d,%d", data.accX, data.accY, data.accZ);
 900:main.c        ****             reflectance_read(&ref);
 901:main.c        ****             printf("Ref: %8d %8d %8d %8d %8d %8d\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3
 902:main.c        ****             print_mqtt("Zumo01/ref", "%d,%d,%d,%d,%d,%d", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, r
 903:main.c        ****             reflectance_digital(&dig);
 904:main.c        ****             printf("Dig: %8d %8d %8d %8d %8d %8d\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3
 905:main.c        ****             print_mqtt("Zumo01/dig", "%d,%d,%d,%d,%d,%d", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, d
 906:main.c        ****             ctr = 0;
 907:main.c        ****         }
 908:main.c        ****         vTaskDelay(10);
 909:main.c        ****     }
 910:main.c        ****  }   
 911:main.c        **** 
 912:main.c        **** #endif
 913:main.c        **** 
 914:main.c        **** #if 0
 915:main.c        **** void zmain(void)
 916:main.c        **** {    
 917:main.c        ****     RTC_Start(); // start real time clock
 918:main.c        ****     
 919:main.c        ****     RTC_TIME_DATE now;
 920:main.c        **** 
 921:main.c        ****     // set current time
 922:main.c        ****     now.Hour = 12;
 923:main.c        ****     now.Min = 34;
 924:main.c        ****     now.Sec = 56;
 925:main.c        ****     now.DayOfMonth = 25;
 926:main.c        ****     now.Month = 9;
 927:main.c        ****     now.Year = 2018;
 928:main.c        ****     RTC_WriteTime(&now); // write the time to real time clock
 929:main.c        **** 
 930:main.c        ****     while(true)
 931:main.c        ****     {
 932:main.c        ****         if(SW1_Read() == 0) {
 933:main.c        ****             // read the current time
 934:main.c        ****             RTC_DisableInt(); /* Disable Interrupt of RTC Component */
 935:main.c        ****             now = *RTC_ReadTime(); /* copy the current time to a local variable */
 936:main.c        ****             RTC_EnableInt(); /* Enable Interrupt of RTC Component */
 937:main.c        **** 
 938:main.c        ****             // print the current time
 939:main.c        ****             printf("%2d:%02d.%02d\n", now.Hour, now.Min, now.Sec);
 940:main.c        ****             print_mqtt("Zumo006/time", "%2d:%02d.%02d", now.Hour, now.Min, now.Sec);
 941:main.c        ****             
 942:main.c        ****             // wait until button is released
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 18


 943:main.c        ****             while(SW1_Read() == 0) vTaskDelay(50);
 944:main.c        ****         }
 945:main.c        ****         vTaskDelay(50);
 946:main.c        ****     }
 947:main.c        ****  }   
 948:main.c        **** #endif
 949:main.c        **** 
 950:main.c        **** #if 1
 951:main.c        **** //main project
 952:main.c        **** void zmain(void)
 953:main.c        **** {
  28              		.loc 1 953 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 8AB0     		sub	sp, sp, #40
  37              		.cfi_def_cfa_offset 48
 954:main.c        ****     struct accData_ data;
 955:main.c        ****     
 956:main.c        ****     uint8_t button_;
 957:main.c        ****     printf("\nStart\n");
  38              		.loc 1 957 0
  39 0004 5248     		ldr	r0, .L15
  40 0006 FFF7FEFF 		bl	puts
  41              	.LVL0:
  42              	.L2:
 958:main.c        ****     
 959:main.c        ****     while(true){
 960:main.c        ****         button_ = SW1_Read();
  43              		.loc 1 960 0
  44 000a FFF7FEFF 		bl	SW1_Read
  45              	.LVL1:
 961:main.c        ****         if(button_==0){
  46              		.loc 1 961 0
  47 000e 0028     		cmp	r0, #0
  48 0010 FBD1     		bne	.L2
  49              	.LBB2:
 962:main.c        ****             IR_Start();
  50              		.loc 1 962 0
  51 0012 FFF7FEFF 		bl	IR_Start
  52              	.LVL2:
 963:main.c        ****             printf("\n\nIR test\n");
  53              		.loc 1 963 0
  54 0016 4F48     		ldr	r0, .L15+4
  55 0018 FFF7FEFF 		bl	puts
  56              	.LVL3:
 964:main.c        ****             struct sensors_ ref;
 965:main.c        ****             struct sensors_ dig;
 966:main.c        ****             bool led = false,loop1 = true, startline= true, loop2 = true;
 967:main.c        ****             int count =0;
 968:main.c        ****             motor_start();              // enable motor controller
  57              		.loc 1 968 0
  58 001c FFF7FEFF 		bl	motor_start
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 19


  59              	.LVL4:
 969:main.c        ****             print_mqtt("Zumo006/ready","line");
  60              		.loc 1 969 0
  61 0020 4D49     		ldr	r1, .L15+8
  62 0022 4E48     		ldr	r0, .L15+12
  63 0024 FFF7FEFF 		bl	print_mqtt
  64              	.LVL5:
 970:main.c        ****             IR_flush(); // clear IR receive buffer
  65              		.loc 1 970 0
  66 0028 FFF7FEFF 		bl	IR_flush
  67              	.LVL6:
 971:main.c        ****             printf("Buffer cleared\n");
  68              		.loc 1 971 0
  69 002c 4C48     		ldr	r0, .L15+16
  70 002e FFF7FEFF 		bl	puts
  71              	.LVL7:
 972:main.c        ****             
 973:main.c        ****             reflectance_start();
  72              		.loc 1 973 0
  73 0032 FFF7FEFF 		bl	reflectance_start
  74              	.LVL8:
 974:main.c        ****             reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor t
  75              		.loc 1 974 0
  76 0036 42F22830 		movw	r0, #9000
  77 003a 0190     		str	r0, [sp, #4]
  78 003c 0090     		str	r0, [sp]
  79 003e 42F6F823 		movw	r3, #11000
  80 0042 1A46     		mov	r2, r3
  81 0044 0146     		mov	r1, r0
  82 0046 FFF7FEFF 		bl	reflectance_set_threshold
  83              	.LVL9:
 975:main.c        ****             vTaskDelay(200);
  84              		.loc 1 975 0
  85 004a C820     		movs	r0, #200
  86 004c FFF7FEFF 		bl	vTaskDelay
  87              	.LVL10:
 966:main.c        ****             int count =0;
  88              		.loc 1 966 0
  89 0050 0124     		movs	r4, #1
 976:main.c        ****                 while(startline){
  90              		.loc 1 976 0
  91 0052 1CE0     		b	.L3
  92              	.LVL11:
  93              	.L6:
 977:main.c        ****                     // read raw sensor values
 978:main.c        ****                     reflectance_read(&ref);
  94              		.loc 1 978 0
  95 0054 02A8     		add	r0, sp, #8
  96 0056 FFF7FEFF 		bl	reflectance_read
  97              	.LVL12:
 979:main.c        ****                     reflectance_digital(&dig); 
  98              		.loc 1 979 0
  99 005a 05A8     		add	r0, sp, #20
 100 005c FFF7FEFF 		bl	reflectance_digital
 101              	.LVL13:
 980:main.c        ****                     if(dig.l3 != 1 && dig.r3 != 1){
 102              		.loc 1 980 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 20


 103 0060 BDF81430 		ldrh	r3, [sp, #20]
 104 0064 012B     		cmp	r3, #1
 105 0066 0DD0     		beq	.L4
 106              		.loc 1 980 0 is_stmt 0 discriminator 1
 107 0068 BDF81E30 		ldrh	r3, [sp, #30]
 108 006c 012B     		cmp	r3, #1
 109 006e 09D0     		beq	.L4
 981:main.c        ****                         motor_turn(50,50,50);       // motor forward
 110              		.loc 1 981 0 is_stmt 1
 111 0070 3222     		movs	r2, #50
 112 0072 1146     		mov	r1, r2
 113 0074 1046     		mov	r0, r2
 114 0076 FFF7FEFF 		bl	motor_turn
 115              	.LVL14:
 982:main.c        ****                         Beep(60,80);
 116              		.loc 1 982 0
 117 007a 5021     		movs	r1, #80
 118 007c 3C20     		movs	r0, #60
 119 007e FFF7FEFF 		bl	Beep
 120              	.LVL15:
 121 0082 04E0     		b	.L3
 122              	.L4:
 983:main.c        ****                     }
 984:main.c        ****                     else{
 985:main.c        ****                         motor_forward(0,0);       // Stop motors
 123              		.loc 1 985 0
 124 0084 0021     		movs	r1, #0
 125 0086 0846     		mov	r0, r1
 126 0088 FFF7FEFF 		bl	motor_forward
 127              	.LVL16:
 986:main.c        ****                         startline = false;
 128              		.loc 1 986 0
 129 008c 0024     		movs	r4, #0
 130              	.LVL17:
 131              	.L3:
 976:main.c        ****                     // read raw sensor values
 132              		.loc 1 976 0
 133 008e 002C     		cmp	r4, #0
 134 0090 E0D1     		bne	.L6
 987:main.c        ****                     }
 988:main.c        ****                 }
 989:main.c        ****             print_mqtt("Zumo006/ready","line");
 135              		.loc 1 989 0
 136 0092 3149     		ldr	r1, .L15+8
 137 0094 3148     		ldr	r0, .L15+12
 138 0096 FFF7FEFF 		bl	print_mqtt
 139              	.LVL18:
 990:main.c        ****             IR_wait();  // wait for IR command
 140              		.loc 1 990 0
 141 009a FFF7FEFF 		bl	IR_wait
 142              	.LVL19:
 991:main.c        ****             CySysTickEnable();
 143              		.loc 1 991 0
 144 009e FFF7FEFF 		bl	CySysTickEnable
 145              	.LVL20:
 992:main.c        ****             CySysTickStart();
 146              		.loc 1 992 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 21


 147 00a2 FFF7FEFF 		bl	CySysTickStart
 148              	.LVL21:
 993:main.c        ****             int start = CySysTickGetValue();
 149              		.loc 1 993 0
 150 00a6 FFF7FEFF 		bl	CySysTickGetValue
 151              	.LVL22:
 994:main.c        ****             print_mqtt("Zumo006/start","%d", start);
 152              		.loc 1 994 0
 153 00aa 0246     		mov	r2, r0
 154 00ac 2D49     		ldr	r1, .L15+20
 155 00ae 2E48     		ldr	r0, .L15+24
 156              	.LVL23:
 157 00b0 FFF7FEFF 		bl	print_mqtt
 158              	.LVL24:
 995:main.c        ****             led = !led;
 996:main.c        ****             BatteryLed_Write(led);   
 159              		.loc 1 996 0
 160 00b4 0120     		movs	r0, #1
 161 00b6 FFF7FEFF 		bl	BatteryLed_Write
 162              	.LVL25:
 163 00ba 3EE0     		b	.L7
 164              	.L13:
 997:main.c        ****             
 998:main.c        ****             // Toggle led when IR signal is received
 999:main.c        ****             while(loop1)
1000:main.c        ****             {   
1001:main.c        ****                 if(led){
1002:main.c        ****                     while(loop2){
1003:main.c        ****                     // read raw sensor values
1004:main.c        ****                     reflectance_read(&ref);
1005:main.c        ****                     reflectance_digital(&dig); 
1006:main.c        **** 
1007:main.c        ****                     LSM303D_Read_Acc(&data);
1008:main.c        ****                     do{
1009:main.c        ****                         motor_forward(100,100);
 165              		.loc 1 1009 0
 166 00bc 6421     		movs	r1, #100
 167 00be 0846     		mov	r0, r1
 168 00c0 FFF7FEFF 		bl	motor_forward
 169              	.LVL26:
1010:main.c        ****                         if(data.accX<-4000){
 170              		.loc 1 1010 0
 171 00c4 BDF92030 		ldrsh	r3, [sp, #32]
 172 00c8 13F57A6F 		cmn	r3, #4000
 173 00cc 27DA     		bge	.L8
 174              	.LBB3:
1011:main.c        ****                             print_mqtt("Zumo006/hit","%d", CySysTickGetValue());
 175              		.loc 1 1011 0
 176 00ce FFF7FEFF 		bl	CySysTickGetValue
 177              	.LVL27:
 178 00d2 0246     		mov	r2, r0
 179 00d4 2349     		ldr	r1, .L15+20
 180 00d6 2548     		ldr	r0, .L15+28
 181 00d8 FFF7FEFF 		bl	print_mqtt
 182              	.LVL28:
1012:main.c        ****                             int r = rand() % 2;      // Returns a pseudo-random integer between 0 a
 183              		.loc 1 1012 0
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 22


 184 00dc FFF7FEFF 		bl	rand
 185              	.LVL29:
 186 00e0 234B     		ldr	r3, .L15+32
 187 00e2 1840     		ands	r0, r0, r3
 188 00e4 03D5     		bpl	.L9
 189 00e6 0138     		subs	r0, r0, #1
 190 00e8 60F00100 		orn	r0, r0, #1
 191 00ec 0130     		adds	r0, r0, #1
 192              	.L9:
 193              	.LVL30:
1013:main.c        ****                             if(r == 0){
 194              		.loc 1 1013 0
 195 00ee 48B9     		cbnz	r0, .L10
1014:main.c        ****                                 //motor_backward(80,50);
1015:main.c        ****                                 motor_turn(200,50,500);
 196              		.loc 1 1015 0
 197 00f0 4FF4FA72 		mov	r2, #500
 198 00f4 3221     		movs	r1, #50
 199 00f6 C820     		movs	r0, #200
 200              	.LVL31:
 201 00f8 FFF7FEFF 		bl	motor_turn
 202              	.LVL32:
1016:main.c        ****                                 vTaskDelay(0);
 203              		.loc 1 1016 0
 204 00fc 0020     		movs	r0, #0
 205 00fe FFF7FEFF 		bl	vTaskDelay
 206              	.LVL33:
 207 0102 08E0     		b	.L11
 208              	.LVL34:
 209              	.L10:
1017:main.c        ****                                 //motor_forward(0,0);
1018:main.c        ****                             }
1019:main.c        ****                             else{
1020:main.c        ****                                 //motor_backward(80,50);
1021:main.c        ****                                 motor_turn(50,200,500);
 210              		.loc 1 1021 0
 211 0104 4FF4FA72 		mov	r2, #500
 212 0108 C821     		movs	r1, #200
 213 010a 3220     		movs	r0, #50
 214              	.LVL35:
 215 010c FFF7FEFF 		bl	motor_turn
 216              	.LVL36:
1022:main.c        ****                                 vTaskDelay(0);
 217              		.loc 1 1022 0
 218 0110 0020     		movs	r0, #0
 219 0112 FFF7FEFF 		bl	vTaskDelay
 220              	.LVL37:
 221              	.L11:
1023:main.c        ****                                 //motor_forward(0,0);
1024:main.c        ****                             }
1025:main.c        ****                             motor_forward(100,100);
 222              		.loc 1 1025 0
 223 0116 6421     		movs	r1, #100
 224 0118 0846     		mov	r0, r1
 225 011a FFF7FEFF 		bl	motor_forward
 226              	.LVL38:
 227              	.L8:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 23


 228              	.LBE3:
1026:main.c        ****                         }
1027:main.c        ****                         
1028:main.c        ****                     }while(dig.l3 != 1 && dig.r3 != 1);
 229              		.loc 1 1028 0
 230 011e BDF81430 		ldrh	r3, [sp, #20]
 231 0122 012B     		cmp	r3, #1
 232 0124 03D0     		beq	.L12
 233              		.loc 1 1028 0 is_stmt 0 discriminator 1
 234 0126 BDF81E30 		ldrh	r3, [sp, #30]
 235 012a 012B     		cmp	r3, #1
 236 012c C6D1     		bne	.L13
 237              	.L12:
1029:main.c        ****                     motor_turn(50,200,1000);
 238              		.loc 1 1029 0 is_stmt 1
 239 012e 4FF47A72 		mov	r2, #1000
 240 0132 C821     		movs	r1, #200
 241 0134 3220     		movs	r0, #50
 242 0136 FFF7FEFF 		bl	motor_turn
 243              	.LVL39:
 244              	.L7:
1004:main.c        ****                     reflectance_digital(&dig); 
 245              		.loc 1 1004 0
 246 013a 02A8     		add	r0, sp, #8
 247 013c FFF7FEFF 		bl	reflectance_read
 248              	.LVL40:
1005:main.c        **** 
 249              		.loc 1 1005 0
 250 0140 05A8     		add	r0, sp, #20
 251 0142 FFF7FEFF 		bl	reflectance_digital
 252              	.LVL41:
1007:main.c        ****                     do{
 253              		.loc 1 1007 0
 254 0146 08A8     		add	r0, sp, #32
 255 0148 FFF7FEFF 		bl	LSM303D_Read_Acc
 256              	.LVL42:
 257 014c B6E7     		b	.L13
 258              	.L16:
 259 014e 00BF     		.align	2
 260              	.L15:
 261 0150 00000000 		.word	.LC0
 262 0154 08000000 		.word	.LC1
 263 0158 14000000 		.word	.LC2
 264 015c 1C000000 		.word	.LC3
 265 0160 2C000000 		.word	.LC4
 266 0164 3C000000 		.word	.LC5
 267 0168 40000000 		.word	.LC6
 268 016c 50000000 		.word	.LC7
 269 0170 01000080 		.word	-2147483647
 270              	.LBE2:
 271              		.cfi_endproc
 272              	.LFE85:
 273              		.size	zmain, .-zmain
 274              		.section	.rodata.str1.4,"aMS",%progbits,1
 275              		.align	2
 276              	.LC0:
 277 0000 0A537461 		.ascii	"\012Start\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 24


 277      727400
 278 0007 00       		.space	1
 279              	.LC1:
 280 0008 0A0A4952 		.ascii	"\012\012IR test\000"
 280      20746573 
 280      7400
 281 0012 0000     		.space	2
 282              	.LC2:
 283 0014 6C696E65 		.ascii	"line\000"
 283      00
 284 0019 000000   		.space	3
 285              	.LC3:
 286 001c 5A756D6F 		.ascii	"Zumo006/ready\000"
 286      3030362F 
 286      72656164 
 286      7900
 287 002a 0000     		.space	2
 288              	.LC4:
 289 002c 42756666 		.ascii	"Buffer cleared\000"
 289      65722063 
 289      6C656172 
 289      656400
 290 003b 00       		.space	1
 291              	.LC5:
 292 003c 256400   		.ascii	"%d\000"
 293 003f 00       		.space	1
 294              	.LC6:
 295 0040 5A756D6F 		.ascii	"Zumo006/start\000"
 295      3030362F 
 295      73746172 
 295      7400
 296 004e 0000     		.space	2
 297              	.LC7:
 298 0050 5A756D6F 		.ascii	"Zumo006/hit\000"
 298      3030362F 
 298      68697400 
 299              		.text
 300              	.Letext0:
 301              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 302              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 303              		.file 4 ".\\ZumoLibrary/Reflectance.h"
 304              		.file 5 ".\\ZumoLibrary/LSM303D.h"
 305              		.file 6 "Generated_Source\\PSoC5/CyLib.h"
 306              		.file 7 ".\\ZumoLibrary/mqtt_sender.h"
 307              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 308              		.file 9 ".\\ZumoLibrary/Motor.h"
 309              		.file 10 "..\\FreeRTOS\\Source\\include/task.h"
 310              		.file 11 ".\\ZumoLibrary/IR.h"
 311              		.file 12 ".\\ZumoLibrary/Beep.h"
 312              		.file 13 "Generated_Source\\PSoC5/BatteryLed.h"
 313              		.file 14 "Generated_Source\\PSoC5/SW1.h"
 314              		.file 15 "Generated_Source\\PSoC5/core_cm3.h"
 315              		.file 16 "<built-in>"
 316              		.section	.debug_info,"",%progbits
 317              	.Ldebug_info0:
 318 0000 3C060000 		.4byte	0x63c
 319 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 25


 320 0006 00000000 		.4byte	.Ldebug_abbrev0
 321 000a 04       		.byte	0x4
 322 000b 01       		.uleb128 0x1
 323 000c D3020000 		.4byte	.LASF55
 324 0010 0C       		.byte	0xc
 325 0011 49020000 		.4byte	.LASF56
 326 0015 42000000 		.4byte	.LASF57
 327 0019 00000000 		.4byte	.Ldebug_ranges0+0
 328 001d 00000000 		.4byte	0
 329 0021 00000000 		.4byte	.Ldebug_line0
 330 0025 02       		.uleb128 0x2
 331 0026 01       		.byte	0x1
 332 0027 06       		.byte	0x6
 333 0028 85010000 		.4byte	.LASF0
 334 002c 03       		.uleb128 0x3
 335 002d 25010000 		.4byte	.LASF2
 336 0031 02       		.byte	0x2
 337 0032 1D       		.byte	0x1d
 338 0033 37000000 		.4byte	0x37
 339 0037 02       		.uleb128 0x2
 340 0038 01       		.byte	0x1
 341 0039 08       		.byte	0x8
 342 003a 5D010000 		.4byte	.LASF1
 343 003e 03       		.uleb128 0x3
 344 003f AD020000 		.4byte	.LASF3
 345 0043 02       		.byte	0x2
 346 0044 29       		.byte	0x29
 347 0045 49000000 		.4byte	0x49
 348 0049 02       		.uleb128 0x2
 349 004a 02       		.byte	0x2
 350 004b 05       		.byte	0x5
 351 004c 15000000 		.4byte	.LASF4
 352 0050 03       		.uleb128 0x3
 353 0051 37000000 		.4byte	.LASF5
 354 0055 02       		.byte	0x2
 355 0056 2B       		.byte	0x2b
 356 0057 5B000000 		.4byte	0x5b
 357 005b 02       		.uleb128 0x2
 358 005c 02       		.byte	0x2
 359 005d 07       		.byte	0x7
 360 005e F4010000 		.4byte	.LASF6
 361 0062 03       		.uleb128 0x3
 362 0063 92020000 		.4byte	.LASF7
 363 0067 02       		.byte	0x2
 364 0068 3F       		.byte	0x3f
 365 0069 6D000000 		.4byte	0x6d
 366 006d 02       		.uleb128 0x2
 367 006e 04       		.byte	0x4
 368 006f 05       		.byte	0x5
 369 0070 01010000 		.4byte	.LASF8
 370 0074 02       		.uleb128 0x2
 371 0075 04       		.byte	0x4
 372 0076 07       		.byte	0x7
 373 0077 50020000 		.4byte	.LASF9
 374 007b 02       		.uleb128 0x2
 375 007c 08       		.byte	0x8
 376 007d 05       		.byte	0x5
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 26


 377 007e DF000000 		.4byte	.LASF10
 378 0082 02       		.uleb128 0x2
 379 0083 08       		.byte	0x8
 380 0084 07       		.byte	0x7
 381 0085 A2010000 		.4byte	.LASF11
 382 0089 04       		.uleb128 0x4
 383 008a 04       		.byte	0x4
 384 008b 05       		.byte	0x5
 385 008c 696E7400 		.ascii	"int\000"
 386 0090 02       		.uleb128 0x2
 387 0091 04       		.byte	0x4
 388 0092 07       		.byte	0x7
 389 0093 CD010000 		.4byte	.LASF12
 390 0097 03       		.uleb128 0x3
 391 0098 99000000 		.4byte	.LASF13
 392 009c 03       		.byte	0x3
 393 009d 18       		.byte	0x18
 394 009e 2C000000 		.4byte	0x2c
 395 00a2 03       		.uleb128 0x3
 396 00a3 22020000 		.4byte	.LASF14
 397 00a7 03       		.byte	0x3
 398 00a8 20       		.byte	0x20
 399 00a9 3E000000 		.4byte	0x3e
 400 00ad 03       		.uleb128 0x3
 401 00ae DA010000 		.4byte	.LASF15
 402 00b2 03       		.byte	0x3
 403 00b3 24       		.byte	0x24
 404 00b4 50000000 		.4byte	0x50
 405 00b8 03       		.uleb128 0x3
 406 00b9 1A020000 		.4byte	.LASF16
 407 00bd 03       		.byte	0x3
 408 00be 2C       		.byte	0x2c
 409 00bf 62000000 		.4byte	0x62
 410 00c3 02       		.uleb128 0x2
 411 00c4 04       		.byte	0x4
 412 00c5 04       		.byte	0x4
 413 00c6 D9000000 		.4byte	.LASF17
 414 00ca 02       		.uleb128 0x2
 415 00cb 08       		.byte	0x8
 416 00cc 04       		.byte	0x4
 417 00cd 62020000 		.4byte	.LASF18
 418 00d1 02       		.uleb128 0x2
 419 00d2 01       		.byte	0x1
 420 00d3 08       		.byte	0x8
 421 00d4 15020000 		.4byte	.LASF19
 422 00d8 02       		.uleb128 0x2
 423 00d9 08       		.byte	0x8
 424 00da 04       		.byte	0x4
 425 00db 38010000 		.4byte	.LASF20
 426 00df 02       		.uleb128 0x2
 427 00e0 04       		.byte	0x4
 428 00e1 07       		.byte	0x7
 429 00e2 1F000000 		.4byte	.LASF21
 430 00e6 05       		.uleb128 0x5
 431 00e7 90000000 		.4byte	.LASF22
 432 00eb 0C       		.byte	0xc
 433 00ec 04       		.byte	0x4
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 27


 434 00ed 0E       		.byte	0xe
 435 00ee 35010000 		.4byte	0x135
 436 00f2 06       		.uleb128 0x6
 437 00f3 6C3300   		.ascii	"l3\000"
 438 00f6 04       		.byte	0x4
 439 00f7 0F       		.byte	0xf
 440 00f8 AD000000 		.4byte	0xad
 441 00fc 00       		.byte	0
 442 00fd 06       		.uleb128 0x6
 443 00fe 6C3200   		.ascii	"l2\000"
 444 0101 04       		.byte	0x4
 445 0102 10       		.byte	0x10
 446 0103 AD000000 		.4byte	0xad
 447 0107 02       		.byte	0x2
 448 0108 06       		.uleb128 0x6
 449 0109 6C3100   		.ascii	"l1\000"
 450 010c 04       		.byte	0x4
 451 010d 11       		.byte	0x11
 452 010e AD000000 		.4byte	0xad
 453 0112 04       		.byte	0x4
 454 0113 06       		.uleb128 0x6
 455 0114 723100   		.ascii	"r1\000"
 456 0117 04       		.byte	0x4
 457 0118 12       		.byte	0x12
 458 0119 AD000000 		.4byte	0xad
 459 011d 06       		.byte	0x6
 460 011e 06       		.uleb128 0x6
 461 011f 723200   		.ascii	"r2\000"
 462 0122 04       		.byte	0x4
 463 0123 13       		.byte	0x13
 464 0124 AD000000 		.4byte	0xad
 465 0128 08       		.byte	0x8
 466 0129 06       		.uleb128 0x6
 467 012a 723300   		.ascii	"r3\000"
 468 012d 04       		.byte	0x4
 469 012e 14       		.byte	0x14
 470 012f AD000000 		.4byte	0xad
 471 0133 0A       		.byte	0xa
 472 0134 00       		.byte	0
 473 0135 05       		.uleb128 0x5
 474 0136 1C010000 		.4byte	.LASF23
 475 013a 06       		.byte	0x6
 476 013b 05       		.byte	0x5
 477 013c 47       		.byte	0x47
 478 013d 66010000 		.4byte	0x166
 479 0141 07       		.uleb128 0x7
 480 0142 28000000 		.4byte	.LASF24
 481 0146 05       		.byte	0x5
 482 0147 49       		.byte	0x49
 483 0148 A2000000 		.4byte	0xa2
 484 014c 00       		.byte	0
 485 014d 07       		.uleb128 0x7
 486 014e 2D000000 		.4byte	.LASF25
 487 0152 05       		.byte	0x5
 488 0153 4A       		.byte	0x4a
 489 0154 A2000000 		.4byte	0xa2
 490 0158 02       		.byte	0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 28


 491 0159 07       		.uleb128 0x7
 492 015a 32000000 		.4byte	.LASF26
 493 015e 05       		.byte	0x5
 494 015f 4B       		.byte	0x4b
 495 0160 A2000000 		.4byte	0xa2
 496 0164 04       		.byte	0x4
 497 0165 00       		.byte	0
 498 0166 08       		.uleb128 0x8
 499 0167 8C020000 		.4byte	.LASF58
 500 016b 01       		.byte	0x1
 501 016c B803     		.2byte	0x3b8
 502 016e 00000000 		.4byte	.LFB85
 503 0172 74010000 		.4byte	.LFE85-.LFB85
 504 0176 01       		.uleb128 0x1
 505 0177 9C       		.byte	0x9c
 506 0178 3B050000 		.4byte	0x53b
 507 017c 09       		.uleb128 0x9
 508 017d 3B020000 		.4byte	.LASF27
 509 0181 01       		.byte	0x1
 510 0182 BA03     		.2byte	0x3ba
 511 0184 35010000 		.4byte	0x135
 512 0188 02       		.uleb128 0x2
 513 0189 91       		.byte	0x91
 514 018a 70       		.sleb128 -16
 515 018b 0A       		.uleb128 0xa
 516 018c 84020000 		.4byte	.LASF28
 517 0190 01       		.byte	0x1
 518 0191 BC03     		.2byte	0x3bc
 519 0193 97000000 		.4byte	0x97
 520 0197 00000000 		.4byte	.LLST0
 521 019b 0B       		.uleb128 0xb
 522 019c 12000000 		.4byte	.LBB2
 523 01a0 62010000 		.4byte	.LBE2-.LBB2
 524 01a4 1A050000 		.4byte	0x51a
 525 01a8 0C       		.uleb128 0xc
 526 01a9 72656600 		.ascii	"ref\000"
 527 01ad 01       		.byte	0x1
 528 01ae C403     		.2byte	0x3c4
 529 01b0 E6000000 		.4byte	0xe6
 530 01b4 02       		.uleb128 0x2
 531 01b5 91       		.byte	0x91
 532 01b6 58       		.sleb128 -40
 533 01b7 0C       		.uleb128 0xc
 534 01b8 64696700 		.ascii	"dig\000"
 535 01bc 01       		.byte	0x1
 536 01bd C503     		.2byte	0x3c5
 537 01bf E6000000 		.4byte	0xe6
 538 01c3 02       		.uleb128 0x2
 539 01c4 91       		.byte	0x91
 540 01c5 64       		.sleb128 -28
 541 01c6 0D       		.uleb128 0xd
 542 01c7 6C656400 		.ascii	"led\000"
 543 01cb 01       		.byte	0x1
 544 01cc C603     		.2byte	0x3c6
 545 01ce 3B050000 		.4byte	0x53b
 546 01d2 13000000 		.4byte	.LLST1
 547 01d6 0E       		.uleb128 0xe
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 29


 548 01d7 A1000000 		.4byte	.LASF29
 549 01db 01       		.byte	0x1
 550 01dc C603     		.2byte	0x3c6
 551 01de 3B050000 		.4byte	0x53b
 552 01e2 01       		.byte	0x1
 553 01e3 0A       		.uleb128 0xa
 554 01e4 A7000000 		.4byte	.LASF30
 555 01e8 01       		.byte	0x1
 556 01e9 C603     		.2byte	0x3c6
 557 01eb 3B050000 		.4byte	0x53b
 558 01ef 33000000 		.4byte	.LLST2
 559 01f3 0E       		.uleb128 0xe
 560 01f4 E3010000 		.4byte	.LASF31
 561 01f8 01       		.byte	0x1
 562 01f9 C603     		.2byte	0x3c6
 563 01fb 3B050000 		.4byte	0x53b
 564 01ff 01       		.byte	0x1
 565 0200 0E       		.uleb128 0xe
 566 0201 BC000000 		.4byte	.LASF32
 567 0205 01       		.byte	0x1
 568 0206 C703     		.2byte	0x3c7
 569 0208 89000000 		.4byte	0x89
 570 020c 00       		.byte	0
 571 020d 0A       		.uleb128 0xa
 572 020e EE010000 		.4byte	.LASF33
 573 0212 01       		.byte	0x1
 574 0213 E103     		.2byte	0x3e1
 575 0215 89000000 		.4byte	0x89
 576 0219 69000000 		.4byte	.LLST3
 577 021d 0F       		.uleb128 0xf
 578 021e 656E6400 		.ascii	"end\000"
 579 0222 01       		.byte	0x1
 580 0223 0A04     		.2byte	0x40a
 581 0225 89000000 		.4byte	0x89
 582 0229 0B       		.uleb128 0xb
 583 022a CE000000 		.4byte	.LBB3
 584 022e 50000000 		.4byte	.LBE3-.LBB3
 585 0232 F5020000 		.4byte	0x2f5
 586 0236 0D       		.uleb128 0xd
 587 0237 7200     		.ascii	"r\000"
 588 0239 01       		.byte	0x1
 589 023a F403     		.2byte	0x3f4
 590 023c 89000000 		.4byte	0x89
 591 0240 87000000 		.4byte	.LLST4
 592 0244 10       		.uleb128 0x10
 593 0245 D2000000 		.4byte	.LVL27
 594 0249 53050000 		.4byte	0x553
 595 024d 11       		.uleb128 0x11
 596 024e DC000000 		.4byte	.LVL28
 597 0252 5E050000 		.4byte	0x55e
 598 0256 6D020000 		.4byte	0x26d
 599 025a 12       		.uleb128 0x12
 600 025b 01       		.uleb128 0x1
 601 025c 50       		.byte	0x50
 602 025d 05       		.uleb128 0x5
 603 025e 03       		.byte	0x3
 604 025f 50000000 		.4byte	.LC7
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 30


 605 0263 12       		.uleb128 0x12
 606 0264 01       		.uleb128 0x1
 607 0265 51       		.byte	0x51
 608 0266 05       		.uleb128 0x5
 609 0267 03       		.byte	0x3
 610 0268 3C000000 		.4byte	.LC5
 611 026c 00       		.byte	0
 612 026d 10       		.uleb128 0x10
 613 026e E0000000 		.4byte	.LVL29
 614 0272 69050000 		.4byte	0x569
 615 0276 11       		.uleb128 0x11
 616 0277 FC000000 		.4byte	.LVL32
 617 027b 74050000 		.4byte	0x574
 618 027f 97020000 		.4byte	0x297
 619 0283 12       		.uleb128 0x12
 620 0284 01       		.uleb128 0x1
 621 0285 50       		.byte	0x50
 622 0286 02       		.uleb128 0x2
 623 0287 09       		.byte	0x9
 624 0288 C8       		.byte	0xc8
 625 0289 12       		.uleb128 0x12
 626 028a 01       		.uleb128 0x1
 627 028b 51       		.byte	0x51
 628 028c 02       		.uleb128 0x2
 629 028d 08       		.byte	0x8
 630 028e 32       		.byte	0x32
 631 028f 12       		.uleb128 0x12
 632 0290 01       		.uleb128 0x1
 633 0291 52       		.byte	0x52
 634 0292 03       		.uleb128 0x3
 635 0293 0A       		.byte	0xa
 636 0294 F401     		.2byte	0x1f4
 637 0296 00       		.byte	0
 638 0297 11       		.uleb128 0x11
 639 0298 02010000 		.4byte	.LVL33
 640 029c 7F050000 		.4byte	0x57f
 641 02a0 AA020000 		.4byte	0x2aa
 642 02a4 12       		.uleb128 0x12
 643 02a5 01       		.uleb128 0x1
 644 02a6 50       		.byte	0x50
 645 02a7 01       		.uleb128 0x1
 646 02a8 30       		.byte	0x30
 647 02a9 00       		.byte	0
 648 02aa 11       		.uleb128 0x11
 649 02ab 10010000 		.4byte	.LVL36
 650 02af 74050000 		.4byte	0x574
 651 02b3 CB020000 		.4byte	0x2cb
 652 02b7 12       		.uleb128 0x12
 653 02b8 01       		.uleb128 0x1
 654 02b9 50       		.byte	0x50
 655 02ba 02       		.uleb128 0x2
 656 02bb 08       		.byte	0x8
 657 02bc 32       		.byte	0x32
 658 02bd 12       		.uleb128 0x12
 659 02be 01       		.uleb128 0x1
 660 02bf 51       		.byte	0x51
 661 02c0 02       		.uleb128 0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 31


 662 02c1 09       		.byte	0x9
 663 02c2 C8       		.byte	0xc8
 664 02c3 12       		.uleb128 0x12
 665 02c4 01       		.uleb128 0x1
 666 02c5 52       		.byte	0x52
 667 02c6 03       		.uleb128 0x3
 668 02c7 0A       		.byte	0xa
 669 02c8 F401     		.2byte	0x1f4
 670 02ca 00       		.byte	0
 671 02cb 11       		.uleb128 0x11
 672 02cc 16010000 		.4byte	.LVL37
 673 02d0 7F050000 		.4byte	0x57f
 674 02d4 DE020000 		.4byte	0x2de
 675 02d8 12       		.uleb128 0x12
 676 02d9 01       		.uleb128 0x1
 677 02da 50       		.byte	0x50
 678 02db 01       		.uleb128 0x1
 679 02dc 30       		.byte	0x30
 680 02dd 00       		.byte	0
 681 02de 13       		.uleb128 0x13
 682 02df 1E010000 		.4byte	.LVL38
 683 02e3 8B050000 		.4byte	0x58b
 684 02e7 12       		.uleb128 0x12
 685 02e8 01       		.uleb128 0x1
 686 02e9 50       		.byte	0x50
 687 02ea 02       		.uleb128 0x2
 688 02eb 08       		.byte	0x8
 689 02ec 64       		.byte	0x64
 690 02ed 12       		.uleb128 0x12
 691 02ee 01       		.uleb128 0x1
 692 02ef 51       		.byte	0x51
 693 02f0 02       		.uleb128 0x2
 694 02f1 08       		.byte	0x8
 695 02f2 64       		.byte	0x64
 696 02f3 00       		.byte	0
 697 02f4 00       		.byte	0
 698 02f5 10       		.uleb128 0x10
 699 02f6 16000000 		.4byte	.LVL2
 700 02fa 96050000 		.4byte	0x596
 701 02fe 11       		.uleb128 0x11
 702 02ff 1C000000 		.4byte	.LVL3
 703 0303 A1050000 		.4byte	0x5a1
 704 0307 15030000 		.4byte	0x315
 705 030b 12       		.uleb128 0x12
 706 030c 01       		.uleb128 0x1
 707 030d 50       		.byte	0x50
 708 030e 05       		.uleb128 0x5
 709 030f 03       		.byte	0x3
 710 0310 08000000 		.4byte	.LC1
 711 0314 00       		.byte	0
 712 0315 10       		.uleb128 0x10
 713 0316 20000000 		.4byte	.LVL4
 714 031a B0050000 		.4byte	0x5b0
 715 031e 11       		.uleb128 0x11
 716 031f 28000000 		.4byte	.LVL5
 717 0323 5E050000 		.4byte	0x55e
 718 0327 3E030000 		.4byte	0x33e
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 32


 719 032b 12       		.uleb128 0x12
 720 032c 01       		.uleb128 0x1
 721 032d 50       		.byte	0x50
 722 032e 05       		.uleb128 0x5
 723 032f 03       		.byte	0x3
 724 0330 1C000000 		.4byte	.LC3
 725 0334 12       		.uleb128 0x12
 726 0335 01       		.uleb128 0x1
 727 0336 51       		.byte	0x51
 728 0337 05       		.uleb128 0x5
 729 0338 03       		.byte	0x3
 730 0339 14000000 		.4byte	.LC2
 731 033d 00       		.byte	0
 732 033e 10       		.uleb128 0x10
 733 033f 2C000000 		.4byte	.LVL6
 734 0343 BB050000 		.4byte	0x5bb
 735 0347 11       		.uleb128 0x11
 736 0348 32000000 		.4byte	.LVL7
 737 034c A1050000 		.4byte	0x5a1
 738 0350 5E030000 		.4byte	0x35e
 739 0354 12       		.uleb128 0x12
 740 0355 01       		.uleb128 0x1
 741 0356 50       		.byte	0x50
 742 0357 05       		.uleb128 0x5
 743 0358 03       		.byte	0x3
 744 0359 2C000000 		.4byte	.LC4
 745 035d 00       		.byte	0
 746 035e 10       		.uleb128 0x10
 747 035f 36000000 		.4byte	.LVL8
 748 0363 C6050000 		.4byte	0x5c6
 749 0367 11       		.uleb128 0x11
 750 0368 4A000000 		.4byte	.LVL9
 751 036c D1050000 		.4byte	0x5d1
 752 0370 A1030000 		.4byte	0x3a1
 753 0374 12       		.uleb128 0x12
 754 0375 01       		.uleb128 0x1
 755 0376 50       		.byte	0x50
 756 0377 03       		.uleb128 0x3
 757 0378 0A       		.byte	0xa
 758 0379 2823     		.2byte	0x2328
 759 037b 12       		.uleb128 0x12
 760 037c 01       		.uleb128 0x1
 761 037d 51       		.byte	0x51
 762 037e 03       		.uleb128 0x3
 763 037f 0A       		.byte	0xa
 764 0380 2823     		.2byte	0x2328
 765 0382 12       		.uleb128 0x12
 766 0383 01       		.uleb128 0x1
 767 0384 52       		.byte	0x52
 768 0385 03       		.uleb128 0x3
 769 0386 0A       		.byte	0xa
 770 0387 F82A     		.2byte	0x2af8
 771 0389 12       		.uleb128 0x12
 772 038a 01       		.uleb128 0x1
 773 038b 53       		.byte	0x53
 774 038c 03       		.uleb128 0x3
 775 038d 0A       		.byte	0xa
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 33


 776 038e F82A     		.2byte	0x2af8
 777 0390 12       		.uleb128 0x12
 778 0391 02       		.uleb128 0x2
 779 0392 7D       		.byte	0x7d
 780 0393 00       		.sleb128 0
 781 0394 03       		.uleb128 0x3
 782 0395 0A       		.byte	0xa
 783 0396 2823     		.2byte	0x2328
 784 0398 12       		.uleb128 0x12
 785 0399 02       		.uleb128 0x2
 786 039a 7D       		.byte	0x7d
 787 039b 04       		.sleb128 4
 788 039c 03       		.uleb128 0x3
 789 039d 0A       		.byte	0xa
 790 039e 2823     		.2byte	0x2328
 791 03a0 00       		.byte	0
 792 03a1 11       		.uleb128 0x11
 793 03a2 50000000 		.4byte	.LVL10
 794 03a6 7F050000 		.4byte	0x57f
 795 03aa B5030000 		.4byte	0x3b5
 796 03ae 12       		.uleb128 0x12
 797 03af 01       		.uleb128 0x1
 798 03b0 50       		.byte	0x50
 799 03b1 02       		.uleb128 0x2
 800 03b2 08       		.byte	0x8
 801 03b3 C8       		.byte	0xc8
 802 03b4 00       		.byte	0
 803 03b5 11       		.uleb128 0x11
 804 03b6 5A000000 		.4byte	.LVL12
 805 03ba DC050000 		.4byte	0x5dc
 806 03be C9030000 		.4byte	0x3c9
 807 03c2 12       		.uleb128 0x12
 808 03c3 01       		.uleb128 0x1
 809 03c4 50       		.byte	0x50
 810 03c5 02       		.uleb128 0x2
 811 03c6 91       		.byte	0x91
 812 03c7 58       		.sleb128 -40
 813 03c8 00       		.byte	0
 814 03c9 11       		.uleb128 0x11
 815 03ca 60000000 		.4byte	.LVL13
 816 03ce E7050000 		.4byte	0x5e7
 817 03d2 DD030000 		.4byte	0x3dd
 818 03d6 12       		.uleb128 0x12
 819 03d7 01       		.uleb128 0x1
 820 03d8 50       		.byte	0x50
 821 03d9 02       		.uleb128 0x2
 822 03da 91       		.byte	0x91
 823 03db 64       		.sleb128 -28
 824 03dc 00       		.byte	0
 825 03dd 11       		.uleb128 0x11
 826 03de 7A000000 		.4byte	.LVL14
 827 03e2 74050000 		.4byte	0x574
 828 03e6 FD030000 		.4byte	0x3fd
 829 03ea 12       		.uleb128 0x12
 830 03eb 01       		.uleb128 0x1
 831 03ec 50       		.byte	0x50
 832 03ed 02       		.uleb128 0x2
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 34


 833 03ee 08       		.byte	0x8
 834 03ef 32       		.byte	0x32
 835 03f0 12       		.uleb128 0x12
 836 03f1 01       		.uleb128 0x1
 837 03f2 51       		.byte	0x51
 838 03f3 02       		.uleb128 0x2
 839 03f4 08       		.byte	0x8
 840 03f5 32       		.byte	0x32
 841 03f6 12       		.uleb128 0x12
 842 03f7 01       		.uleb128 0x1
 843 03f8 52       		.byte	0x52
 844 03f9 02       		.uleb128 0x2
 845 03fa 08       		.byte	0x8
 846 03fb 32       		.byte	0x32
 847 03fc 00       		.byte	0
 848 03fd 11       		.uleb128 0x11
 849 03fe 82000000 		.4byte	.LVL15
 850 0402 F2050000 		.4byte	0x5f2
 851 0406 17040000 		.4byte	0x417
 852 040a 12       		.uleb128 0x12
 853 040b 01       		.uleb128 0x1
 854 040c 50       		.byte	0x50
 855 040d 02       		.uleb128 0x2
 856 040e 08       		.byte	0x8
 857 040f 3C       		.byte	0x3c
 858 0410 12       		.uleb128 0x12
 859 0411 01       		.uleb128 0x1
 860 0412 51       		.byte	0x51
 861 0413 02       		.uleb128 0x2
 862 0414 08       		.byte	0x8
 863 0415 50       		.byte	0x50
 864 0416 00       		.byte	0
 865 0417 11       		.uleb128 0x11
 866 0418 8C000000 		.4byte	.LVL16
 867 041c 8B050000 		.4byte	0x58b
 868 0420 2F040000 		.4byte	0x42f
 869 0424 12       		.uleb128 0x12
 870 0425 01       		.uleb128 0x1
 871 0426 50       		.byte	0x50
 872 0427 01       		.uleb128 0x1
 873 0428 30       		.byte	0x30
 874 0429 12       		.uleb128 0x12
 875 042a 01       		.uleb128 0x1
 876 042b 51       		.byte	0x51
 877 042c 01       		.uleb128 0x1
 878 042d 30       		.byte	0x30
 879 042e 00       		.byte	0
 880 042f 11       		.uleb128 0x11
 881 0430 9A000000 		.4byte	.LVL18
 882 0434 5E050000 		.4byte	0x55e
 883 0438 4F040000 		.4byte	0x44f
 884 043c 12       		.uleb128 0x12
 885 043d 01       		.uleb128 0x1
 886 043e 50       		.byte	0x50
 887 043f 05       		.uleb128 0x5
 888 0440 03       		.byte	0x3
 889 0441 1C000000 		.4byte	.LC3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 35


 890 0445 12       		.uleb128 0x12
 891 0446 01       		.uleb128 0x1
 892 0447 51       		.byte	0x51
 893 0448 05       		.uleb128 0x5
 894 0449 03       		.byte	0x3
 895 044a 14000000 		.4byte	.LC2
 896 044e 00       		.byte	0
 897 044f 10       		.uleb128 0x10
 898 0450 9E000000 		.4byte	.LVL19
 899 0454 FD050000 		.4byte	0x5fd
 900 0458 10       		.uleb128 0x10
 901 0459 A2000000 		.4byte	.LVL20
 902 045d 08060000 		.4byte	0x608
 903 0461 10       		.uleb128 0x10
 904 0462 A6000000 		.4byte	.LVL21
 905 0466 13060000 		.4byte	0x613
 906 046a 10       		.uleb128 0x10
 907 046b AA000000 		.4byte	.LVL22
 908 046f 53050000 		.4byte	0x553
 909 0473 11       		.uleb128 0x11
 910 0474 B4000000 		.4byte	.LVL24
 911 0478 5E050000 		.4byte	0x55e
 912 047c 93040000 		.4byte	0x493
 913 0480 12       		.uleb128 0x12
 914 0481 01       		.uleb128 0x1
 915 0482 50       		.byte	0x50
 916 0483 05       		.uleb128 0x5
 917 0484 03       		.byte	0x3
 918 0485 40000000 		.4byte	.LC6
 919 0489 12       		.uleb128 0x12
 920 048a 01       		.uleb128 0x1
 921 048b 51       		.byte	0x51
 922 048c 05       		.uleb128 0x5
 923 048d 03       		.byte	0x3
 924 048e 3C000000 		.4byte	.LC5
 925 0492 00       		.byte	0
 926 0493 11       		.uleb128 0x11
 927 0494 BA000000 		.4byte	.LVL25
 928 0498 1E060000 		.4byte	0x61e
 929 049c A6040000 		.4byte	0x4a6
 930 04a0 12       		.uleb128 0x12
 931 04a1 01       		.uleb128 0x1
 932 04a2 50       		.byte	0x50
 933 04a3 01       		.uleb128 0x1
 934 04a4 31       		.byte	0x31
 935 04a5 00       		.byte	0
 936 04a6 11       		.uleb128 0x11
 937 04a7 C4000000 		.4byte	.LVL26
 938 04ab 8B050000 		.4byte	0x58b
 939 04af C0040000 		.4byte	0x4c0
 940 04b3 12       		.uleb128 0x12
 941 04b4 01       		.uleb128 0x1
 942 04b5 50       		.byte	0x50
 943 04b6 02       		.uleb128 0x2
 944 04b7 08       		.byte	0x8
 945 04b8 64       		.byte	0x64
 946 04b9 12       		.uleb128 0x12
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 36


 947 04ba 01       		.uleb128 0x1
 948 04bb 51       		.byte	0x51
 949 04bc 02       		.uleb128 0x2
 950 04bd 08       		.byte	0x8
 951 04be 64       		.byte	0x64
 952 04bf 00       		.byte	0
 953 04c0 11       		.uleb128 0x11
 954 04c1 3A010000 		.4byte	.LVL39
 955 04c5 74050000 		.4byte	0x574
 956 04c9 E1040000 		.4byte	0x4e1
 957 04cd 12       		.uleb128 0x12
 958 04ce 01       		.uleb128 0x1
 959 04cf 50       		.byte	0x50
 960 04d0 02       		.uleb128 0x2
 961 04d1 08       		.byte	0x8
 962 04d2 32       		.byte	0x32
 963 04d3 12       		.uleb128 0x12
 964 04d4 01       		.uleb128 0x1
 965 04d5 51       		.byte	0x51
 966 04d6 02       		.uleb128 0x2
 967 04d7 09       		.byte	0x9
 968 04d8 C8       		.byte	0xc8
 969 04d9 12       		.uleb128 0x12
 970 04da 01       		.uleb128 0x1
 971 04db 52       		.byte	0x52
 972 04dc 03       		.uleb128 0x3
 973 04dd 0A       		.byte	0xa
 974 04de E803     		.2byte	0x3e8
 975 04e0 00       		.byte	0
 976 04e1 11       		.uleb128 0x11
 977 04e2 40010000 		.4byte	.LVL40
 978 04e6 DC050000 		.4byte	0x5dc
 979 04ea F5040000 		.4byte	0x4f5
 980 04ee 12       		.uleb128 0x12
 981 04ef 01       		.uleb128 0x1
 982 04f0 50       		.byte	0x50
 983 04f1 02       		.uleb128 0x2
 984 04f2 91       		.byte	0x91
 985 04f3 58       		.sleb128 -40
 986 04f4 00       		.byte	0
 987 04f5 11       		.uleb128 0x11
 988 04f6 46010000 		.4byte	.LVL41
 989 04fa E7050000 		.4byte	0x5e7
 990 04fe 09050000 		.4byte	0x509
 991 0502 12       		.uleb128 0x12
 992 0503 01       		.uleb128 0x1
 993 0504 50       		.byte	0x50
 994 0505 02       		.uleb128 0x2
 995 0506 91       		.byte	0x91
 996 0507 64       		.sleb128 -28
 997 0508 00       		.byte	0
 998 0509 13       		.uleb128 0x13
 999 050a 4C010000 		.4byte	.LVL42
 1000 050e 29060000 		.4byte	0x629
 1001 0512 12       		.uleb128 0x12
 1002 0513 01       		.uleb128 0x1
 1003 0514 50       		.byte	0x50
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 37


 1004 0515 02       		.uleb128 0x2
 1005 0516 91       		.byte	0x91
 1006 0517 70       		.sleb128 -16
 1007 0518 00       		.byte	0
 1008 0519 00       		.byte	0
 1009 051a 11       		.uleb128 0x11
 1010 051b 0A000000 		.4byte	.LVL0
 1011 051f A1050000 		.4byte	0x5a1
 1012 0523 31050000 		.4byte	0x531
 1013 0527 12       		.uleb128 0x12
 1014 0528 01       		.uleb128 0x1
 1015 0529 50       		.byte	0x50
 1016 052a 05       		.uleb128 0x5
 1017 052b 03       		.byte	0x3
 1018 052c 00000000 		.4byte	.LC0
 1019 0530 00       		.byte	0
 1020 0531 10       		.uleb128 0x10
 1021 0532 0E000000 		.4byte	.LVL1
 1022 0536 34060000 		.4byte	0x634
 1023 053a 00       		.byte	0
 1024 053b 02       		.uleb128 0x2
 1025 053c 01       		.byte	0x1
 1026 053d 02       		.byte	0x2
 1027 053e 2A020000 		.4byte	.LASF34
 1028 0542 14       		.uleb128 0x14
 1029 0543 C6020000 		.4byte	.LASF59
 1030 0547 0F       		.byte	0xf
 1031 0548 1207     		.2byte	0x712
 1032 054a 4E050000 		.4byte	0x54e
 1033 054e 15       		.uleb128 0x15
 1034 054f B8000000 		.4byte	0xb8
 1035 0553 16       		.uleb128 0x16
 1036 0554 0A010000 		.4byte	.LASF35
 1037 0558 0A010000 		.4byte	.LASF35
 1038 055c 06       		.byte	0x6
 1039 055d B6       		.byte	0xb6
 1040 055e 16       		.uleb128 0x16
 1041 055f 30020000 		.4byte	.LASF36
 1042 0563 30020000 		.4byte	.LASF36
 1043 0567 07       		.byte	0x7
 1044 0568 07       		.byte	0x7
 1045 0569 16       		.uleb128 0x16
 1046 056a C2000000 		.4byte	.LASF37
 1047 056e C2000000 		.4byte	.LASF37
 1048 0572 08       		.byte	0x8
 1049 0573 88       		.byte	0x88
 1050 0574 16       		.uleb128 0x16
 1051 0575 B1000000 		.4byte	.LASF38
 1052 0579 B1000000 		.4byte	.LASF38
 1053 057d 09       		.byte	0x9
 1054 057e 12       		.byte	0x12
 1055 057f 17       		.uleb128 0x17
 1056 0580 B9010000 		.4byte	.LASF39
 1057 0584 B9010000 		.4byte	.LASF39
 1058 0588 0A       		.byte	0xa
 1059 0589 ED02     		.2byte	0x2ed
 1060 058b 16       		.uleb128 0x16
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 38


 1061 058c 07020000 		.4byte	.LASF40
 1062 0590 07020000 		.4byte	.LASF40
 1063 0594 09       		.byte	0x9
 1064 0595 0F       		.byte	0xf
 1065 0596 16       		.uleb128 0x16
 1066 0597 2F010000 		.4byte	.LASF41
 1067 059b 2F010000 		.4byte	.LASF41
 1068 059f 0B       		.byte	0xb
 1069 05a0 11       		.byte	0x11
 1070 05a1 18       		.uleb128 0x18
 1071 05a2 E9010000 		.4byte	.LASF60
 1072 05a6 75020000 		.4byte	.LASF61
 1073 05aa 10       		.byte	0x10
 1074 05ab 00       		.byte	0
 1075 05ac E9010000 		.4byte	.LASF60
 1076 05b0 16       		.uleb128 0x16
 1077 05b1 69020000 		.4byte	.LASF42
 1078 05b5 69020000 		.4byte	.LASF42
 1079 05b9 09       		.byte	0x9
 1080 05ba 0B       		.byte	0xb
 1081 05bb 16       		.uleb128 0x16
 1082 05bc C4010000 		.4byte	.LASF43
 1083 05c0 C4010000 		.4byte	.LASF43
 1084 05c4 0B       		.byte	0xb
 1085 05c5 18       		.byte	0x18
 1086 05c6 16       		.uleb128 0x16
 1087 05c7 C7000000 		.4byte	.LASF44
 1088 05cb C7000000 		.4byte	.LASF44
 1089 05cf 04       		.byte	0x4
 1090 05d0 17       		.byte	0x17
 1091 05d1 16       		.uleb128 0x16
 1092 05d2 6B010000 		.4byte	.LASF45
 1093 05d6 6B010000 		.4byte	.LASF45
 1094 05da 04       		.byte	0x4
 1095 05db 1A       		.byte	0x1a
 1096 05dc 16       		.uleb128 0x16
 1097 05dd 9C020000 		.4byte	.LASF46
 1098 05e1 9C020000 		.4byte	.LASF46
 1099 05e5 04       		.byte	0x4
 1100 05e6 18       		.byte	0x18
 1101 05e7 16       		.uleb128 0x16
 1102 05e8 ED000000 		.4byte	.LASF47
 1103 05ec ED000000 		.4byte	.LASF47
 1104 05f0 04       		.byte	0x4
 1105 05f1 19       		.byte	0x19
 1106 05f2 16       		.uleb128 0x16
 1107 05f3 00000000 		.4byte	.LASF48
 1108 05f7 00000000 		.4byte	.LASF48
 1109 05fb 0C       		.byte	0xc
 1110 05fc 05       		.byte	0x5
 1111 05fd 16       		.uleb128 0x16
 1112 05fe 55010000 		.4byte	.LASF49
 1113 0602 55010000 		.4byte	.LASF49
 1114 0606 0B       		.byte	0xb
 1115 0607 1B       		.byte	0x1b
 1116 0608 16       		.uleb128 0x16
 1117 0609 05000000 		.4byte	.LASF50
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 39


 1118 060d 05000000 		.4byte	.LASF50
 1119 0611 06       		.byte	0x6
 1120 0612 B0       		.byte	0xb0
 1121 0613 16       		.uleb128 0x16
 1122 0614 B7020000 		.4byte	.LASF51
 1123 0618 B7020000 		.4byte	.LASF51
 1124 061c 06       		.byte	0x6
 1125 061d AE       		.byte	0xae
 1126 061e 16       		.uleb128 0x16
 1127 061f 91010000 		.4byte	.LASF52
 1128 0623 91010000 		.4byte	.LASF52
 1129 0627 0D       		.byte	0xd
 1130 0628 26       		.byte	0x26
 1131 0629 16       		.uleb128 0x16
 1132 062a 44010000 		.4byte	.LASF53
 1133 062e 44010000 		.4byte	.LASF53
 1134 0632 05       		.byte	0x5
 1135 0633 51       		.byte	0x51
 1136 0634 16       		.uleb128 0x16
 1137 0635 40020000 		.4byte	.LASF54
 1138 0639 40020000 		.4byte	.LASF54
 1139 063d 0E       		.byte	0xe
 1140 063e 29       		.byte	0x29
 1141 063f 00       		.byte	0
 1142              		.section	.debug_abbrev,"",%progbits
 1143              	.Ldebug_abbrev0:
 1144 0000 01       		.uleb128 0x1
 1145 0001 11       		.uleb128 0x11
 1146 0002 01       		.byte	0x1
 1147 0003 25       		.uleb128 0x25
 1148 0004 0E       		.uleb128 0xe
 1149 0005 13       		.uleb128 0x13
 1150 0006 0B       		.uleb128 0xb
 1151 0007 03       		.uleb128 0x3
 1152 0008 0E       		.uleb128 0xe
 1153 0009 1B       		.uleb128 0x1b
 1154 000a 0E       		.uleb128 0xe
 1155 000b 55       		.uleb128 0x55
 1156 000c 17       		.uleb128 0x17
 1157 000d 11       		.uleb128 0x11
 1158 000e 01       		.uleb128 0x1
 1159 000f 10       		.uleb128 0x10
 1160 0010 17       		.uleb128 0x17
 1161 0011 00       		.byte	0
 1162 0012 00       		.byte	0
 1163 0013 02       		.uleb128 0x2
 1164 0014 24       		.uleb128 0x24
 1165 0015 00       		.byte	0
 1166 0016 0B       		.uleb128 0xb
 1167 0017 0B       		.uleb128 0xb
 1168 0018 3E       		.uleb128 0x3e
 1169 0019 0B       		.uleb128 0xb
 1170 001a 03       		.uleb128 0x3
 1171 001b 0E       		.uleb128 0xe
 1172 001c 00       		.byte	0
 1173 001d 00       		.byte	0
 1174 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 40


 1175 001f 16       		.uleb128 0x16
 1176 0020 00       		.byte	0
 1177 0021 03       		.uleb128 0x3
 1178 0022 0E       		.uleb128 0xe
 1179 0023 3A       		.uleb128 0x3a
 1180 0024 0B       		.uleb128 0xb
 1181 0025 3B       		.uleb128 0x3b
 1182 0026 0B       		.uleb128 0xb
 1183 0027 49       		.uleb128 0x49
 1184 0028 13       		.uleb128 0x13
 1185 0029 00       		.byte	0
 1186 002a 00       		.byte	0
 1187 002b 04       		.uleb128 0x4
 1188 002c 24       		.uleb128 0x24
 1189 002d 00       		.byte	0
 1190 002e 0B       		.uleb128 0xb
 1191 002f 0B       		.uleb128 0xb
 1192 0030 3E       		.uleb128 0x3e
 1193 0031 0B       		.uleb128 0xb
 1194 0032 03       		.uleb128 0x3
 1195 0033 08       		.uleb128 0x8
 1196 0034 00       		.byte	0
 1197 0035 00       		.byte	0
 1198 0036 05       		.uleb128 0x5
 1199 0037 13       		.uleb128 0x13
 1200 0038 01       		.byte	0x1
 1201 0039 03       		.uleb128 0x3
 1202 003a 0E       		.uleb128 0xe
 1203 003b 0B       		.uleb128 0xb
 1204 003c 0B       		.uleb128 0xb
 1205 003d 3A       		.uleb128 0x3a
 1206 003e 0B       		.uleb128 0xb
 1207 003f 3B       		.uleb128 0x3b
 1208 0040 0B       		.uleb128 0xb
 1209 0041 01       		.uleb128 0x1
 1210 0042 13       		.uleb128 0x13
 1211 0043 00       		.byte	0
 1212 0044 00       		.byte	0
 1213 0045 06       		.uleb128 0x6
 1214 0046 0D       		.uleb128 0xd
 1215 0047 00       		.byte	0
 1216 0048 03       		.uleb128 0x3
 1217 0049 08       		.uleb128 0x8
 1218 004a 3A       		.uleb128 0x3a
 1219 004b 0B       		.uleb128 0xb
 1220 004c 3B       		.uleb128 0x3b
 1221 004d 0B       		.uleb128 0xb
 1222 004e 49       		.uleb128 0x49
 1223 004f 13       		.uleb128 0x13
 1224 0050 38       		.uleb128 0x38
 1225 0051 0B       		.uleb128 0xb
 1226 0052 00       		.byte	0
 1227 0053 00       		.byte	0
 1228 0054 07       		.uleb128 0x7
 1229 0055 0D       		.uleb128 0xd
 1230 0056 00       		.byte	0
 1231 0057 03       		.uleb128 0x3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 41


 1232 0058 0E       		.uleb128 0xe
 1233 0059 3A       		.uleb128 0x3a
 1234 005a 0B       		.uleb128 0xb
 1235 005b 3B       		.uleb128 0x3b
 1236 005c 0B       		.uleb128 0xb
 1237 005d 49       		.uleb128 0x49
 1238 005e 13       		.uleb128 0x13
 1239 005f 38       		.uleb128 0x38
 1240 0060 0B       		.uleb128 0xb
 1241 0061 00       		.byte	0
 1242 0062 00       		.byte	0
 1243 0063 08       		.uleb128 0x8
 1244 0064 2E       		.uleb128 0x2e
 1245 0065 01       		.byte	0x1
 1246 0066 3F       		.uleb128 0x3f
 1247 0067 19       		.uleb128 0x19
 1248 0068 03       		.uleb128 0x3
 1249 0069 0E       		.uleb128 0xe
 1250 006a 3A       		.uleb128 0x3a
 1251 006b 0B       		.uleb128 0xb
 1252 006c 3B       		.uleb128 0x3b
 1253 006d 05       		.uleb128 0x5
 1254 006e 27       		.uleb128 0x27
 1255 006f 19       		.uleb128 0x19
 1256 0070 8701     		.uleb128 0x87
 1257 0072 19       		.uleb128 0x19
 1258 0073 11       		.uleb128 0x11
 1259 0074 01       		.uleb128 0x1
 1260 0075 12       		.uleb128 0x12
 1261 0076 06       		.uleb128 0x6
 1262 0077 40       		.uleb128 0x40
 1263 0078 18       		.uleb128 0x18
 1264 0079 9742     		.uleb128 0x2117
 1265 007b 19       		.uleb128 0x19
 1266 007c 01       		.uleb128 0x1
 1267 007d 13       		.uleb128 0x13
 1268 007e 00       		.byte	0
 1269 007f 00       		.byte	0
 1270 0080 09       		.uleb128 0x9
 1271 0081 34       		.uleb128 0x34
 1272 0082 00       		.byte	0
 1273 0083 03       		.uleb128 0x3
 1274 0084 0E       		.uleb128 0xe
 1275 0085 3A       		.uleb128 0x3a
 1276 0086 0B       		.uleb128 0xb
 1277 0087 3B       		.uleb128 0x3b
 1278 0088 05       		.uleb128 0x5
 1279 0089 49       		.uleb128 0x49
 1280 008a 13       		.uleb128 0x13
 1281 008b 02       		.uleb128 0x2
 1282 008c 18       		.uleb128 0x18
 1283 008d 00       		.byte	0
 1284 008e 00       		.byte	0
 1285 008f 0A       		.uleb128 0xa
 1286 0090 34       		.uleb128 0x34
 1287 0091 00       		.byte	0
 1288 0092 03       		.uleb128 0x3
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 42


 1289 0093 0E       		.uleb128 0xe
 1290 0094 3A       		.uleb128 0x3a
 1291 0095 0B       		.uleb128 0xb
 1292 0096 3B       		.uleb128 0x3b
 1293 0097 05       		.uleb128 0x5
 1294 0098 49       		.uleb128 0x49
 1295 0099 13       		.uleb128 0x13
 1296 009a 02       		.uleb128 0x2
 1297 009b 17       		.uleb128 0x17
 1298 009c 00       		.byte	0
 1299 009d 00       		.byte	0
 1300 009e 0B       		.uleb128 0xb
 1301 009f 0B       		.uleb128 0xb
 1302 00a0 01       		.byte	0x1
 1303 00a1 11       		.uleb128 0x11
 1304 00a2 01       		.uleb128 0x1
 1305 00a3 12       		.uleb128 0x12
 1306 00a4 06       		.uleb128 0x6
 1307 00a5 01       		.uleb128 0x1
 1308 00a6 13       		.uleb128 0x13
 1309 00a7 00       		.byte	0
 1310 00a8 00       		.byte	0
 1311 00a9 0C       		.uleb128 0xc
 1312 00aa 34       		.uleb128 0x34
 1313 00ab 00       		.byte	0
 1314 00ac 03       		.uleb128 0x3
 1315 00ad 08       		.uleb128 0x8
 1316 00ae 3A       		.uleb128 0x3a
 1317 00af 0B       		.uleb128 0xb
 1318 00b0 3B       		.uleb128 0x3b
 1319 00b1 05       		.uleb128 0x5
 1320 00b2 49       		.uleb128 0x49
 1321 00b3 13       		.uleb128 0x13
 1322 00b4 02       		.uleb128 0x2
 1323 00b5 18       		.uleb128 0x18
 1324 00b6 00       		.byte	0
 1325 00b7 00       		.byte	0
 1326 00b8 0D       		.uleb128 0xd
 1327 00b9 34       		.uleb128 0x34
 1328 00ba 00       		.byte	0
 1329 00bb 03       		.uleb128 0x3
 1330 00bc 08       		.uleb128 0x8
 1331 00bd 3A       		.uleb128 0x3a
 1332 00be 0B       		.uleb128 0xb
 1333 00bf 3B       		.uleb128 0x3b
 1334 00c0 05       		.uleb128 0x5
 1335 00c1 49       		.uleb128 0x49
 1336 00c2 13       		.uleb128 0x13
 1337 00c3 02       		.uleb128 0x2
 1338 00c4 17       		.uleb128 0x17
 1339 00c5 00       		.byte	0
 1340 00c6 00       		.byte	0
 1341 00c7 0E       		.uleb128 0xe
 1342 00c8 34       		.uleb128 0x34
 1343 00c9 00       		.byte	0
 1344 00ca 03       		.uleb128 0x3
 1345 00cb 0E       		.uleb128 0xe
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 43


 1346 00cc 3A       		.uleb128 0x3a
 1347 00cd 0B       		.uleb128 0xb
 1348 00ce 3B       		.uleb128 0x3b
 1349 00cf 05       		.uleb128 0x5
 1350 00d0 49       		.uleb128 0x49
 1351 00d1 13       		.uleb128 0x13
 1352 00d2 1C       		.uleb128 0x1c
 1353 00d3 0B       		.uleb128 0xb
 1354 00d4 00       		.byte	0
 1355 00d5 00       		.byte	0
 1356 00d6 0F       		.uleb128 0xf
 1357 00d7 34       		.uleb128 0x34
 1358 00d8 00       		.byte	0
 1359 00d9 03       		.uleb128 0x3
 1360 00da 08       		.uleb128 0x8
 1361 00db 3A       		.uleb128 0x3a
 1362 00dc 0B       		.uleb128 0xb
 1363 00dd 3B       		.uleb128 0x3b
 1364 00de 05       		.uleb128 0x5
 1365 00df 49       		.uleb128 0x49
 1366 00e0 13       		.uleb128 0x13
 1367 00e1 00       		.byte	0
 1368 00e2 00       		.byte	0
 1369 00e3 10       		.uleb128 0x10
 1370 00e4 898201   		.uleb128 0x4109
 1371 00e7 00       		.byte	0
 1372 00e8 11       		.uleb128 0x11
 1373 00e9 01       		.uleb128 0x1
 1374 00ea 31       		.uleb128 0x31
 1375 00eb 13       		.uleb128 0x13
 1376 00ec 00       		.byte	0
 1377 00ed 00       		.byte	0
 1378 00ee 11       		.uleb128 0x11
 1379 00ef 898201   		.uleb128 0x4109
 1380 00f2 01       		.byte	0x1
 1381 00f3 11       		.uleb128 0x11
 1382 00f4 01       		.uleb128 0x1
 1383 00f5 31       		.uleb128 0x31
 1384 00f6 13       		.uleb128 0x13
 1385 00f7 01       		.uleb128 0x1
 1386 00f8 13       		.uleb128 0x13
 1387 00f9 00       		.byte	0
 1388 00fa 00       		.byte	0
 1389 00fb 12       		.uleb128 0x12
 1390 00fc 8A8201   		.uleb128 0x410a
 1391 00ff 00       		.byte	0
 1392 0100 02       		.uleb128 0x2
 1393 0101 18       		.uleb128 0x18
 1394 0102 9142     		.uleb128 0x2111
 1395 0104 18       		.uleb128 0x18
 1396 0105 00       		.byte	0
 1397 0106 00       		.byte	0
 1398 0107 13       		.uleb128 0x13
 1399 0108 898201   		.uleb128 0x4109
 1400 010b 01       		.byte	0x1
 1401 010c 11       		.uleb128 0x11
 1402 010d 01       		.uleb128 0x1
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 44


 1403 010e 31       		.uleb128 0x31
 1404 010f 13       		.uleb128 0x13
 1405 0110 00       		.byte	0
 1406 0111 00       		.byte	0
 1407 0112 14       		.uleb128 0x14
 1408 0113 34       		.uleb128 0x34
 1409 0114 00       		.byte	0
 1410 0115 03       		.uleb128 0x3
 1411 0116 0E       		.uleb128 0xe
 1412 0117 3A       		.uleb128 0x3a
 1413 0118 0B       		.uleb128 0xb
 1414 0119 3B       		.uleb128 0x3b
 1415 011a 05       		.uleb128 0x5
 1416 011b 49       		.uleb128 0x49
 1417 011c 13       		.uleb128 0x13
 1418 011d 3F       		.uleb128 0x3f
 1419 011e 19       		.uleb128 0x19
 1420 011f 3C       		.uleb128 0x3c
 1421 0120 19       		.uleb128 0x19
 1422 0121 00       		.byte	0
 1423 0122 00       		.byte	0
 1424 0123 15       		.uleb128 0x15
 1425 0124 35       		.uleb128 0x35
 1426 0125 00       		.byte	0
 1427 0126 49       		.uleb128 0x49
 1428 0127 13       		.uleb128 0x13
 1429 0128 00       		.byte	0
 1430 0129 00       		.byte	0
 1431 012a 16       		.uleb128 0x16
 1432 012b 2E       		.uleb128 0x2e
 1433 012c 00       		.byte	0
 1434 012d 3F       		.uleb128 0x3f
 1435 012e 19       		.uleb128 0x19
 1436 012f 3C       		.uleb128 0x3c
 1437 0130 19       		.uleb128 0x19
 1438 0131 6E       		.uleb128 0x6e
 1439 0132 0E       		.uleb128 0xe
 1440 0133 03       		.uleb128 0x3
 1441 0134 0E       		.uleb128 0xe
 1442 0135 3A       		.uleb128 0x3a
 1443 0136 0B       		.uleb128 0xb
 1444 0137 3B       		.uleb128 0x3b
 1445 0138 0B       		.uleb128 0xb
 1446 0139 00       		.byte	0
 1447 013a 00       		.byte	0
 1448 013b 17       		.uleb128 0x17
 1449 013c 2E       		.uleb128 0x2e
 1450 013d 00       		.byte	0
 1451 013e 3F       		.uleb128 0x3f
 1452 013f 19       		.uleb128 0x19
 1453 0140 3C       		.uleb128 0x3c
 1454 0141 19       		.uleb128 0x19
 1455 0142 6E       		.uleb128 0x6e
 1456 0143 0E       		.uleb128 0xe
 1457 0144 03       		.uleb128 0x3
 1458 0145 0E       		.uleb128 0xe
 1459 0146 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 45


 1460 0147 0B       		.uleb128 0xb
 1461 0148 3B       		.uleb128 0x3b
 1462 0149 05       		.uleb128 0x5
 1463 014a 00       		.byte	0
 1464 014b 00       		.byte	0
 1465 014c 18       		.uleb128 0x18
 1466 014d 2E       		.uleb128 0x2e
 1467 014e 00       		.byte	0
 1468 014f 3F       		.uleb128 0x3f
 1469 0150 19       		.uleb128 0x19
 1470 0151 3C       		.uleb128 0x3c
 1471 0152 19       		.uleb128 0x19
 1472 0153 6E       		.uleb128 0x6e
 1473 0154 0E       		.uleb128 0xe
 1474 0155 03       		.uleb128 0x3
 1475 0156 0E       		.uleb128 0xe
 1476 0157 3A       		.uleb128 0x3a
 1477 0158 0B       		.uleb128 0xb
 1478 0159 3B       		.uleb128 0x3b
 1479 015a 0B       		.uleb128 0xb
 1480 015b 6E       		.uleb128 0x6e
 1481 015c 0E       		.uleb128 0xe
 1482 015d 00       		.byte	0
 1483 015e 00       		.byte	0
 1484 015f 00       		.byte	0
 1485              		.section	.debug_loc,"",%progbits
 1486              	.Ldebug_loc0:
 1487              	.LLST0:
 1488 0000 0E000000 		.4byte	.LVL1
 1489 0004 15000000 		.4byte	.LVL2-1
 1490 0008 0100     		.2byte	0x1
 1491 000a 50       		.byte	0x50
 1492 000b 00000000 		.4byte	0
 1493 000f 00000000 		.4byte	0
 1494              	.LLST1:
 1495 0013 1C000000 		.4byte	.LVL3
 1496 0017 B4000000 		.4byte	.LVL24
 1497 001b 0200     		.2byte	0x2
 1498 001d 30       		.byte	0x30
 1499 001e 9F       		.byte	0x9f
 1500 001f B4000000 		.4byte	.LVL24
 1501 0023 74010000 		.4byte	.LFE85
 1502 0027 0200     		.2byte	0x2
 1503 0029 31       		.byte	0x31
 1504 002a 9F       		.byte	0x9f
 1505 002b 00000000 		.4byte	0
 1506 002f 00000000 		.4byte	0
 1507              	.LLST2:
 1508 0033 1C000000 		.4byte	.LVL3
 1509 0037 54000000 		.4byte	.LVL11
 1510 003b 0200     		.2byte	0x2
 1511 003d 31       		.byte	0x31
 1512 003e 9F       		.byte	0x9f
 1513 003f 54000000 		.4byte	.LVL11
 1514 0043 8C000000 		.4byte	.LVL16
 1515 0047 0100     		.2byte	0x1
 1516 0049 54       		.byte	0x54
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 46


 1517 004a 8C000000 		.4byte	.LVL16
 1518 004e 8E000000 		.4byte	.LVL17
 1519 0052 0200     		.2byte	0x2
 1520 0054 30       		.byte	0x30
 1521 0055 9F       		.byte	0x9f
 1522 0056 8E000000 		.4byte	.LVL17
 1523 005a 74010000 		.4byte	.LFE85
 1524 005e 0100     		.2byte	0x1
 1525 0060 54       		.byte	0x54
 1526 0061 00000000 		.4byte	0
 1527 0065 00000000 		.4byte	0
 1528              	.LLST3:
 1529 0069 AA000000 		.4byte	.LVL22
 1530 006d B0000000 		.4byte	.LVL23
 1531 0071 0100     		.2byte	0x1
 1532 0073 50       		.byte	0x50
 1533 0074 B0000000 		.4byte	.LVL23
 1534 0078 B3000000 		.4byte	.LVL24-1
 1535 007c 0100     		.2byte	0x1
 1536 007e 52       		.byte	0x52
 1537 007f 00000000 		.4byte	0
 1538 0083 00000000 		.4byte	0
 1539              	.LLST4:
 1540 0087 EE000000 		.4byte	.LVL30
 1541 008b F8000000 		.4byte	.LVL31
 1542 008f 0100     		.2byte	0x1
 1543 0091 50       		.byte	0x50
 1544 0092 04010000 		.4byte	.LVL34
 1545 0096 0C010000 		.4byte	.LVL35
 1546 009a 0100     		.2byte	0x1
 1547 009c 50       		.byte	0x50
 1548 009d 00000000 		.4byte	0
 1549 00a1 00000000 		.4byte	0
 1550              		.section	.debug_aranges,"",%progbits
 1551 0000 1C000000 		.4byte	0x1c
 1552 0004 0200     		.2byte	0x2
 1553 0006 00000000 		.4byte	.Ldebug_info0
 1554 000a 04       		.byte	0x4
 1555 000b 00       		.byte	0
 1556 000c 0000     		.2byte	0
 1557 000e 0000     		.2byte	0
 1558 0010 00000000 		.4byte	.LFB85
 1559 0014 74010000 		.4byte	.LFE85-.LFB85
 1560 0018 00000000 		.4byte	0
 1561 001c 00000000 		.4byte	0
 1562              		.section	.debug_ranges,"",%progbits
 1563              	.Ldebug_ranges0:
 1564 0000 00000000 		.4byte	.LFB85
 1565 0004 74010000 		.4byte	.LFE85
 1566 0008 00000000 		.4byte	0
 1567 000c 00000000 		.4byte	0
 1568              		.section	.debug_line,"",%progbits
 1569              	.Ldebug_line0:
 1570 0000 C0020000 		.section	.debug_str,"MS",%progbits,1
 1570      02006402 
 1570      00000201 
 1570      FB0E0D00 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 47


 1570      01010101 
 1571              	.LASF48:
 1572 0000 42656570 		.ascii	"Beep\000"
 1572      00
 1573              	.LASF50:
 1574 0005 43795379 		.ascii	"CySysTickEnable\000"
 1574      73546963 
 1574      6B456E61 
 1574      626C6500 
 1575              	.LASF4:
 1576 0015 73686F72 		.ascii	"short int\000"
 1576      7420696E 
 1576      7400
 1577              	.LASF21:
 1578 001f 73697A65 		.ascii	"sizetype\000"
 1578      74797065 
 1578      00
 1579              	.LASF24:
 1580 0028 61636358 		.ascii	"accX\000"
 1580      00
 1581              	.LASF25:
 1582 002d 61636359 		.ascii	"accY\000"
 1582      00
 1583              	.LASF26:
 1584 0032 6163635A 		.ascii	"accZ\000"
 1584      00
 1585              	.LASF5:
 1586 0037 5F5F7569 		.ascii	"__uint16_t\000"
 1586      6E743136 
 1586      5F7400
 1587              	.LASF57:
 1588 0042 433A5C55 		.ascii	"C:\\Users\\ilyap\\Documents\\PSoC Creator\\Zumo_tan"
 1588      73657273 
 1588      5C696C79 
 1588      61705C44 
 1588      6F63756D 
 1589 0070 6B5C5A75 		.ascii	"k\\Zumo_robot\\ZumoBot_Tank.cydsn\000"
 1589      6D6F5F72 
 1589      6F626F74 
 1589      5C5A756D 
 1589      6F426F74 
 1590              	.LASF22:
 1591 0090 73656E73 		.ascii	"sensors_\000"
 1591      6F72735F 
 1591      00
 1592              	.LASF13:
 1593 0099 75696E74 		.ascii	"uint8_t\000"
 1593      385F7400 
 1594              	.LASF29:
 1595 00a1 6C6F6F70 		.ascii	"loop1\000"
 1595      3100
 1596              	.LASF30:
 1597 00a7 73746172 		.ascii	"startline\000"
 1597      746C696E 
 1597      6500
 1598              	.LASF38:
 1599 00b1 6D6F746F 		.ascii	"motor_turn\000"
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 48


 1599      725F7475 
 1599      726E00
 1600              	.LASF32:
 1601 00bc 636F756E 		.ascii	"count\000"
 1601      7400
 1602              	.LASF37:
 1603 00c2 72616E64 		.ascii	"rand\000"
 1603      00
 1604              	.LASF44:
 1605 00c7 7265666C 		.ascii	"reflectance_start\000"
 1605      65637461 
 1605      6E63655F 
 1605      73746172 
 1605      7400
 1606              	.LASF17:
 1607 00d9 666C6F61 		.ascii	"float\000"
 1607      7400
 1608              	.LASF10:
 1609 00df 6C6F6E67 		.ascii	"long long int\000"
 1609      206C6F6E 
 1609      6720696E 
 1609      7400
 1610              	.LASF47:
 1611 00ed 7265666C 		.ascii	"reflectance_digital\000"
 1611      65637461 
 1611      6E63655F 
 1611      64696769 
 1611      74616C00 
 1612              	.LASF8:
 1613 0101 6C6F6E67 		.ascii	"long int\000"
 1613      20696E74 
 1613      00
 1614              	.LASF35:
 1615 010a 43795379 		.ascii	"CySysTickGetValue\000"
 1615      73546963 
 1615      6B476574 
 1615      56616C75 
 1615      6500
 1616              	.LASF23:
 1617 011c 61636344 		.ascii	"accData_\000"
 1617      6174615F 
 1617      00
 1618              	.LASF2:
 1619 0125 5F5F7569 		.ascii	"__uint8_t\000"
 1619      6E74385F 
 1619      7400
 1620              	.LASF41:
 1621 012f 49525F53 		.ascii	"IR_Start\000"
 1621      74617274 
 1621      00
 1622              	.LASF20:
 1623 0138 6C6F6E67 		.ascii	"long double\000"
 1623      20646F75 
 1623      626C6500 
 1624              	.LASF53:
 1625 0144 4C534D33 		.ascii	"LSM303D_Read_Acc\000"
 1625      3033445F 
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 49


 1625      52656164 
 1625      5F416363 
 1625      00
 1626              	.LASF49:
 1627 0155 49525F77 		.ascii	"IR_wait\000"
 1627      61697400 
 1628              	.LASF1:
 1629 015d 756E7369 		.ascii	"unsigned char\000"
 1629      676E6564 
 1629      20636861 
 1629      7200
 1630              	.LASF45:
 1631 016b 7265666C 		.ascii	"reflectance_set_threshold\000"
 1631      65637461 
 1631      6E63655F 
 1631      7365745F 
 1631      74687265 
 1632              	.LASF0:
 1633 0185 7369676E 		.ascii	"signed char\000"
 1633      65642063 
 1633      68617200 
 1634              	.LASF52:
 1635 0191 42617474 		.ascii	"BatteryLed_Write\000"
 1635      6572794C 
 1635      65645F57 
 1635      72697465 
 1635      00
 1636              	.LASF11:
 1637 01a2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1637      206C6F6E 
 1637      6720756E 
 1637      7369676E 
 1637      65642069 
 1638              	.LASF39:
 1639 01b9 76546173 		.ascii	"vTaskDelay\000"
 1639      6B44656C 
 1639      617900
 1640              	.LASF43:
 1641 01c4 49525F66 		.ascii	"IR_flush\000"
 1641      6C757368 
 1641      00
 1642              	.LASF12:
 1643 01cd 756E7369 		.ascii	"unsigned int\000"
 1643      676E6564 
 1643      20696E74 
 1643      00
 1644              	.LASF15:
 1645 01da 75696E74 		.ascii	"uint16_t\000"
 1645      31365F74 
 1645      00
 1646              	.LASF31:
 1647 01e3 6C6F6F70 		.ascii	"loop2\000"
 1647      3200
 1648              	.LASF60:
 1649 01e9 70757473 		.ascii	"puts\000"
 1649      00
 1650              	.LASF33:
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 50


 1651 01ee 73746172 		.ascii	"start\000"
 1651      7400
 1652              	.LASF6:
 1653 01f4 73686F72 		.ascii	"short unsigned int\000"
 1653      7420756E 
 1653      7369676E 
 1653      65642069 
 1653      6E7400
 1654              	.LASF40:
 1655 0207 6D6F746F 		.ascii	"motor_forward\000"
 1655      725F666F 
 1655      72776172 
 1655      6400
 1656              	.LASF19:
 1657 0215 63686172 		.ascii	"char\000"
 1657      00
 1658              	.LASF16:
 1659 021a 696E7433 		.ascii	"int32_t\000"
 1659      325F7400 
 1660              	.LASF14:
 1661 0222 696E7431 		.ascii	"int16_t\000"
 1661      365F7400 
 1662              	.LASF34:
 1663 022a 5F426F6F 		.ascii	"_Bool\000"
 1663      6C00
 1664              	.LASF36:
 1665 0230 7072696E 		.ascii	"print_mqtt\000"
 1665      745F6D71 
 1665      747400
 1666              	.LASF27:
 1667 023b 64617461 		.ascii	"data\000"
 1667      00
 1668              	.LASF54:
 1669 0240 5357315F 		.ascii	"SW1_Read\000"
 1669      52656164 
 1669      00
 1670              	.LASF56:
 1671 0249 6D61696E 		.ascii	"main.c\000"
 1671      2E6300
 1672              	.LASF9:
 1673 0250 6C6F6E67 		.ascii	"long unsigned int\000"
 1673      20756E73 
 1673      69676E65 
 1673      6420696E 
 1673      7400
 1674              	.LASF18:
 1675 0262 646F7562 		.ascii	"double\000"
 1675      6C6500
 1676              	.LASF42:
 1677 0269 6D6F746F 		.ascii	"motor_start\000"
 1677      725F7374 
 1677      61727400 
 1678              	.LASF61:
 1679 0275 5F5F6275 		.ascii	"__builtin_puts\000"
 1679      696C7469 
 1679      6E5F7075 
 1679      747300
ARM GAS  C:\Users\ilyap\AppData\Local\Temp\cc0mo1Ia.s 			page 51


 1680              	.LASF28:
 1681 0284 62757474 		.ascii	"button_\000"
 1681      6F6E5F00 
 1682              	.LASF58:
 1683 028c 7A6D6169 		.ascii	"zmain\000"
 1683      6E00
 1684              	.LASF7:
 1685 0292 5F5F696E 		.ascii	"__int32_t\000"
 1685      7433325F 
 1685      7400
 1686              	.LASF46:
 1687 029c 7265666C 		.ascii	"reflectance_read\000"
 1687      65637461 
 1687      6E63655F 
 1687      72656164 
 1687      00
 1688              	.LASF3:
 1689 02ad 5F5F696E 		.ascii	"__int16_t\000"
 1689      7431365F 
 1689      7400
 1690              	.LASF51:
 1691 02b7 43795379 		.ascii	"CySysTickStart\000"
 1691      73546963 
 1691      6B537461 
 1691      727400
 1692              	.LASF59:
 1693 02c6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1693      52784275 
 1693      66666572 
 1693      00
 1694              	.LASF55:
 1695 02d3 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1695      43313120 
 1695      352E342E 
 1695      31203230 
 1695      31363036 
 1696 0306 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1696      20726576 
 1696      6973696F 
 1696      6E203233 
 1696      37373135 
 1697 0339 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1697      66756E63 
 1697      74696F6E 
 1697      2D736563 
 1697      74696F6E 
 1698              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
