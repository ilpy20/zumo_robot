#include <project.h>
#include <stdio.h>
#include "FreeRTOS.h"
#include "task.h"
#include "Motor.h"
#include "Ultra.h"
#include "Nunchuk.h"
#include "Reflectance.h"
#include "Gyro.h"
#include "Accel_magnet.h"
#include "LSM303D.h"
#include "IR.h"
#include "Beep.h"
#include "mqtt_sender.h"
#include <time.h>
#include <sys/time.h>
#include "serial1.h"
#include <unistd.h>
#include <stdlib.h>


// Calibrated robot (one of main functions)
void go_forward(uint8 speed, int delay)
{
    MotorDirLeft_Write(0);      
    MotorDirRight_Write(0);    
    PWM_WriteCompare1(speed); 
    PWM_WriteCompare2(speed-7); 
    vTaskDelay(delay);
}

// turn to left 180% (main functions for left)
void tankturn_left(uint8 speed_left, uint8 speed_right, int delay)
{
    MotorDirLeft_Write(1);      
    MotorDirRight_Write(0);    
    PWM_WriteCompare1(speed_left); 
    PWM_WriteCompare2(speed_right); 
    vTaskDelay(delay);
}

// turn to right 180% (main functions for right)
void tankturn_right(uint8 speed_left, uint8 speed_right, int delay)
{
    MotorDirLeft_Write(0);      
    MotorDirRight_Write(1);    
    PWM_WriteCompare1(speed_left); 
    PWM_WriteCompare2(speed_right); 
    vTaskDelay(delay);
}
//short for writing 
void go_forward(uint8 speed, int delay);    
void tankturn_right(uint8 speed_left, uint8 speed_right, int delay);    
void tankturn_left(uint8 speed_left, uint8 speed_right, int delay);

void zmain(void)
{
    
    struct accData_ data; 
    LSM303D_Start();
    Ultra_Start();
    
    struct sensors_ dig;
    TickType_t start, end, hit = 0;
    
    reflectance_start();
    reflectance_set_threshold(9500, 9500, 9500, 10000, 11000, 13000);
    
    motor_start();
    motor_forward(0,0);
    IR_Start();
    
    // Prepare for the fight, wait for IR on the line. Press Ok
    while (SW1_Read() == 1) {
        vTaskDelay(150);
    }
    
    // Search circle 
    while (dig.l1 != 1 || dig.l2 != 1 || dig.l3 != 1 ||
          dig.r1 != 1 || dig.r2 != 1 || dig.r3 != 1) {
            reflectance_digital(&dig);
            go_forward(70, 20);
    }
    
    motor_forward(0, 0); 
    print_mqtt("Zumo006/ready", "zumo");
    IR_wait();
    
    // Pass the circle line
    go_forward(100, 2 00);
            
    start = xTaskGetTickCount();
    print_mqtt("Zumo006/start", "%d", start);
    
    // Sumo fighting loop
    while (true) {
        go_forward(150, 5);
        LSM303D_Read_Acc(&data);
        reflectance_digital(&dig);
        
        // Detect hits from sides
        if (data.accX > 12000 || data.accY > 12000 || data.accX < -12000 || data.accY < -12000) {
            
            // Send the attack message 
            // of 110 seconds
            if (xTaskGetTickCount() - hit > 110) {
                hit = xTaskGetTickCount();
                print_mqtt("Zumo006/attack", "%d", hit);
                
                // Change the direction 180 degree and sprint to avoid unnecessary collisions
                tankturn_left(250, 250, 00);
                motor_forward(0,0);
                go_forward(255, 100); 
                go_forward(230, 100); 
            }
        }
        
        
        if (Ultra_GetDistance() < 17) {
            go_forward(255, 350);
            go_forward(255, 150);
            
            if (xTaskGetTickCount() - hit > 150) {
                hit = xTaskGetTickCount();
                print_mqtt("Zumo006/hit", "%d", hit);
            }
        }
        
        // 180 turn
        if (dig.l1 == 1 || dig.l2 == 1 || dig.l3 == 1||
        dig.r1 == 1 || dig.r2 == 1 || dig.r3 == 1) {
            motor_backward(220, 200);
            motor_forward(0, 0);
            tankturn_right(220, 220, 400);   
            motor_forward(0, 0);
            go_forward(200, 150); 
        }
        
        // Stop the fight by pressing the user button
        if (SW1_Read() == 0) {
            motor_forward(0,0);
            
            end = xTaskGetTickCount();
            print_mqtt("Zumo006/stop", "%d", end);
            int delta = end - start;
            print_mqtt("Zuome006/time", "%d", delta);
            
            motor_stop();
            while(true)
                vTaskDelay(100);
        }
    }
}
